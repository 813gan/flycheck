\input texinfo
@setfilename flycheck.info
@settitle The Flycheck manual
@documentencoding UTF-8
@documentlanguage en

@c Macros

@c A Github link shortcut
@macro gh{url, text}
@uref{https://github.com/\url\, \text\}
@end macro

@macro flyc{checker}
@code{\checker\}
@end macro

@macro iflyc{checker}
@item @flyc{\checker\}
@end macro

@syncodeindex vr cp
@syncodeindex fn cp
@syncodeindex tp cp

@copying
This manual is for Flycheck, the on-the-fly syntax checker for GNU Emacs.

Copyright @copyright{} 2013, 2014 Sebastian Wiesner

@quotation
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3 or
  any later version published by the Free Software Foundation; with no
  Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
  copy of the license is included in the section entitled ``GNU Free
  Documentation License''.
@end quotation
@end copying

@dircategory Emacs
@direntry
* Flycheck: (flycheck). On the fly syntax checking (aka ``flymake done right'')
@end direntry

@titlepage
@end titlepage

@contents

@node Top, , (dir), (dir)
@top Flycheck manual

@insertcopying

@menu
* API::                         An overview about the Flycheck API
* Contribution::                How to contribute to Flycheck development
* Changes::                     Changes to Flycheck
* Credits::                     Developers and contributors to Flycheck
* GNU Free Documentation License::  The license of this documentation
* Syntax checkers::             Available syntax checkers
* Definition Index::            An index of all types, functions and variables
@end menu

@node API, Contribution, , Top
@comment  node-name,  next,  previous,  up
@chapter Flycheck API

This chapter provides a brief overview over the Flycheck API.

You may use this API to extend Flycheck, e.g. by implementing new error
parsers or more in-depth error analysis.  You will also find this API
helpful if you want to develop Flycheck itself.

As said this chapter merely provides an overview over the Flycheck API.
The documentation is therefore rather brief.  For a definite reference
on a function or variable, consult its docstring via
@code{describe-function} and @code{describe-variable} respectively.

@menu
* Error API::                   How to create and inspect Flycheck errors
* Error parser API::            Utilities for implementing error parsers
@end menu

@node Error API, Error parser API, API, API
@comment  node-name,  next,  previous,  up
@section Error API

Flycheck errors are represented by the CL structure @code{flycheck-error}.
@xref{Structures, , , cl}, for information about CL structures.

@deftp {Structure} flycheck-error @
  buffer checker filename line column message level

A Flycheck error with the following attributes, each of which may be
@code{nil}:

@table @code
@item buffer
The buffer object referring to the buffer this error belongs to.

Note that you do not need to set this attribute when creating errors in
an error parser.  Flycheck automatically keeps track of the buffer
itself.

@item checker
The syntax checker that reported this error.

@item filename
A string containing the filename the error refers to.

@item line
An integer providing the line the error refers to.

@item column
An integer providing the column the error refers to.

If this attribute is nil, Flycheck will assume the error to refer to the
whole line.

@item message
The human-readable error message as string.

@item level
The error level of the message, as symbol denoting an error level
defined with @code{flycheck-define-error-level}.
@end table

There are two constructors you may use to create errors:

@defun flycheck-error-new attributes
Create a new Flycheck error with the given @var{attributes}.

@var{attributes} are given as keyword arguments, for instance:

@lisp
(flycheck-error-new :line 10 :column 5 :message "Foo" :level 'warning)
@end lisp

@end defun

@defun flycheck-error-new-at line column &optional level message @
  &key checker filename buffer
Create a new Flycheck error at the given position.

@var{line} and @var{column} are the line and column of the new error
respectively.  The optional arguments @var{level} and @var{message} are
the level and the message respectively.

The @var{checker}, @var{filename} and @var{buffer} attributes may be
initialized as keyword arguments only.  Note that these keywords
arguments may only be used @b{together} with the optional arguments,
that is @var{level} and @var{message} must be specified explicitly to
use the keyword arguments.

If omitted, @var{buffer} defaults to the current buffer.
@end defun

@end deftp

The following functions are provided to work with errors:

@defun flycheck-error-with-buffer err &optional forms
Evaluate @var{forms} with the current buffer set to the buffer of
@var{err}.  If this buffer is not live, @var{forms} are not evaluated.
@end defun

@defun flycheck-error-line-region err
Get the error line region as @code{(@var{beg} . @var{end})}.
@end defun

@defun flycheck-error-column-region err
Get the error column region.

If @var{err} has no column, return @code{nil}.  Otherwise return the
region around the error column as cons cell @code{(@var{beg}
. @var{end})}.
@end defun

@defun flycheck-error-sexp-region err
Get the error expression region.

If @var{err} has an error column, return the region of the expression at
this column as cons cell @code{(@var{beg} . @var{end})}.  If @var{err}
has no error column, or if there is no expression at this column, return
@code{nil}
@end defun

@defun flycheck-error-pos err
Get the exact buffer position referred to by @var{err}.

This is the position that error navigation would jump to when navigating
to this error.
@end defun

@defun flycheck-error-format error
Format the @var{error} as a human-readable string.
@end defun

The following functions and variables may be used to analyze the errors
of a syntax check.

@defvar flycheck-current-errors
This buffer-local variable stores the errors of the last syntax check,
sorted by line and column number.
@end defvar

@defun flycheck-count-errors errors
Count the number of errors and warnings in @var{errors}.

Return a cons cell @code{(@var{no-errors} . @var{no-warnings})}.
@end defun

@defun flycheck-has-errors-p errors &optional level
Determine if there are any @var{errors} with the given @var{level}.

If @var{level} is omitted, determine whether @var{errors} is not nil.
Otherwise determine whether there are any errors whose level is equal to
the given @var{level}.
@end defun

@node Error parser API,  , Error API, API
@comment  node-name,  next,  previous,  up
@section Error parser API

@defun flycheck-parse-xml-string xml
Parse an @var{xml} string and return the parsed document tree.
@end defun

@node Contribution, Changes, API, Top
@comment  node-name,  next,  previous,  up
@chapter Contribution

Flycheck needs your help, in all aspects.  Please

@itemize @bullet
@item
report all bugs and issues you can find,
@item
tell us your ideas for improvements or new features,
@item
and send us your patches and pull requests!
@end itemize

This chapter helps you in doing so, by giving you guidelines for
contribution.

@menu
* Reporting issues::            How to report issues with Flycheck
* Contributing syntax checkers::  How to contribute your syntax checkers
* Contributing code::           How to contribute code
@end menu

@node Reporting issues, Contributing syntax checkers, Contribution, Contribution
@comment  node-name,  next,  previous,  up
@section Reporting issues

Please report any issues to the
@uref{https://github.com/flycheck/flycheck/issues,Flycheck issue
tracker}.

When doing so, please respect the following guidelines:

@itemize @bullet
@item
Check that the issue has not already been reported.
@item
Check that the issue has not already been fixed in the latest code.
@item
Be clear and precise.  If possible, name functions and command exactly.
@item
Open an issue with a clear title and description in grammatically
correct, complete sentences.  Include the version of Flycheck as shown
by @kbd{M-x flycheck-version}.
@end itemize

We will try to handle each issue appropriately, and adhering to these
guidelines helps us in doing so.


@node Contributing syntax checkers, Contributing code, Reporting issues, Contribution
@comment  node-name,  next,  previous,  up
@section Contributing syntax checkers

When creating a new syntax checker, either create an issue (see
@ref{Reporting issues}) and paste your syntax checker declaration, or
fork the repository, implement the syntax checker in Flycheck itself and
send us a pull request (see @ref{Contributing code}).

Whatever way you choose, please respect the following guidelines:

@itemize @bullet
@item
Provide a link to the website of the syntax checker tool.
@item
Show some example source code that triggered warnings or errors with the
syntax checker tool.
@item
If possible, please add unit tests for your new syntax checker.
@end itemize

@node Contributing code,  , Contributing syntax checkers, Contribution
@comment  node-name,  next,  previous,  up
@section Contributing code

Please contribute patches to Flycheck as pull requests on Github.

When doing so, please respect the following guidelines:

@itemize @bullet
@item
Read how to
@uref{http://gun.io/blog/how-to-github-fork-branch-and-pull-request,
properly contribute to open source projects on Github}.
@item
Use a topic branch to easily amend a pull request later, if necessary.
@item
Write
@uref{http://gun.io/blog/how-to-github-fork-branch-and-pull-request,
good commit messages}.
@item
Use the same coding style and spacing.
@item
Verify your Emacs Lisp code with @code{checkdoc} (@kbd{C-c ? d}).
@item
Add unit tests for your code, if possible.
@item
Open a @uref{https://help.github.com/articles/using-pull-requests,pull
request} that relates to but one subject with a clear title and
description in grammatically correct, complete sentences.  Be sure to
give use cases and rationale for your new feature.
@end itemize

We will try to respect and include each contribution, however we will
not do the following:

@itemize @bullet
@item
Include a feature without good use cases and rationale.
@item
Merge poorly written or incomplete code.
@end itemize

@noindent
You will be asked to improve your pull request in these cases.

@node Changes, Credits, Contribution, Top
@comment  node-name,  next,  previous,  up
@appendix Changes

This appendix provides a comprehensive changelog of all releases:

@menu
* master        :: unreleased
* 0.16          :: Jan 11, 2014
* 0.15          :: Nov 15, 2013
* 0.14.1        :: Aug 15, 2013
* 0.14          :: Aug 15, 2013
* 0.13          :: Jun 28, 2013
* 0.12          :: May 18, 2013
* 0.11          :: May 01, 2013
* 0.10          :: Apr 21, 2013
* 0.9           :: Apr 13, 2013
* 0.8           :: Apr 09, 2013
* 0.7.1         :: Feb 23, 2013
* 0.7           :: Feb 14, 2013
* 0.6.1         :: Jan 30, 2013
* 0.6           :: Jan 29, 2013
* 0.5           :: Dec 28, 2012
* 0.4           :: Nov 21, 2012
* 0.3           :: Oct 20, 2012
* 0.2           :: Oct 15, 2012
* 0.1           :: Oct 11, 2012
@end menu

@macro ghissue{number, text}
@gh{flycheck/flycheck/issues/\number\, \text\}
@end macro

@node 0.1, 0.2, Changes, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.1 (Oct 11, 2012)

Initial release as flymake-checkers

@itemize @bullet
@item
New syntax checkers

@itemize @bullet
@item
TeX/LaTeX
@item
Shell scripts
@item
Python
@item
Ruby
@item
Coffeescript
@item
Emacs Lisp
@end itemize

@end itemize


@node 0.2, 0.3, 0.1, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.2 (Oct 15, 2012)

@itemize @bullet
@item
New syntax checkers

@itemize @bullet
@item
PHP
@end itemize

@item
API changes

@itemize @bullet
@item
@ghissue{2, Simplify syntax checker declarations}
@end itemize

@end itemize

@node 0.3, 0.4, 0.2, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.3 (Oct 20, 2012)

@itemize @bullet
@item
@ghissue{4, Replace @code{flymake-mode} with a custom syntax checking
minor mode}
@end itemize

@node 0.4, 0.5, 0.3, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.4 (Nov 21, 2012)

@itemize @bullet
@item
@ghissue{5, Rename the project to Flycheck}
@item
New syntax checkers

@itemize @bullet
@item
@ghissue{9, HAML}
@item
@ghissue{9, CSS}
@item
@ghissue{9, Javascript with @command{jsl}}
@item
@ghissue{16, Javascript with @command{jshint}}
@item
@ghissue{12, JSON}
@item
LaTeX with @command{lacheck}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
@ghissue{10, Fix type error when checking compressed Emacs Lisp}
@end itemize

@end itemize

@node 0.5, 0.6, 0.4, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.5 (Dec 28, 2012)

@itemize @bullet
@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{15, SASS}
@item
@ghissue{21, Perl}
@item
XML
@item
@ghissue{30, Lua}
@end itemize

@item
New features:

@itemize @bullet
@item
@ghissue{25, Support manual buffer-local selection of syntax checker}
@item
@ghissue{28, Add customizable error indicators}
@item
@ghissue{27, Echo error messages at point without 3rd-party libraries
like flymake-cursor}
@end itemize

@item
Improvements:

@itemize @bullet
@item
@ghissue{24, Remember the last automatically selected syntax checker}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
@ghissue{19, Fix syntax checking of buffers without backing files}
@end itemize

@item
API changes:

@itemize @bullet
@item
@ghissue{15, Replace underlying Flymake API with a custom syntax
checking implementation}
@end itemize

@end itemize

@node 0.6, 0.6.1, 0.5, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.6 (Jan 29, 2013)

@itemize @bullet
@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{53, Emacs Lisp with @code{checkdoc-current-buffer}}
@item
@ghissue{72, PHP with PHP CodeSniffer}
@end itemize

@item
Removed syntax checkers:

@itemize @bullet
@item
Javascript with @command{jsl}
@end itemize

@item
New features:

@itemize @bullet
@item
@ghissue{26, Error navigation with @code{next-error} and
@code{previous-error}}
@item
@ghissue{33, Fringe icons instead of error indicators}
@item
@ghissue{59, Menu entry for Flycheck}
@item
@ghissue{35, Customizable error highlighting@comma{} taking the column
number into account}
@item
Configuration files for syntax checkers
@item
Add configuration file support to the syntax checkers
@code{coffee-coffeelint}, @code{html-tidy}, @code{javascript-jshint},
@code{pyton-flake8} and @code{tex-chktex}
@item
@ghissue{58, Allow to compile a buffer with a syntax checker for testing
purposes}
@item
@ghissue{31, Use multiple syntax checkers during a syntax check}
@item
@ghissue{52, Add dedicated help for syntax checkers}
@end itemize

@item
Improvements:

@itemize @bullet
@item
@ghissue{55, Match error patterns in order of declaration}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
@ghissue{24, Inherit highlighting faces from built-in faces}
@item
@ghissue{36, Correct error patterns of the HTML syntax checker}
@item
@ghissue{42, Detect syntax errors in the @code{python-flake8} syntax
checker}
@item
Fix various regressions after introducing unit tests
@item
@ghissue{45, Inhibit syntax checking during package installation}
@item
@ghissue{54, Disable syntax checking in Tramp buffers}
@item
@ghissue{65, Preserve whitespace in error messages}
@end itemize

@item
API changes:

@itemize @bullet
@item
@ghissue{41, Replace syntax checker variables with syntax checker
declarations}
@item
@ghissue{38, Support parsing errors with arbitrary functions instead of
error patterns}
@item
@ghissue{38, Add an error parser for Checkstyle-like XML output}
@end itemize

@end itemize

@node 0.6.1, 0.7, 0.6, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.6.1 (Jan 30, 2013)

@itemize @bullet
@item
Fix package dependencies
@end itemize

@node 0.7, 0.7.1, 0.6.1, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.7 (Feb 14, 2013)

@itemize @bullet
@item
New features:

@itemize @bullet
@item
Navigate to source of syntax checker declarations from syntax checker
help
@item
@ghissue{60, Add online Info manual}
@end itemize

@item
Improvements:

@itemize @bullet
@item
Use pipes instead of TTYs to read output from syntax checkers
@item
@ghissue{80, Defer syntax checks for invisible buffers}
@item
@ghissue{62, Immediately display error messages after error navigation}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
Never select deleted buffers
@item
Do not let the debugger interfere with necessary cleanup actions
@item
@ghissue{78, Do not attempt to parse empty XML trees}
@item
@ghissue{81, Fix infinite recursion on Windows}
@end itemize

@end itemize

@node 0.7.1, 0.8, 0.7, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.7.1 (Feb 23, 2013)

@itemize @bullet
@item
Bug fixes:

@itemize @bullet
@item
@ghissue{87, Do not signal errors from @code{flycheck-mode}}
@item
Correctly fall back to @env{HOME} when searching configuration files
@item
Correctly ascend to parent directory when searching configuration files
@end itemize

@item
API changes:

@itemize @bullet
@item
Rename @code{config} cell to @code{config-file}
@item
Allow to pass the result of @code{config-file} cells as single argument
@item
@ghissue{86, Add support for evaluating Lisp forms in syntax checker
commands}
@end itemize

@end itemize

@node 0.8, 0.9, 0.7.1, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.8 (Apr 9, 2013)

@itemize @bullet
@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{91, Go using @command{gofmt}}
@item
@ghissue{101, Rust using @command{rustc}}
@end itemize

@item
New features:

@itemize @bullet
@item
@ghissue{29, Add a global Flycheck mode}.  @code{(global-flycheck-mode)}
is now the recommended way to enable Flycheck
@item
@ghissue{72, Add support for syntax checker options}
@item
Add option for the coding standard used by the @code{php-phpcs} syntax
checker
@item
Add options for the maximum McCabe complexity and the maximum line
length to @code{python-flake8}
@end itemize

@item
Improvements:

@itemize @bullet
@item
Support McCabe warnings in @code{python-flake8}
@item
Support warnings from @command{flake8} 2
@item
@ghissue{94, Show long error messages in a popup buffer}
@item
@ghissue{96, Show all error messages at point}
@item
@ghissue{98, Add support for naming warings from @command{flake8} 2}
@item
Flycheck mode is not longer enabled for buffers whose names start with a
space
@item
@ghissue{100, Improve highlighting to reduce screen flickering}
@end itemize

@end itemize

@node 0.9, 0.10, 0.8, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.9 (Apr 13, 2013)

@itemize @bullet
@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{103, SCSS using @command{scss}}
@item
RST (ReStructuredText) using Docutils
@item
@ghissue{107, Go using @command{go build} and @command{go test}}
@end itemize

@item
Improvements:

@itemize @bullet
@item
Quit the error message window when navigating away from error locations
@end itemize

@end itemize

@node 0.10, 0.11, 0.9, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.10 (Apr 21, 2013)

@itemize @bullet
@item
Flycheck uses @ref{Top, , cl-lib, cl} now.  This library is built-in as
of GNU Emacs 24.3.  For earlier releases of GNU Emacs 24 an additional
compatibility library will be installed from GNU ELPA.

@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{112, POSIX Shell script using @command{bash}}
@item
@ghissue{113, Ruby using @command{rubocop}}
@item
@ghissue{108, Elixir}
@item
@ghissue{122, Erlang}
@end itemize

@item
Removed syntax checkers:

@itemize @bullet
@item
@ghissue{115, Python using Pyflakes}.  Use the superior Flake8 syntax
checker
@end itemize

@item
New features:

@itemize @bullet
@item
Add @code{flycheck-copy-messages-as-kill}, mapped to @kbd{C-c ! C-w}, to
copy all error messages under point into kill ring
@item
Add @code{flycheck-google-messages}, mapped to @kbd{C-c ! /}, to google
for error messages under point.  Needs the
@uref{https://github.com/Bruce-Connor/emacs-google-this, Google This}
library
@item
Syntax checkers can redirect output to a temporary directory now using
the @code{temporary-directory} argument symbol
@end itemize

@item
Improvements:

@itemize @bullet
@item
Call option filters for @code{nil} values, too
@item
@ghissue{112, Improve error parsing in Bash syntax checker}
@item
Error navigation does not cross restrictions in narrowed buffers anymore
@item
@ghissue{99, Try to preserve the non-directory part of the buffer's file
name when substituting the @code{source} symbol}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
Fix error highlighting and navigation in narrowed buffers
@item
@ghissue{118, Use a hopefully more reliable way to parse output of PHP
CodeSniffer}
@end itemize

@end itemize

@node 0.11, 0.12, 0.10, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.11 (May 01, 2013)

@itemize @bullet
@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{124, Scala}
@end itemize

@item
New features:

@itemize @bullet
@item
Customizable error indication with control of the fringe side, via
@code{flycheck-indication-mode}
@item
@ghissue{128, Customizable automatic syntax checking@comma{} via
@code{flycheck-check-syntax-automatically}}
@item
@ghissue{133, Customizable configuration file search@comma{} via
@code{flycheck-locate-config-file-functions}}
@item
Find configuration files in @uref{https://github.com/bbatsov/projectile,
Projectile} projects
@item
Add @code{flycheck-before-syntax-check-hook} and
@code{flycheck-syntax-check-failed-hook}
@end itemize

@item
Improvements:

@itemize @bullet
@item
@ghissue{123, The @code{ruby} syntax checker now differentiates warnings
from errors}
@item
Faces are now in a separate customization group
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
Add missing customization group for syntax checker options
@end itemize

@end itemize

@node 0.12, 0.13, 0.11, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.12 (May 18, 2013)

@itemize @bullet
@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{136, Ruby using @command{jruby}}
@item
@ghissue{138, Puppet}
@end itemize

@item
New features:

@itemize @bullet
@item
Highlight error expressions by default, with the new @code{sexps}
highlighting mode
@item
@ghissue{140, Automatically check syntax some time after the last change
in the buffer}
@item
Add @code{flycheck-version} to determine the installed Flycheck version
@item
Add @code{flycheck-list-errors}, mapped to @kbd{C-c ! l}, to list all
errors in a separate buffer
@end itemize

@item
Improvements:

@itemize @bullet
@item
Defer syntax checks while a buffer is reverted, to avoid race conditions
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
@ghissue{136, Correctly parse syntax errors from JRuby}
@end itemize

@end itemize

@node 0.13, 0.14, 0.12, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.13 (Jun 28, 2013)

@itemize @bullet
@item
@b{Breaking changes}:

@itemize @bullet
@item
Obsolete @code{flycheck-warning-face} and @code{flycheck-error-face} in
favor @code{flycheck-warning} and @code{flycheck-error} respectively
@item
Obsolete @code{:predicate} forms in favor of @code{:predicate} functions
@item
@code{flycheck-def-config-file-var} does not automatically mark
variables as safe anymore
@end itemize

@item
New features:

@itemize @bullet
@item
Make fringe indicator faces customizable independently with
@code{flycheck-fringe-error} and @code{flycheck-fringe-warning}
@item
Improve the default faces by using underlines instead of foreground
colors, if possible
@item
@ghissue{141, Customizable error processing with
@code{flycheck-process-error-functions}}
@item
@ghissue{144, Make the delay before starting a syntax check customizable
via @code{flycheck-idle-change-delay}}
@item
@ghissue{156, Make display of errors under point customizable via
@code{flycheck-display-errors-function}}
@end itemize

@item
Improvements

@itemize @bullet
@item
Always highlight errors on top of warnings now
@item
@ghissue{141, Do not trigger syntax checks in the middle of commands}
@item
Add the current directory to load path in the @code{emacs-lisp} syntax
checker
@item
Do not longer use the @code{emacs-lisp-checkdoc} syntax checker in
Scratch buffers
@item
@ghissue{149, Do not flush temporary files onto disk}
@item
Syntax checkers may have error patterns and error parser now
@item
Predicate forms are now wrapped into functions and compiled into
functions during byte compilation
@item
Copy each message separately in @code{flycheck-copy-messages-as-kill}
@item
Mark some customizable variables as safe for file variable usage, most
notably @code{flycheck-indication-mode},
@code{flycheck-highlighting-mode} and @code{flycheck-idle-change-delay}.
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
Fix error when searching for a configuration file outside a Projectile
project
@item
Do not start a syntax check before the @code{flycheck-mode-hook} was run
@item
Do not start automatic syntax checks if Flycheck Mode is disabled
@item
@ghissue{143, Defer the initial syntax check until after the current
interactive command}
@item
Correctly clean up information about running processes
@item
@ghissue{150, Fix compatibility with Emacs 24.2 and earlier}
@item
Fix version information on Emacs trunk builds
@end itemize

@end itemize
@node 0.14, 0.14.1, 0.13, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.14 (Aug 15, 2013)

@itemize @bullet
@item
@b{Breaking changes}:

@itemize @bullet
@item
@ghissue{163, Introduce @code{flycheck-define-checker} and obsolete
@code{flycheck-declare-checker}}
@item
Remove the obsolete @code{flycheck-error-face} and
@code{flycheck-warning-face}
@item
@ghissue{176, Do not initialize packages by default in @code{emacs-lisp}
syntax checker for non-configuration files}
@item
@ghissue{179, Change the default @code{flycheck-highlighting-mode} to
@code{symbols}}
@item
@ghissue{184, Drop support for Pylint 0.x in @command{python-pylint}}
@end itemize

@item
New features:

@itemize @bullet
@item
@ghissue{166, List errors at point only with prefix arg to
@code{flycheck-list-errors}}
@item
@ghissue{166, Add new display function
@code{flycheck-display-errors-in-list} to display errors at point in the
error list}
@item
New @code{option-list} argument cell to pass option lists to a syntax
checker
@item
@ghissue{174, New @code{flycheck-emacs-lisp-load-path} option to
customize the @code{load-path} used by the @code{emacs-lisp} syntax
checker}
@item
@ghissue{176, New @code{flycheck-emacs-lisp-initialize-packages} option
to initialize packages in the @code{emacs-lisp} syntax checker}
@item
@ghissue{176, New @code{flycheck-emacs-lisp-package-user-dir} option to
configure the package directory for the @code{emacs-lisp} syntax
checker}
@item
New option filter @code{flycheck-option-comma-separated-list} for
options with comma separated lists as values
@item
@ghissue{179, New highlighting mode @code{symbols} to highlight the
symbol pointed to by an error}
@end itemize

@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{160, LESS}
@item
@ghissue{162, Haskell with @command{ghc}@comma{} @command{hdevtools}
and @command{hlint}}
@item
@ghissue{170, C/C++ with @command{cppcheck}}
@item
@ghissue{172, C/C++ with @command{clang}}
@item
CoffeeScript with @command{coffee}
@item
@ghissue{180, XML with @command{xmllint}}
@item
@ghissue{167, D with @command{dmd}}
@end itemize

@item
Improvements:

@itemize @bullet
@item
@ghissue{157, Support Web Mode in @code{html-tidy} syntax checker}
@item
@ghissue{159, Support Rubocop 0.9 and drop support for older Rubocop
releases}
@item
Include the message ID in error messages from @command{python-pylint}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
Fix warnings about flawed definitions in @code{emacs-lisp} and
@code{emacs-lisp-checkdoc}, caused by faulty formatting of sexps
@item
@ghissue{166, Refresh error lists when pressing @kbd{g}}
@item
@ghissue{175, Do not obscure active minibuffer input when displaying
errors in the echo area}
@item
Fix universal prefix argument for @code{flycheck-next-error} at
@code{C-c ! n}
@item
@ghissue{192, Correctly parse output of @command{coffeelint} 0.5.7}
@item
@ghissue{184, Correctly parse output of @command{pylint} 1.0}
@end itemize

@end itemize

@node 0.14.1, 0.15, 0.14, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.14.1 (Aug 16, 2013)

@itemize @bullet
@item
Bug fixes:

@itemize @bullet
@item
@ghissue{194, Add a missing dependency}
@end itemize

@end itemize

@node 0.15, 0.16, 0.14.1, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.15 (Nov 15, 2013)

@itemize @bullet
@item
Flycheck has a new home at @uref{https://github.com/flycheck/flycheck},
the online manual moved to @uref{http://flycheck.github.io}.

@item
@b{Breaking changes}:

@itemize @bullet
@item
Do not add the current directory to the @code{emacs-lisp} syntax checker
load path
@item
@ghissue{214, @code{flycheck-list-errors} cannot list errors at point
anymore}.  It does not accept a prefix argument anymore, and takes zero
arguments now
@item
@ghissue{214, @code{flycheck-display-errors-in-list} is gone}.  The
error list automatically highlights the error at point now
@item
Remove obsolete @code{flycheck-declare-checker}
@end itemize

@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{236, YAML}
@item
@ghissue{245, Javascript with @command{gjslint}}
@item
@ghissue{246, Slim}
@item
@ghissue{249, PHP using @command{phpmd}}
@end itemize

@item
New features:

@itemize @bullet
@item
Support IDO or @uref{https://github.com/d11wtq/grizzl, Grizzl} as
completion systems for @code{flycheck-select-checker} at @kbd{C-c ! s}
@item
@ghissue{202, Disable standard error navigation with
@code{flycheck-standard-error-navigation}}
@item
@ghissue{207, Add @code{flycheck-clang-language-standard} to choose the
language standard for C/C++ syntax checking}
@item
@ghissue{207, Add @code{flycheck-clang-definitions} to set additional
definitions for C/C++ syntax checking}
@item
@ghissue{207, Add @code{flycheck-clang-no-rtti} to disable RTTI for
C/C++ syntax checking}
@item
Add new option cell @code{option-flag} for boolean flags in syntax
checker commands
@item
@ghissue{207, Add @code{flycheck-clang-includes} to include additional
files for C/C++ syntax checking}
@item
Add configuration file variable @code{flycheck-pylintrc} for Pylint
@item
@ghissue{214, New faces @code{flycheck-error-list-highlight-at-point}
and @code{flycheck-error-list-highlight} to highlight the errors at
point and at the current line respectively in the error list}
@item
@ghissue{214, The error list now automatically updates to show the
errors of the current buffer}
@item
@ghissue{212, Define new error levels with
@code{flycheck-define-error-level}}
@item
@ghissue{234, Add @code{flycheck-clang-standard-library} to choose the
standard library for C/C++ syntax checking}
@item
@ghissue{243, Customize the delay for displaying errors via
@code{flycheck-display-errors-delay}}
@item
@ghissue{215, Add @code{info} level for informational annotations by
syntax checkers}
@item
@ghissue{259, Add a new symbol @code{temporary-file-name} to pass
temporary file names to syntax checkers}
@end itemize

@item
Improvements:

@itemize @bullet
@item
@ghissue{214, The error list now refreshes automatically after each
syntax check}
@item
@ghissue{214, The errors at point are now automatically highlighted in
the error list}
@item
@code{emacs-lisp-checkdoc} does not longer check @file{.dir-locals.el}
files
@item
@ghissue{222, Do not automatically check syntax in encrypted files}
@item
@ghissue{215, Parse notes from @code{c/c++-clang} into info level
messages}
@item
@ghissue{204, Parse convention warnings from @command{pylint}} to
@ghissue{215, info level}
@item
@ghissue{215, Demote naming warnings from @code{python-flake8} to info
level}
@item
@ghissue{256, Support @code{enh-ruby-mode} in Ruby syntax checkers}
@item
Parse columns from @code{python-pylint} errors
@item
Do not compress temporary files for syntax checks if the original file
was compressed
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
@ghissue{225, Find local includes in the Clang syntax checker}
@item
Do not emit spurious flawed definition warning in the @code{rst} syntax
checker
@item
@ghissue{251, Handle abbreviated file names in @command{luac}
output@comma{} by simply ignoring them}
@item
@ghissue{259, Correctly redirect the output binary of the
@code{go-build} syntax checker}
@item
@ghissue{263, Fix Cppcheck parsing with the built-in Emacs XML parser}
@end itemize

@end itemize

@node 0.16, master, 0.15, Changes
@comment  node-name,  next,  previous,  up
@unnumberedsec 0.16 (Jan 11, 2014)

@itemize @bullet
@item @b{Breaking changes}:

@itemize @bullet
@item
Argument substitution is no longer performed on syntax checker
executables.  The executable must be a string.
@item
@ghissue{275, Split out @code{haskell-hdevtools} into a separate
package}.  See @uref{https://github.com/flycheck/flycheck-hdevtools,
flycheck-hdevtools}
@item
Drop support for coffeelint 0.x
@item
@ghissue{230, The error list is reimplemented on top of Tabulated List
Mode}.  This greatly changes the appearance and behaviour of the error
list.
@end itemize

@item
New syntax checkers:

@itemize @bullet
@item
@ghissue{250, Ruby with @command{ruby-lint}}
@item
@ghissue{270, Handlebars}
@item
@ghissue{253, YAML with @command{yaml-jsyaml}}
@item
@ghissue{255, Chef recipes with @command{foodcritic}}
@item
@ghissue{276, AsciiDoc}
@item
@ghissue{271, CFEngine}
@item
@ghissue{277, Racket}
@item
Texinfo
@item
@ghissue{296, Verilog}
@item
@ghissue{291, Javascript with @command{eslint}}
@item
@ghissue{285, ERuby}
@end itemize

@item
New features:

@itemize @bullet
@item
@ghissue{272, Define variables to override the executables of syntax
checkers}
@item
@ghissue{272, Interactively set the executable of a syntax checker with
@code{flycheck-set-checker-executable}}
@item
@ghissue{269, Disable syntax checkers easily with
@code{flycheck-disabled-checkers}}
@item
@ghissue{268, Add support for the Compass CSS framework in the
@code{sass} and @code{scss} checkers@comma{} with
@code{flycheck-sass-compass} and @code{flycheck-scss-compass}
respectively}
@item
@ghissue{287, Disable style checks in @code{ruby-rubocop} with
@code{flycheck-rubocop-lint-only}}
@item
@ghissue{283, Add support for Microsoft extensions in @code{c/c++-clang}
via @code{flycheck-clang-ms-extensions}}
@item
@ghissue{230, New faces @code{flycheck-error-list-info}@comma{}
@code{flycheck-error-list-warning}@comma{}
@code{flycheck-error-list-error}@comma{}
@code{flycheck-error-list-line-number} and
@code{flycheck-error-list-column-number}}
@item
Add @code{flycheck-ghc-no-user-package-database} to disable the user
package database for @code{haskell-ghc}
@item
Add @code{flycheck-ghc-package-databases} to add additional package
databases to @code{haskell-ghc}
@item
Add @code{flycheck-ghc-search-path} to add additional directories to the
search path of @code{haskell-ghc}
@end itemize

@item
Improvements:

@itemize @bullet
@item
Demote Rubocop convention messages to @code{info} level
@item
@ghissue{282, Stop Flycheck before the buffer is reverted}
@item
Properly resolve local module imports in @code{haskell-ghc}
@end itemize

@item
Bug fixes:

@itemize @bullet
@item
@ghissue{280, Make relative imports work with @code{python-pylint}}
@item
Fix parsing of errors in @code{scss} and @code{sass}
@end itemize

@end itemize

@node master, , 0.16, Changes
@comment  node-name, next,  previous,  up
@unnumberedsec master (unreleased)

@itemize @bullet
@item @b{Breaking changes}:

@itemize @bullet
@item
The default @code{flycheck-completion-system} was changes to nil,
i.e. the built-in @code{completing-read}, for compliance with Emacs'
defaults.  To restore the previous behaviour, add the following to your
@file{init.el}:

@lisp
(eval-after-load 'flycheck '(setq flycheck-completion-system 'ido))
@end lisp

@end itemize

@item
New syntax checkers:

@itemize @bullet
@item
RST (ReStructuredText) using Sphinx
@end itemize

@item
New features:

@itemize @bullet
@item
@ghissue{266, Extend syntax checkers with
@code{flycheck-add-next-checkers}}
@end itemize

@item
Improvements:

@itemize @bullet
@item
@ghissue{301, Immediately re-check the buffer when it was changed during
a syntax check}
@item
@ghissue{305, Do not defer syntax checker after idle change timeout}
@item
Do not use the generic @code{rst} syntax checker in Sphinx projects
anymore, to avoid false positives by Sphinx-only markup
@end itemize

@item
Bug fixes

@itemize @bullet
@item
@ghissue{298, Fix compatibility with tabbar-mode}
@end itemize

@end itemize

@node Credits, GNU Free Documentation License, Changes, Top
@comment  node-name,  next,  previous,  up
@appendix Credits

Flycheck is written and maintained by @gh{lunaryorn, Sebastian Wiesner},
with contributions from the following people.  Their help and ideas,
their support and patches are greatly appreciated.

@itemize @bullet
@item
@gh{bbatsov, Bozhidar Batsov} provided valuable feedback and
refinements, brought Flycheck to a larger user base by adding it to his
awesome @gh{bbatsov/prelude, Prelude project}, and added a Ruby syntax
checker using @command{rubocop}.

@item
@gh{bbbscarter, Simon Carter} provided valuable feedback about automatic
syntax checking, and took great effort to debug some very subtle issues
in it.

@item
@gh{dhaley, Damon Haley} helped to shape and test the PHP CodeSniffer
checker.

@item
@gh{dholm, David Holm} added C/C++ syntax and style checkers using
@command{clang} and @command{cppcheck} respectively, and contributed a
Verilog syntax checker using @command{verilator}.

@item
@gh{gfrey, Gereon Frey} fixed the @command{go-build} syntax checker and
improved its tests.

@item
@gh{wyuenho, Jimmy Yuen Ho Wong} added the HTML syntax checker and the
jshint Javascript checker, and did valuable testing and bug fixing.

@item
@gh{kwitek,Krzysztof Witkowski} implemented @code{eval} support in
Flycheck commands.

@item
@gh{magnars/,Magnar Sveen} developed the awesome @gh{magnars/dash.el,
dash.el} and @gh{magnars/s.el, s.el} libraries, that drive considerable
parts of Flycheck's internals.

@item
@gh{maio, Marian Schubert} added the Perl syntax checker.

@item
@gh{markhellewell, Mark Hellewell} added the Puppet syntax and style
checkers.

@item
@gh{scrooloose, Martin Grenfell} created the awesome Vim library
@gh{scrooloose/syntastic, syntastic} which inspired this project and
many of its checkers.

@item
@gh{BinaryKhaos, Matthias Dahl} improved the performance of Flycheck's
temp file handling.

@item
@gh{mitchty, Mitch Tishmack} added support for Microsoft extensions to
the Clang syntax checker.

@item
@gh{ptrv, Peter Vasil} contributed syntax checkers for XML, Lua and Go
(using @command{go build} and @command{go test}), added unit tests and
did valuable testing.

@item
@gh{rdallasgray, Robert Dallas Gray} made error display customizable
with @code{flycheck-display-errors-function}.

@item
@gh{robert-zaremba, Robert Zaremba} added Go syntax checker using
@command{gofmt}.

@item
@gh{steckerhalter, steckerhalter} provided the PHP CodeSniffer checker.

@item
@gh{purcell, Steve Purcell} implemented many checkers, contributed
important ideas to the design of the checker API and engaged in
worthwhile discussion to shape this project.

@item
@gh{syl20bnr, Sylvain Benner} added syntax checkers for Elixir and
Erlang, and wrote the cool @gh{flycheck/flycheck-color-mode-line,
flycheck-color-mode-line} extension.

@item
@gh{thisirs, Sylvain Rousseau} added a syntax checker for POSIX shell
script using @command{bash}, and improved error parsing in the Bash
script syntax checker.

@item
@gh{tzz, Ted Zlatanov} added a syntax checker for CFEngine.

@item
@gh{tom-tan, tom tan} added a syntax checker for the D programming
language using @command{dmd}, and wrote the cool
@gh{flycheck/flycheck-d-unittest, flycheck-d-unittest} extension.

@item
@gh{yannick1974, Yannick Roehlly} added support for PEP8 naming errors
to the Flake8 syntax checker.

@item
@gh{yasuyk, Yasuyuki Oka} contributed a lot of syntax checkers for
various languages, including AsciiDoc, Chef recipes, ERuby, Handlebars,
Javascript, PHP, Racket, Ruby, Slim and YAML.

@item
@gh{vderyagin, Victor Deryagin} added the Rust syntax checker.
@end itemize

Of course we also need to thank @ref{Top, ,GNU Flymake, flymake}, the
first, respectable, though somewhat failed attempt at on-the-fly syntax
checking.

@node GNU Free Documentation License, Syntax checkers, Credits, Top
@comment  node-name,  next,  previous,  up
@appendix GNU Free Documentation License

@include fdl-1.3.texi

@node Syntax checkers, Definition Index, GNU Free Documentation License, Top
@comment  node-name,  next,  previous,  up
@appendix Available syntax checkers

The following syntax checkers are included in Flycheck, listed in the
order of their appearance in the default value of
@code{flycheck-checkers}:

@itemize @bullet
@iflyc asciidoc
@iflyc bash
@iflyc c/c++-clang
@iflyc c/c++-cppcheck
@iflyc cfengine
@iflyc chef-foodcritic
@iflyc coffee
@iflyc coffee-coffeelint
@iflyc css-csslint
@iflyc d-dmd
@iflyc elixir
@iflyc emacs-lisp
@iflyc emacs-lisp-checkdoc
@iflyc erlang
@iflyc eruby-erubis
@iflyc go-gofmt
@iflyc go-build
@iflyc go-test
@iflyc haml
@iflyc handlebars
@iflyc haskell-ghc
@iflyc haskell-hlint
@iflyc html-tidy
@iflyc javascript-jshint
@iflyc javascript-eslint
@iflyc javascript-gjslint
@iflyc json-jsonlint
@iflyc less
@iflyc lua
@iflyc perl
@iflyc php
@iflyc php-phpmd
@iflyc php-phpcs
@iflyc puppet-parser
@iflyc puppet-lint
@iflyc python-flake8
@iflyc python-pylint
@iflyc racket
@iflyc rst
@iflyc rst-sphinx
@iflyc ruby-rubocop
@iflyc ruby-rubylint
@iflyc ruby
@iflyc ruby-jruby
@iflyc rust
@iflyc sass
@iflyc scala
@iflyc scss
@iflyc sh-dash
@iflyc sh-bash
@iflyc slim
@iflyc tex-chktex
@iflyc tex-lacheck
@iflyc texinfo
@iflyc verilog-verilator
@iflyc xml-xmlstarlet
@iflyc xml-xmllint
@iflyc yaml-jsyaml
@iflyc yaml-ruby
@iflyc zsh
@end itemize

Use @kbd{M-x flycheck-describe-checker} in this buffer to get help for
the syntax checker under point.

@node Definition Index,  , Syntax checkers, Top
@comment  node-name,  next,  previous,  up
@unnumbered Type, Function and Variable Definition Index

@printindex cp

@bye

@c Local Variables:
@c mode: texinfo
@c TeX-master: t
@c TeX-command-default: "Makeinfo"
@c coding: utf-8
@c End:
