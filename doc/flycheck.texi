\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename flycheck.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.2.1.@*
@end ifinfo
@settitle Flycheck Documentation
@defindex ge
@paragraphindent 0
@exampleindent 4
@finalout
@dircategory Emacs
@direntry
* flycheck: (flycheck.info). On the fly syntax checking (aka "flymake done right").
@end direntry

@definfoenclose strong,`,'
@definfoenclose emph,`,'
@c %**end of header

@copying
@quotation
Flycheck 0.18-cvs, February 03, 2014

Sebastian Wiesner

Copyright @copyright{} 2014, Sebastian Wiesner
@end quotation

@end copying

@titlepage
@title Flycheck Documentation
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@definfoenclose strong,*,*
@definfoenclose emph,_,_

@c %** end of user preamble

@ifnottex
@node Top
@top Flycheck Documentation
@insertcopying
@end ifnottex

@c %**start of body
@anchor{manual/index doc}@anchor{0}
This manual is for Flycheck, the on-the-fly syntax checker for GNU Emacs.

@quotation

Permission is granted to copy, distribute and/or modify this manual under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the
license is included in the section @ref{1,,GNU Free Documentation License}.

Alternatively, you may copy, distribute and/or modify this manual under the
terms of the Creative Commons Attribution-ShareAlike 4.0 International
Public License.  A copy of the license can be obtained at
@indicateurl{https://creativecommons.org/licenses/by-sa/4.0/legalcode}.
@end quotation

@menu
* Introduction:: 
* Usage:: 
* Extending Flycheck:: 
* Flycheck API:: 
* Contribution guidelines:: 
* Credits:: 
* Changes:: 
* GNU Free Documentation License:: 
* Supported languages:: 
* Glossary:: 
* Index:: 

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Features:: 
* 3rd party extensions:: 
* Installation:: 

Usage

* Flycheck Mode:: 
* Syntax checking:: 
* Syntax checker selection:: 
* Syntax checker configuration:: 
* Error reporting:: 
* Error navigation:: 
* Mode line:: 

Syntax checker configuration

* Syntax checker executables:: 
* Syntax checker options:: 
* Syntax checker configuration files:: 

Extending Flycheck

* Defining new syntax checkers:: 
* Registering new syntax checkers:: 
* Error levels:: 
* Error parsers:: 
* Option filters:: 
* Extending syntax checkers:: 
* Examples:: 

Examples

* Basic syntax checkers:: 
* Syntax checkers with predicates:: 
* Configuration files for syntax checkers:: 
* Chaining syntax checkers:: 

Flycheck API

* Error API:: 
* Error parser API:: 

Contribution guidelines

* Reporting issues:: 
* Contributing code:: 

Contributing code

* General:: 
* Code style:: 
* Commit messages:: 
* Contributing syntax checkers:: 
* Pull requests:: 

Changes

* master (in development): master in development. 
* 0.17 (Feb 1@comma{} 2014): 0 17 Feb 1 2014. 
* 0.16 (Jan 11@comma{} 2014): 0 16 Jan 11 2014. 
* 0.15 (Nov 15@comma{} 2013): 0 15 Nov 15 2013. 
* 0.14.1 (Aug 16@comma{} 2013): 0 14 1 Aug 16 2013. 
* 0.14 (Aug 15@comma{} 2013): 0 14 Aug 15 2013. 
* 0.13 (Jun 28@comma{} 2013): 0 13 Jun 28 2013. 
* 0.12 (May 18@comma{} 2013): 0 12 May 18 2013. 
* 0.11 (May 01@comma{} 2013): 0 11 May 01 2013. 
* 0.10 (Apr 21@comma{} 2013): 0 10 Apr 21 2013. 
* 0.9 (Apr 13@comma{} 2013): 0 9 Apr 13 2013. 
* 0.8 (Apr 9@comma{} 2013): 0 8 Apr 9 2013. 
* 0.7.1 (Feb 23@comma{} 2013): 0 7 1 Feb 23 2013. 
* 0.7 (Feb 14@comma{} 2013): 0 7 Feb 14 2013. 
* 0.6.1 (Jan 30@comma{} 2013): 0 6 1 Jan 30 2013. 
* 0.6 (Jan 29@comma{} 2013): 0 6 Jan 29 2013. 
* 0.5 (Dec 28@comma{} 2012): 0 5 Dec 28 2012. 
* 0.4 (Nov 21@comma{} 2012): 0 4 Nov 21 2012. 
* 0.3 (Nov 21@comma{} 2012): 0 3 Nov 21 2012. 
* 0.2 (Oct 25@comma{} 2012): 0 2 Oct 25 2012. 
* 0.1 (Oct 11@comma{} 2012): 0 1 Oct 11 2012. 

Supported languages

* AsciiDoc:: 
* Bash:: 
* C/C++:: 
* CFEngine:: 
* Chef:: 
* Coffeescript:: 
* CSS:: 
* D:: 
* Elixir:: 
* Emacs Lisp:: 
* Erlang:: 
* ERuby:: 
* Go:: 
* Haml:: 
* Handlebars:: 
* Haskell:: 
* HTML:: 
* Javascript:: 
* JSON:: 
* LESS:: 
* Lua:: 
* Make:: 
* Perl:: 
* PHP:: 
* Puppet:: 
* Python:: 
* Racket:: 
* ReStructuredText:: 
* Ruby:: 
* Rust:: 
* Sass:: 
* Scala:: 
* Scss:: 
* Shell (POSIX): Shell POSIX. 
* Slim:: 
* TeX/LaTeX:: 
* Texinfo:: 
* Verilog:: 
* XML:: 
* YAML:: 
* Zsh:: 

@end detailmenu
@end menu

@node Introduction,Usage,Top,Top
@anchor{manual/introduction introduction}@anchor{2}@anchor{manual/introduction flycheck-manual}@anchor{3}@anchor{manual/introduction doc}@anchor{4}
@chapter Introduction


Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs 24.

@menu
* Features:: 
* 3rd party extensions:: 
* Installation:: 

@end menu

@node Features,3rd party extensions,,Introduction
@anchor{manual/introduction features}@anchor{5}@anchor{manual/introduction id1}@anchor{6}
@section Features


Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs 24.


@itemize -

@item 
Support for 41 languages with 62 syntax
checkers, see @ref{7,,Supported languages}

@item 
@ref{8,,Fully automatic syntax checking in the background}

@item 
@ref{9,,Nice error indication and highlighting}

@item 
Optional error list popup

@item 
@ref{a,,Many customization options}

@item 
@ref{0,,A comprehensive manual}

@item 
@ref{b,,A dead simple API to create new syntax checkers}

@item 
A “doesn't get in your way” guarantee
@end itemize

@node 3rd party extensions,Installation,Features,Introduction
@anchor{manual/introduction rd-party-extensions}@anchor{c}@anchor{manual/introduction id2}@anchor{d}
@section 3rd party extensions


The following extensions provide additional cool features for Flycheck:


@itemize -

@item 
flycheck-cask@footnote{https://github.com/flycheck/flycheck-cask} makes Flycheck use Cask packages in Cask@footnote{https://github.com/cask/cask} projects.

@item 
flycheck-color-mode-line@footnote{https://github.com/flycheck/flycheck-color-mode-line} colors the mode line according to the Flycheck
status.

@item 
flycheck-d-unittest@footnote{https://github.com/flycheck/flycheck-d-unittest} adds a Flycheck checker to run unit tests for D programs
on the fly.

@item 
flycheck-hdevtools@footnote{https://github.com/flycheck/flycheck-hdevtools} adds a Flycheck syntax checker for Haskell based on
hdevtools@footnote{https://github.com/bitc/hdevtools/}.

@item 
flycheck-haskell@footnote{https://github.com/flycheck/flycheck-haskell} improves Haskell support in Flycheck, by configuring
Flycheck according to the current Cabal project, and using Cabal sandbox
packages.

@item 
flycheck-mercury@footnote{https://github.com/flycheck/flycheck-mercury} adds a Flycheck syntax checker for the Mercury Language@footnote{http://mercurylang.org/}.
@end itemize

@node Installation,,3rd party extensions,Introduction
@anchor{manual/introduction installation}@anchor{e}@anchor{manual/introduction id3}@anchor{f}
@section Installation


Install the ELPA package from MELPA@footnote{http://melpa.milkbox.net} or Marmalade@footnote{http://marmalade-repo.org/} using @code{M-x
package-install RET flycheck}.  The former is the @emph{recommended} repository.

Neither of these repositories is included in GNU Emacs by default.  You need to
enable these repositories explicitly.  For instance, to add the MELPA
repository, add the following code to @code{init.el}:

@example
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)
@end example

If you use Cask@footnote{https://github.com/cask/cask}, add the following to your @code{Cask} file:

@example
(source gnu)
(source melpa)

(depends-on "flycheck")
@end example

Flycheck supports Emacs 24.  It is tested with Emacs 24.3, and Emacs snapshot
builds.  It should work with GNU Emacs 24.1 and 24.2 as well, but it is not
tested against these versions.  If it does not work with these versions, please
report an issue.

Flycheck does not support Windows, but tries to be compatible with it.  You may
try to use Flycheck on Windows.  It should mostly work, but expect problems and
issues.  Pull requests which improve Windows compatibility are welcome.

Flycheck also does not support GNU Emacs 23 and other flavors of Emacs
(e.g. XEmacs, Aquamacs, etc.).  Don't try, it will @emph{not} work.

Most checkers depend on external tools to perform the actual syntax checking.
Use @ref{10,,flycheck-describe-checker} to get help about a syntax checker and
its dependencies.

@node Usage,Extending Flycheck,Introduction,Top
@anchor{manual/usage usage}@anchor{11}@anchor{manual/usage marmalade}@anchor{12}@anchor{manual/usage doc}@anchor{13}
@chapter Usage


@menu
* Flycheck Mode:: 
* Syntax checking:: 
* Syntax checker selection:: 
* Syntax checker configuration:: 
* Error reporting:: 
* Error navigation:: 
* Mode line:: 

@end menu

@node Flycheck Mode,Syntax checking,,Usage
@anchor{manual/usage flycheck-mode}@anchor{14}@anchor{manual/usage id1}@anchor{15}
@section Flycheck Mode


Syntax checking is done in the Flycheck minor mode:

@geindex flycheck-mode; Emacs Lisp command
@anchor{manual/usage el functions flycheck-mode}@anchor{16}
@deffn {Command} M@w{-}x flycheck@w{-}mode

Toggle Flycheck Mode for the current buffer.
@end deffn

@geindex flycheck-mode; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-mode}@anchor{17}
@deffn {User Option} flycheck@w{-}mode

Whether Flycheck Mode is enabled in the current buffer.
@end deffn

@geindex global-flycheck-mode; Emacs Lisp command
@anchor{manual/usage el functions global-flycheck-mode}@anchor{18}
@deffn {Command} M@w{-}x global@w{-}flycheck@w{-}mode

Toggle Flycheck Mode for @strong{all} live buffers, and for new buffers.

With Global Flycheck Mode, Flycheck Mode is automatically enabled in all
buffers, for which a @ref{19,,suitable syntax checker} exists and is enabled.

@cartouche
@quotation Note 
Flycheck Mode will @strong{not} be enabled in buffers for remote or encrypted
files.  The former is flaky and might be very slow, and the latter might
leak confidential data to temporary directories.

You can still explicitly enable Flycheck Mode in such buffers with
@ref{16,,flycheck-mode}.  This is @strong{not} recommended though.
@end quotation
@end cartouche
@end deffn

@geindex global-flycheck-mode; Emacs Lisp user option
@anchor{manual/usage el variables global-flycheck-mode}@anchor{1a}
@deffn {User Option} global@w{-}flycheck@w{-}mode

Whether Flycheck Mode is enabled globally.
@end deffn

If you like Flycheck Mode, you may want to enable it permanently, either by
customizing @ref{1a,,global-flycheck-mode}, or by adding the following code to
your @code{init.el}:

@example
(add-hook 'after-init-hook #'global-flycheck-mode)
@end example

@node Syntax checking,Syntax checker selection,Flycheck Mode,Usage
@anchor{manual/usage id2}@anchor{1b}@anchor{manual/usage syntax-checking}@anchor{8}
@section Syntax checking


By default, @ref{14,,Flycheck Mode} checks syntax automatically when


@itemize -

@item 
the mode is enabled,

@item 
the file is saved,

@item 
new lines are inserted,

@item 
or some short time after the last change to the buffer.
@end itemize

However, you can customize automatic syntax checking with
@ref{1c,,flycheck-check-syntax-automatically}

@geindex flycheck-check-syntax-automatically; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-check-syntax-automatically}@anchor{1c}
@deffn {User Option} flycheck@w{-}check@w{-}syntax@w{-}automatically

When Flycheck should check syntax automatically.

This variable is list of events that may trigger syntax checks.  The
following events are known:


@table @asis

@item @code{mode-enabled}

Check syntax immediately when @code{flycheck-mode} is enabled.

@item @code{save}

Check syntax immediately after the buffer was saved.

@item @code{new-line}

Check syntax immediately after a new line was inserted into the buffer.

@item @code{idle-change}

Check syntax a short time after the last change to the buffer.
@end table

An syntax check is only conducted for events that are contained in this list.
For instance, the following setting will cause Flycheck to @emph{only} check if
the mode is enabled or the buffer was saved, but @emph{never} after changes to the
buffer contents:

@example
(setq flycheck-check-syntax-automatically '(mode-enabled save))
@end example

If the list is empty syntax is never checked automatically.  In this case,
use @ref{1d,,flycheck-buffer} to check syntax manually.
@end deffn

@geindex flycheck-idle-change-delay; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-idle-change-delay}@anchor{1e}
@deffn {User Option} flycheck@w{-}idle@w{-}change@w{-}delay

How many seconds to wait before starting a syntax check.

After the buffer was changed, Flycheck waits as many seconds as the value of
this variable before starting a syntax check.  If the buffer is changed
during this time, Flycheck starts to wait again.

This variable has no effect, if @code{idle-change} is not contained in
@ref{1c,,flycheck-check-syntax-automatically}.
@end deffn

Regardless of automatic syntax checking you can also check the buffer
manually:

@geindex flycheck-buffer; Emacs Lisp command

@deffn {Command} C@w{-}c ! c
@anchor{manual/usage el functions flycheck-buffer}@anchor{1d}
@deffnx {Command} M@w{-}x flycheck@w{-}buffer

Start a syntax check in the current buffer.
@end deffn

Each syntax check conducts the following steps:


@enumerate 

@item 
Run hooks in @ref{1f,,flycheck-before-syntax-check-hook}

@item 
Clear error information from previous syntax checks.

@item 
Select a @ref{19,,suitable syntax checker}.  See
@ref{20,,Syntax checker selection}, for more information on how syntax checkers
are selected.

@item 
Copy the contents of the buffer to be checked to a temporary file.

@item 
Run the syntax checker.

@item 
Parse the output of the tool, and report all errors and warnings.  See
@ref{9,,Error reporting}, for more information.

@item 
If the buffer can be checked with another syntax checker, continue from step
4, but with the next syntax checker.  This is called “chaining” of syntax
checkers.

@item 
Run hooks in @ref{21,,flycheck-after-syntax-check-hook}.
@end enumerate

@geindex flycheck-after-syntax-check-hook; Emacs Lisp hook
@anchor{manual/usage el variables flycheck-after-syntax-check-hook}@anchor{21}
@deffn {Hook} flycheck@w{-}after@w{-}syntax@w{-}check@w{-}hook

Functions to run after each syntax check.

This hook is run after a syntax check was finished.

At this point, @strong{all} chained checkers were run, and all errors were parsed,
highlighted and reported.  See @ref{9,,Error reporting}, for more information
about error reporting.  The variable @ref{22,,flycheck-current-errors}
contains all errors from all syntax checkers run during the syntax check, so
you can use the various error analysis functions.

Note that this hook does @strong{not} run after each individual syntax checker in
the syntax checker chain, but only after the @strong{last checker}.

This variable is a normal hook. See @ref{Hooks,,,elisp}.
@end deffn

@geindex flycheck-before-syntax-check-hook; Emacs Lisp hook
@anchor{manual/usage el variables flycheck-before-syntax-check-hook}@anchor{1f}
@deffn {Hook} flycheck@w{-}before@w{-}syntax@w{-}check@w{-}hook

Functions to run before each syntax check.

This hook is run right before a syntax check starts.

Error information from the previous syntax check is @strong{not} cleared before
this hook runs.

Note that this hook does @strong{not} run before each individual syntax checker in
the syntax checker chain, but only before the @strong{first checker}.

This variable is a normal hook. See @ref{Hooks,,,elisp}.
@end deffn

There is also a hook run whenever a syntax check fails:

@geindex flycheck-syntax-check-failed-hook; Emacs Lisp hook
@anchor{manual/usage el variables flycheck-syntax-check-failed-hook}@anchor{23}
@deffn {Hook} flycheck@w{-}syntax@w{-}check@w{-}failed@w{-}hook

Functions to run if a syntax check failed.

This hook is run whenever an error occurs during Flycheck's internal
processing.  No information about the error is given to this hook.

You should use this hook to conduct additional cleanup actions when Flycheck
failed.

This variable is a normal hook. See @ref{Hooks,,,elisp}.
@end deffn

@node Syntax checker selection,Syntax checker configuration,Syntax checking,Usage
@anchor{manual/usage syntax-checker-selection}@anchor{20}@anchor{manual/usage id3}@anchor{24}
@section Syntax checker selection


By default Flycheck selects a @ref{19,,suitable syntax checker} automatically from
@ref{25,,flycheck-checkers}, with respect to
@ref{26,,flycheck-disabled-checkers}:

@geindex flycheck-checkers; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-checkers}@anchor{25}
@deffn {User Option} flycheck@w{-}checkers

A list of @ref{27,,syntax checker}s available for automatic syntax checker
selection.  An item in this list is a @ref{28,,registered syntax checker}.

You may modify this list, but you should normally not need to.  Instead, it
is intended for 3rd party extensions to tell Flycheck about new syntax
checkers.
@end deffn

@geindex flycheck-disabled-checkers; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-disabled-checkers}@anchor{26}
@deffn {User Option} flycheck@w{-}disabled@w{-}checkers

A list of @ref{27,,syntax checker}s explicitly excluded from automatic
selection.

Change this list to disable syntax checkers which you do not want to use.
You may also use this option as a file or directory local variable to disable
specific checkers in individual files and directories respectively.
@end deffn

A syntax checker in @ref{25,,flycheck-checkers} and @strong{not} in
@ref{26,,flycheck-disabled-checkers} is an @ref{29,,enabled syntax checker}.

Flycheck uses the first enabled and suitable syntax checker for the current
buffer.  See @code{Languages and syntax checkers} for a list of all available syntax
checkers.

If no @ref{19,,suitable syntax checker} is found, the syntax check is @emph{silently}
omitted.  @emph{No} error is signalled.  Only a special indicator in the mode line
informs about the omitted syntax check.  See @code{Mode line} for details.

You can manually select a specific syntax checker for the current buffer, too:

@geindex flycheck-select-checker; Emacs Lisp command

@deffn {Command} C@w{-}c ! s
@anchor{manual/usage el functions flycheck-select-checker}@anchor{2a}
@deffnx {Command} M@w{-}x flycheck@w{-}select@w{-}checker

Select the syntax checker for the current buffer by setting
@ref{2b,,flycheck-checker}, and run a syntax check with the new syntax
checker.

Prompt for a syntax checker and set @ref{2b,,flycheck-checker}.

Any @ref{27,,syntax checker} can be selected with this command, regardless of
whether it is enabled.
@end deffn


@deffn {Command} C@w{-}u C@w{-}c ! s

@deffnx {Command} C@w{-}u M@w{-}x flycheck@w{-}select@w{-}checker

Deselect the current syntax checker, and run a syntax check with an
automatically selected syntax checker.

Set @ref{2b,,flycheck-checker} to @code{nil}.
@end deffn

@geindex flycheck-checker; Emacs Lisp variable
@anchor{manual/usage el variables flycheck-checker}@anchor{2b}
@deffn {Variable} flycheck@w{-}checker

The @ref{27,,syntax checker} to use for the current buffer.

The variable is buffer local, and safe as file local variable for registered
checkers.

If set to @code{nil}, automatically select a suitable syntax checker.

If set to a @ref{27,,syntax checker}, only use this syntax checker.  Automatic
selection as described above is @emph{disabled}.  If the syntax checker not
suitable, signal an error.

You may directly set this variable without
@ref{2a,,flycheck-select-checker}, e.g. via file local variables.  For
instance, you can use the following file local variable within a Python file
to always use @code{pylint} for the file:

@example
# Local Variables:
# flycheck-checker: python-pylint
# End:
@end example

See @ref{Specifying File Variables,,,emacs} for more information about
file variables.
@end deffn

You can change the completion system used by
@ref{2a,,flycheck-select-checker}:

@geindex flycheck-completion-system; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-completion-system}@anchor{2c}
@deffn {User Option} flycheck@w{-}completion@w{-}system

The completion system to use.


@table @asis

@item @code{ido}

Use IDO.

IDO is a built-in alternative completion system, without good flex
matching and a powerful UI.  You may want to install flx-ido@footnote{https://github.com/lewang/flx} to improve
the flex matching in IDO.

@item @code{grizzl}

Use Grizzl@footnote{https://github.com/d11wtq/grizzl}.

Grizzl is an alternative completion system with powerful flex matching,
but a very limited UI.

@item @code{nil}

Use the standard unfancy @code{completing-read}.

@code{completing-read} has a very simple and primitive UI, and does not offer
flex matching.  This is the default setting, though, to match Emacs'
defaults.  With this system, you may want enable @code{icomplete-mode} to
improve the display of completion candidates at least.
@end table
@end deffn

Each syntax checker provides documentation with information about the executable
the syntax checker uses, in which buffers it will be used for syntax checks, and
whether it can be configured.  See @code{Configuration}, for more information about
syntax checker configuration.

@geindex flycheck-describe-checker; Emacs Lisp command

@deffn {Command} C@w{-}c ! ?
@anchor{manual/usage el functions flycheck-describe-checker}@anchor{10}
@deffnx {Command} M@w{-}x flycheck@w{-}describe@w{-}checker

Show the documentation of a syntax checker.
@end deffn

@node Syntax checker configuration,Error reporting,Syntax checker selection,Usage
@anchor{manual/usage syntax-checker-configuration}@anchor{a}@anchor{manual/usage id4}@anchor{2d}
@section Syntax checker configuration


@menu
* Syntax checker executables:: 
* Syntax checker options:: 
* Syntax checker configuration files:: 

@end menu

@node Syntax checker executables,Syntax checker options,,Syntax checker configuration
@anchor{manual/usage syntax-checker-executables}@anchor{2e}@anchor{manual/usage id5}@anchor{2f}
@subsection Syntax checker executables


For each syntax checker, there is a buffer-local, customizable variable
@code{flycheck-@emph{checker}-executable}, where @code{@emph{checker}} is the name of
the syntax checker.

The value of this variable is either nil, or a string.  In the former case,
Flycheck uses the default executable from the syntax checker definition when
executing the syntax checker.  In the latter case, it uses the value of the
variable as executable.

Use these variables to override the executable from the definition per buffer.
For instance, you could use a different Emacs version with the @code{emacs-lisp} or
@code{emacs-lisp-checkdoc}.

You can either set these variables directly in your @code{init.el}, or change
them interactively:

@geindex flycheck-set-checker-executable; Emacs Lisp command

@deffn {Command} C@w{-}c ! e
@anchor{manual/usage el functions flycheck-set-checker-executable}@anchor{30}
@deffnx {Command} M@w{-}x flycheck@w{-}set@w{-}checker@w{-}executable

Set the executable of a syntax checker in the current buffer.

Prompt for a syntax checker and an executable file, and set the
executable variable of the syntax checker.
@end deffn


@deffn {Command} C@w{-}u C@w{-}c ! e

@deffnx {Command} C@w{-}u M@w{-}x flycheck@w{-}set@w{-}checker@w{-}executable

Reset the executable of a syntax checker in the current buffer.

Prompt for a syntax checker and reset its executable to the default.
@end deffn

@node Syntax checker options,Syntax checker configuration files,Syntax checker executables,Syntax checker configuration
@anchor{manual/usage id6}@anchor{31}@anchor{manual/usage syntax-checker-options}@anchor{32}
@subsection Syntax checker options


Some syntax checkers can be configured via options.  The following options are
provided by Flycheck (in Emacs, use @code{C-h v} or @code{M-x describe-variable}
on the variable name for detailed help):

@geindex flycheck-clang-definitions; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-clang-definitions}@anchor{33}
@deffn {User Option} flycheck@w{-}clang@w{-}definitions

Additional preprocessor definitions for @ref{34,,c/c++-clang}.
@end deffn

@geindex flycheck-clang-include-path; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-clang-include-path}@anchor{35}
@deffn {User Option} flycheck@w{-}clang@w{-}include@w{-}path

Include search path for @ref{34,,c/c++-clang}.
@end deffn

@geindex flycheck-clang-includes; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-clang-includes}@anchor{36}
@deffn {User Option} flycheck@w{-}clang@w{-}includes

Additional include files for @ref{34,,c/c++-clang}.
@end deffn

@geindex flycheck-clang-language-standard; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-clang-language-standard}@anchor{37}
@deffn {User Option} flycheck@w{-}clang@w{-}language@w{-}standard

The language standard for @ref{34,,c/c++-clang}.
@end deffn

@geindex flycheck-clang-ms-extensions; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-clang-ms-extensions}@anchor{38}
@deffn {User Option} flycheck@w{-}clang@w{-}ms@w{-}extensions

Whether to enable Microsoft extensions in @ref{34,,c/c++-clang}.
@end deffn

@geindex flycheck-clang-no-rtti; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-clang-no-rtti}@anchor{39}
@deffn {User Option} flycheck@w{-}clang@w{-}no@w{-}rtti

Whether to disable RTTI in @ref{34,,c/c++-clang}.
@end deffn

@geindex flycheck-clang-standard-library; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-clang-standard-library}@anchor{3a}
@deffn {User Option} flycheck@w{-}clang@w{-}standard@w{-}library

The standard library to use for @ref{34,,c/c++-clang}.
@end deffn

@geindex flycheck-clang-warnings; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-clang-warnings}@anchor{3b}
@deffn {User Option} flycheck@w{-}clang@w{-}warnings

Additional warnings to enable in @ref{34,,c/c++-clang}.
@end deffn

@geindex flycheck-cppcheck-checks; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-cppcheck-checks}@anchor{3c}
@deffn {User Option} flycheck@w{-}cppcheck@w{-}checks

Additional checks to use in @ref{3d,,c/c++-cppcheck}.
@end deffn

@geindex flycheck-emacs-lisp-initialize-packages; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-emacs-lisp-initialize-packages}@anchor{3e}
@deffn {User Option} flycheck@w{-}emacs@w{-}lisp@w{-}initialize@w{-}packages

Whether to initialize packages (see @code{package-initialize}) before invoking the
byte compiler in the @ref{3f,,emacs-lisp} syntax checker.

When @code{nil}, never initialize packages.  When @code{auto},
initialize packages only when checking files from the user's Emacs
configuration in @code{user-emacs-directory}.  For any other non-nil
value, always initialize packages.
@end deffn

@geindex flycheck-emacs-lisp-load-path; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-emacs-lisp-load-path}@anchor{40}
@deffn {User Option} flycheck@w{-}emacs@w{-}lisp@w{-}load@w{-}path

The @code{load-path} to use while checking with @ref{3f,,emacs-lisp}.

The directory of the file being checked is always added to
@code{load-path}, regardless of the value of this variable.

Note that changing this variable can lead to wrong results of the
syntax check, e.g. if an unexpected version of a required library
is used.
@end deffn

@geindex flycheck-emacs-lisp-package-user-dir; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-emacs-lisp-package-user-dir}@anchor{41}
@deffn {User Option} flycheck@w{-}emacs@w{-}lisp@w{-}package@w{-}user@w{-}dir

The package directory for the @ref{3f,,emacs-lisp} syntax checker.
@end deffn

@geindex flycheck-eslint-rulesdir; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-eslint-rulesdir}@anchor{42}
@deffn {User Option} flycheck@w{-}eslint@w{-}rulesdir

A directory with custom rules for the @ref{43,,javascript-eslint}
syntax checker.
@end deffn

@geindex flycheck-flake8-maximum-complexity; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-flake8-maximum-complexity}@anchor{44}
@deffn {User Option} flycheck@w{-}flake8@w{-}maximum@w{-}complexity

The maximum McCabe complexity the @ref{45,,python-flake8} syntax
checker allows without reporting a warning.
@end deffn

@geindex flycheck-flake8-maximum-line-length; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-flake8-maximum-line-length}@anchor{46}
@deffn {User Option} flycheck@w{-}flake8@w{-}maximum@w{-}line@w{-}length

The maximum length of a line in characters the @ref{45,,python-flake8}
syntax checker allows without reporting an error.
@end deffn

@geindex flycheck-ghc-no-user-package-database; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-ghc-no-user-package-database}@anchor{47}
@deffn {User Option} flycheck@w{-}ghc@w{-}no@w{-}user@w{-}package@w{-}database

Whether to disable the user package database for @ref{48,,haskell-ghc}.
@end deffn

@geindex flycheck-ghc-package-databases; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-ghc-package-databases}@anchor{49}
@deffn {User Option} flycheck@w{-}ghc@w{-}package@w{-}databases

A list of package database for @ref{48,,haskell-ghc}.
@end deffn

@geindex flycheck-ghc-search-path; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-ghc-search-path}@anchor{4a}
@deffn {User Option} flycheck@w{-}ghc@w{-}search@w{-}path

A list of module directories for the search path of
@ref{48,,haskell-ghc}.
@end deffn

@geindex flycheck-perlcritic-verbosity; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-perlcritic-verbosity}@anchor{4b}
@deffn {User Option} flycheck@w{-}perlcritic@w{-}verbosity

The verbosity of @ref{4c,,perl-perlcritic} as integer.
@end deffn

@geindex flycheck-phpcs-standard; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-phpcs-standard}@anchor{4d}
@deffn {User Option} flycheck@w{-}phpcs@w{-}standard

The coding standard @ref{4e,,php-phpcs} shall use.
@end deffn

@geindex flycheck-phpmd-rulesets; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-phpmd-rulesets}@anchor{4f}
@deffn {User Option} flycheck@w{-}phpmd@w{-}rulesets

The rule sets @ref{50,,php-phpmd} shall use.
@end deffn

@geindex flycheck-rubocop-lint-only; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-rubocop-lint-only}@anchor{51}
@deffn {User Option} flycheck@w{-}rubocop@w{-}lint@w{-}only

Whether to disable style checks for @ref{52,,ruby-rubocop}.
@end deffn

@geindex flycheck-sass-compass; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-sass-compass}@anchor{53}
@deffn {User Option} flycheck@w{-}sass@w{-}compass

Whether to enable the Compass CSS framework for @ref{54,,sass}.
@end deffn

@geindex flycheck-scss-compass; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-scss-compass}@anchor{55}
@deffn {User Option} flycheck@w{-}scss@w{-}compass

Whether to enable the Compass CSS framework for @ref{56,,scss}.
@end deffn

@geindex flycheck-sphinx-warn-on-missing-references; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-sphinx-warn-on-missing-references}@anchor{57}
@deffn {User Option} flycheck@w{-}sphinx@w{-}warn@w{-}on@w{-}missing@w{-}references

Whether to warn about missing references in @ref{58,,rst-sphinx}
@end deffn

@node Syntax checker configuration files,,Syntax checker options,Syntax checker configuration
@anchor{manual/usage id7}@anchor{59}@anchor{manual/usage syntax-checker-configuration-files}@anchor{5a}
@subsection Syntax checker configuration files


Some syntax checkers also read configuration files, denoted by associated
@emph{configuration file variables}:

@geindex flycheck-chktexrc; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-chktexrc}@anchor{5b}
@deffn {User Option} flycheck@w{-}chktexrc

The configuration file for the @ref{5c,,tex-chktex} syntax checker.
@end deffn

@geindex flycheck-coffeelintrc; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-coffeelintrc}@anchor{5d}
@deffn {User Option} flycheck@w{-}coffeelintrc

The configuration file for the @ref{5e,,coffee-coffeelint} syntax
checker.
@end deffn

@geindex flycheck-eslintrc; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-eslintrc}@anchor{5f}
@deffn {User Option} flycheck@w{-}eslintrc

The configuration file for the @ref{43,,javascript-eslint} syntax
checker.
@end deffn

@geindex flycheck-flake8rc; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-flake8rc}@anchor{60}
@deffn {User Option} flycheck@w{-}flake8rc

The configuration file for the @ref{45,,python-flake8} syntax checker.
@end deffn

@geindex flycheck-gjslintrc; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-gjslintrc}@anchor{61}
@deffn {User Option} flycheck@w{-}gjslintrc

The configuration file for the @ref{62,,javascript-gjslint} syntax
checker.
@end deffn

@geindex flycheck-jshintrc; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-jshintrc}@anchor{63}
@deffn {User Option} flycheck@w{-}jshintrc

The configuration file for the @ref{64,,javascript-jshint} syntax
checker.
@end deffn

@geindex flycheck-pylintrc; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-pylintrc}@anchor{65}
@deffn {User Option} flycheck@w{-}pylintrc

The configuration file for the @ref{66,,python-pylint} syntax checker.
@end deffn

@geindex flycheck-rubocoprc; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-rubocoprc}@anchor{67}
@deffn {User Option} flycheck@w{-}rubocoprc

The configuration file for the @ref{52,,ruby-rubocop} syntax checker.
@end deffn

@geindex flycheck-tidyrc; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-tidyrc}@anchor{68}
@deffn {User Option} flycheck@w{-}tidyrc

The configuration file for the @ref{69,,html-tidy} syntax checker.
@end deffn

The value of these variables is either a string or @code{nil}.  In the former case,
locate the configuration file using the functions in
@ref{6a,,flycheck-locate-config-file-functions}:

@geindex flycheck-locate-config-file-functions; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-locate-config-file-functions}@anchor{6a}
@deffn {User Option} flycheck@w{-}locate@w{-}config@w{-}file@w{-}functions

Functions to locate syntax checker configuration files.

Each function in this hook must accept two arguments: The value of the
configuration file variable, and the syntax checker symbol.  It must
return either a string with an absolute path to the configuration file,
or nil, if it cannot locate the configuration file.

The functions in this hook are called in order of appearance, until a
function returns non-nil.  The configuration file returned by that
function is then given to the syntax checker if it exists.
@end deffn

With the default value of this variable, configuration files are located by the
following algorithm:


@enumerate 

@item 
If the configuration file variable contains a path a directory
separator, expand the path against the buffer's default directory and
use the resulting path as configuration file.

@item 
If Projectile@footnote{https://github.com/bbatsov/projectile} is available and the current buffer is part of a project
project, search the configuration file in the root directory of the project.

@item 
If the buffer has a file name, search the buffer's directory and any
ancestors thereof for the configuration file.

@item 
Eventually attempt to locate the configuration file in the user's home
directory.
@end enumerate

If any of these steps succeeds, the subsequent steps are not executed.

If the configuration file is found, pass it to the syntax checker upon
invocation.

If the configuration file is not found, or if the value of the variable is nil,
invoke the syntax checker without a configuration file.

Customize these variables using @code{M-x customize-group RET
flycheck-config-files}.  Use @code{flycheck-describe-checker} to find out whether a
syntax checker has a configuration file.

You may also use these variables as file-local variables.  For instance, the
following checks the Javascript file always with @code{.jshintrc} from the
parent directory:

@example
// Local variables:
// flycheck-jshintrc: "../.jshintrc"
// End:
@end example

@node Error reporting,Error navigation,Syntax checker configuration,Usage
@anchor{manual/usage error-reporting}@anchor{9}@anchor{manual/usage id8}@anchor{6b}
@section Error reporting


Errors and warnings from a syntax checker are


@itemize -

@item 
reported in the mode line or in a popup buffer, depending on the length
of the error messages,

@item 
indicated according to @ref{6c,,flycheck-indication-mode},

@item 
and highlighted in the buffer with the corresponding faces, according to
@ref{6d,,flycheck-highlighting-mode}
@end itemize

@geindex flycheck-error; Emacs Lisp face
@geindex flycheck-warning; Emacs Lisp face
@geindex flycheck-info; Emacs Lisp face
@anchor{manual/usage el faces flycheck-error}@anchor{6e}
@deffn {Face} flycheck@w{-}error
@anchor{manual/usage el faces flycheck-warning}@anchor{6f}
@deffnx {Face} flycheck@w{-}warning
@anchor{manual/usage el faces flycheck-info}@anchor{70}
@deffnx {Face} flycheck@w{-}info

The faces to use to highlight errors, warnings and info messages
respectively.

@cartouche
@quotation Note 
The default faces provided by GNU Emacs are ill-suited to highlight errors
because these are relatively pale and do not specify a background color or
underline.  Hence highlights are easily overlook and even @strong{invisible}
for white space.
@end quotation
@end cartouche

For best error highlighting customize these faces, or choose a color
theme that has reasonable Flycheck faces.  For instance, the Solarized@footnote{https://github.com/bbatsov/solarized-emacs} and
Zenburn@footnote{https://github.com/bbatsov/zenburn-emacs} themes are known to have good Flycheck faces.
@end deffn

@geindex flycheck-highlighting-mode; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-highlighting-mode}@anchor{6d}
@deffn {User Option} flycheck@w{-}highlighting@w{-}mode

This variable determines how to highlight errors:


@table @asis

@item @code{columns}

Highlights the error column.  If the error does not have a column,
highlight the whole line.

@item @code{symbols}

Highlights the symbol at the error column, if there is any, otherwise
behave like @@code@{columns@}.  This is the default.

@item @code{sexps}

Highlights the expression at the error column, if there is any, otherwise
behave like @code{columns}.  Note that this mode can be @strong{very} slow in some
major modes.

@item @code{lines}

Highlights the whole line of the error.

@item @code{nil}

Do not highlight errors at all.  However, errors will still be reported
in the mode line and in error message popups, and indicated according to
@ref{6c,,flycheck-indication-mode}.
@end table
@end deffn

@geindex flycheck-fringe-error; Emacs Lisp face
@geindex flycheck-fringe-warning; Emacs Lisp face
@geindex flycheck-fringe-info; Emacs Lisp face
@anchor{manual/usage el faces flycheck-fringe-error}@anchor{71}
@deffn {Face} flycheck@w{-}fringe@w{-}error
@anchor{manual/usage el faces flycheck-fringe-warning}@anchor{72}
@deffnx {Face} flycheck@w{-}fringe@w{-}warning
@anchor{manual/usage el faces flycheck-fringe-info}@anchor{73}
@deffnx {Face} flycheck@w{-}fringe@w{-}info

The faces of fringe indicators for errors, warnings and info messages
respectively.
@end deffn

@geindex flycheck-indication-mode; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-indication-mode}@anchor{6c}
@deffn {User Option} flycheck@w{-}indication@w{-}mode

This variable determines how to indicate errors:

If set to @code{left-fringe} or @code{right-fringe}, indicate errors and warnings in
the left and right fringe respectively.

If set to @code{nil}, do not indicate errors.  Errors will still be reported in
the mode line and in error message popups, and highlighted according to
@ref{6d,,flycheck-highlighting-mode}.
@end deffn

You can also completely customize error processing by hooking into Flycheck:

@geindex flycheck-process-error-functions; Emacs Lisp hook
@anchor{manual/usage el variables flycheck-process-error-functions}@anchor{74}
@deffn {Hook} flycheck@w{-}process@w{-}error@w{-}functions

Functions to process errors.

Each function in this hook must accept a single argument: The Flycheck error
to process.  See @ref{75,,Error API}, for more information about Flycheck error
objects.

The functions in this hook are called in order of appearance, until a
function returns non-nil.  Thus, a function in this hook may return nil, to
allow for further processing of the error, or t, to indicate that the error
was fully processed and inhibit any further processing.
@end deffn

If you hover a highlighted error with the mouse, a tooltip with the top-most
error message will be shown.

Flycheck also displays errors under point after a short delay:

@geindex flycheck-display-errors-delay; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-display-errors-delay}@anchor{76}
@deffn {User Option} flycheck@w{-}display@w{-}errors@w{-}delay

Delay in seconds before displaying errors at point.

Use floating point numbers to express fractions of seconds.
@end deffn

The error is displayed via @ref{77,,flycheck-display-errors-function}:

@geindex flycheck-display-errors-function; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-display-errors-function}@anchor{77}
@deffn {User Option} flycheck@w{-}display@w{-}errors@w{-}function

A function to display errors under point.

If set to a function, call the function with a list of all errors to
show.  If set to nil, to not display errors at all.

The default function is @ref{78,,flycheck-display-error-messages}.
@end deffn

@geindex flycheck-display-error-messages; Emacs Lisp function
@anchor{manual/usage el functions flycheck-display-error-messages}@anchor{78}
@deffn {Function} flycheck@w{-}display@w{-}error@w{-}messages errors

Show the messages of the given @code{errors} in the echo area, separated by empty
lines.  If the error messages are too long for the echo area, show the error
messages in a popup buffer instead.

The Emacs Lisp function @code{display-message-or-buffer} is used to show the
messages.  Refer to the docstring of this function for details on when popup
buffers are used, and how to customize its behaviour.
@end deffn

You can also work with the error messages at point, and copy them into the kill
ring or search them on Google:

@geindex flycheck-copy-messages-as-kill; Emacs Lisp command

@deffn {Command} C@w{-}c ! C@w{-}w
@anchor{manual/usage el functions flycheck-copy-messages-as-kill}@anchor{79}
@deffnx {Command} M@w{-}x flycheck@w{-}copy@w{-}messages@w{-}as@w{-}kill

Copy all Flycheck error messages at the current point into kill ring.
@end deffn

@geindex flycheck-google-messages; Emacs Lisp command

@deffn {Command} C@w{-}c ! /
@anchor{manual/usage el functions flycheck-google-messages}@anchor{7a}
@deffnx {Command} M@w{-}x flycheck@w{-}google@w{-}messages

Google for all Flycheck error messages at the current point.

If there are more than @ref{7b,,flycheck-google-max-messages} errors at
point, signal an error, to avoid spamming your browser with Google tabs.

Requires the Google This@footnote{https://github.com/Bruce-Connor/emacs-google-this} library, which is available on MELPA@footnote{http://melpa.milkbox.net/}.
@end deffn

@geindex flycheck-google-max-messages; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-google-max-messages}@anchor{7b}
@deffn {User Option} flycheck@w{-}google@w{-}max@w{-}messages

The maximum number of error messages to Google at once.

If set to an integer, @ref{7a,,flycheck-google-messages} will refuse to
search, when there are more error messages than the value of this variable at
point.

If set to @code{nil}, @ref{7a,,flycheck-google-messages} will always search
for @strong{all} messages at point.  This setting is @strong{not} recommended.
@end deffn

You can also show a list with all errors in the current buffer:

@geindex flycheck-list-errors; Emacs Lisp command
@geindex list-flycheck-errors; Emacs Lisp command

@deffn {Command} C@w{-}c ! l
@anchor{manual/usage el functions flycheck-list-errors}@anchor{7c}
@deffnx {Command} M@w{-}x flycheck@w{-}list@w{-}errors
@anchor{manual/usage el functions list-flycheck-errors}@anchor{7d}
@deffnx {Command} M@w{-}x list@w{-}flycheck@w{-}errors

List all errors in the current buffer in a separate buffer.

The error list automatically refreshes after a syntax check, and follows the
current buffer and window, that is, if you switch to another buffer or
window, the error list is updated to show the errors of the new buffer or
window.
@end deffn

When you move the point in the current buffer while the error list is visible,
all errors at point and at the current line are highlighted in the error list
with @ref{7e,,flycheck-error-list-highlight-at-point} and
@ref{7f,,flycheck-error-list-highlight} respectively.

@geindex flycheck-error-list-highlight-at-point; Emacs Lisp face
@anchor{manual/usage el faces flycheck-error-list-highlight-at-point}@anchor{7e}
@deffn {Face} flycheck@w{-}error@w{-}list@w{-}highlight@w{-}at@w{-}point

The face for highlighting the errors at point in the error list.
@end deffn

@geindex flycheck-error-list-highlight; Emacs Lisp face
@anchor{manual/usage el faces flycheck-error-list-highlight}@anchor{7f}
@deffn {Face} flycheck@w{-}error@w{-}list@w{-}highlight

The face for highlighting the errors at the current line in the error list.
@end deffn

Ultimately, you can clear all reported errors at once:

@geindex flycheck-clear; Emacs Lisp command

@deffn {Command} C@w{-}c ! C
@anchor{manual/usage el functions flycheck-clear}@anchor{80}
@deffnx {Command} M@w{-}x flycheck@w{-}clear

Clear all Flycheck errors and warnings in the current buffer.

You should not normally need this command, because Flycheck checks the buffer
periodically anyway.
@end deffn

@node Error navigation,Mode line,Error reporting,Usage
@anchor{manual/usage error-navigation}@anchor{81}@anchor{manual/usage id9}@anchor{82}
@section Error navigation


Flycheck integrates into standard error navigation commands of Emacs.  If @strong{no}
compilation buffer (including those from @code{M-x compile}, @code{M-x grep},
@code{M-x occur}, etc.) is visible, @code{M-g n} (@code{next-error}) and @code{M-g p}
(@code{previous-error}) will navigate between Flycheck warnings and errors in the
current buffer.  See @ref{Compilation Mode,,,emacs} for more information
about these commands.

You can disable this integration by setting
@ref{83,,flycheck-standard-error-navigation} to nil:

@geindex flycheck-standard-error-navigation; Emacs Lisp user option
@anchor{manual/usage el variables flycheck-standard-error-navigation}@anchor{83}
@deffn {User Option} flycheck@w{-}standard@w{-}error@w{-}navigation

If non-nil, enable navigation of Flycheck errors with the standard
@code{next-error} and friends.

Otherwise, do not integrate in standard error navigation, and let these
functions only navigate compilation mode errors.

Changes to this variable only take effect after re-enabling
@ref{14,,Flycheck Mode} with @ref{16,,flycheck-mode} again.
@end deffn

Visible compilation buffers take precedence over Flycheck navigation.  If such a
buffer is visible, @code{M-g n} and @code{M-g p} will ignore Flycheck errors and
warnings, and navigate errors (or generally results) reported by the compilation
buffer instead.

To address this issue, Flycheck provides independent error navigation commands,
which are not affected by @ref{83,,flycheck-standard-error-navigation}:

@geindex flycheck-next-error; Emacs Lisp command

@deffn {Command} C@w{-}c ! n
@anchor{manual/usage el functions flycheck-next-error}@anchor{84}
@deffnx {Command} M@w{-}x flycheck@w{-}next@w{-}error

Jump to the next Flycheck error.

With prefix argument, jump forwards by as many errors as specified by
the prefix argument, e.g. @code{M-3 C-c ! n} will move to the 3rd error
from the current point.
@end deffn

@geindex flycheck-previous-error; Emacs Lisp command

@deffn {Command} C@w{-}c ! p
@anchor{manual/usage el functions flycheck-previous-error}@anchor{85}
@deffnx {Command} M@w{-}x flycheck@w{-}previous@w{-}error

Jump to the previous Flycheck error.

With prefix argument, jump backwards by as many errors as specified by
the prefix argument, e.g. @code{M-3 C-c ! p} will move to the 3rd
previous error from the current point.
@end deffn

@geindex flycheck-first-error; Emacs Lisp command
@anchor{manual/usage el functions flycheck-first-error}@anchor{86}
@deffn {Command} M@w{-}x flycheck@w{-}first@w{-}error

Jump to the first Flycheck error.

With prefix argument, jump forwards to by as many errors as specified by
the prefix argument, e.g. @code{M-3 M-x flycheck-first-error} moves to
the 3rd error from the beginning of the buffer.
@end deffn

@node Mode line,,Error navigation,Usage
@anchor{manual/usage id10}@anchor{87}@anchor{manual/usage mode-line}@anchor{88}
@section Mode line


Flycheck indicates its state in the mode line:


@table @asis

@item @code{FlyC}

There are no errors in the current buffer.

@item @code{FlyC*}

A syntax check is being performed currently.

@item @code{FlyC:3/4}

There are three errors and four warnings in the current buffer.

@item @code{FlyC-}

Automatic syntax checker selection did not find a suitable syntax checker.
See @ref{20,,Syntax checker selection} for more information.

@item @code{FlyC!}

The syntax check failed.  Inspect the @code{*Messages*} buffer for details.

@item @code{FlyC?}

The syntax check had a dubious result.  The definition of the syntax checker
may be flawed.  Inspect the @code{*Messages*} buffer for details.

This indicator should @strong{never} be displayed for built-in syntax checkers.
If it is, please report an issue to the Flycheck developers, as by
@ref{89,,Reporting issues}.
@end table

@node Extending Flycheck,Flycheck API,Usage,Top
@anchor{manual/extending doc}@anchor{8a}@anchor{manual/extending extending-flycheck}@anchor{8b}
@chapter Extending Flycheck


This chapter explains how to add new syntax checkers to Flycheck, and
provides examples for common use cases.

If you define a new syntax checker, @emph{please} contribute it to Flycheck to make
it available to other users, too.  See @ref{8c,,Contributing syntax checkers} for
more information.

@menu
* Defining new syntax checkers:: 
* Registering new syntax checkers:: 
* Error levels:: 
* Error parsers:: 
* Option filters:: 
* Extending syntax checkers:: 
* Examples:: 

@end menu

@node Defining new syntax checkers,Registering new syntax checkers,,Extending Flycheck
@anchor{manual/extending defining-new-syntax-checkers}@anchor{b}@anchor{manual/extending id1}@anchor{8d}
@section Defining new syntax checkers


You define new syntax checkers with @ref{8e,,flycheck-define-checker}:

@geindex flycheck-define-checker; Emacs Lisp macro
@anchor{manual/extending el functions flycheck-define-checker}@anchor{8e}
@deffn {Macro} flycheck@w{-}define@w{-}checker symbol docstring &rest  properties

Define @code{symbol} as new syntax checker with @code{docstring} and @code{properties}.

@code{docstring} provides documentation for the syntax checker.  Use
@ref{10,,flycheck-describe-checker} to view the documentation of a syntax
checker.

The following @code{properties} constitute a syntax checker.
@ref{8f,,;command} is mandatory.  A syntax checker must also have either
@ref{90,,;modes} or @ref{91,,;predicate}, and either
@ref{92,,;error-patterns} or @ref{93,,;error-parser}.
@ref{94,,;next-checkers} is entirely optional.

If a mandatory property is missing, or if any property has an invalid value,
a @emph{compile-time} error is signalled.

Any syntax checker defined with this macro is eligible for manual syntax
checker selection with @ref{2a,,flycheck-select-checker}.  To make the
new syntax checker available for automatic selection, you need to register it
in @ref{25,,flycheck-checkers}.  See @ref{20,,Syntax checker selection} for
more information.

@geindex ;command; Flycheck syntax checker property
@anchor{manual/extending flyc command}@anchor{8f}
@deffn {Flycheck Syntax Checker Property} :command (@emph{executable} [@emph{arg} ...])

@quotation

An unquoted list describing the syntax checker command to execute.

@code{@emph{executable}} must be a string with the executable of this syntax
checker.

A customizable, buffer-local variable @code{flycheck-@emph{symbol}-executable}
is implicitly defined to allow overriding of the executable.  See
@ref{2e,,Syntax checker executables} for details about these variables.  If
this variable is non-nil, Flycheck uses the value of the variable as
executable, otherwise it falls back to @code{@emph{executable}}.  In either
case, the executable is checked with @code{executable-find} before use.

Each @code{@emph{arg}} is an argument to the executable, either as string, or
as one of the following special symbols and forms.

@cartouche
@quotation Note 
These special forms and symbols do @strong{not} apply recursively.  Within
the body of a cell or the result of the @code{eval} form, special forms and
symbols are @strong{not} replaced!
@end quotation
@end cartouche
@end quotation


@table @asis

@item @code{source}

The file to check.

This file is a temporary file with the contents of the buffer to
check, created in the system's temporary directory.

If the buffer to check has a file name, the non-directory component
of the name of the temporary file will be the same as in the buffer's
file name, to support languages which enforce specific rules on the
file name (e.g. the file must be named after the containing feature,
class, etc.).

If the buffer to check has no file name, the name of the temporary
file is random.

This symbol is the @strong{preferred} way to pass the input file to your
syntax checker.

@item @code{source-inplace}

The file to check.

This file is a temporary file with the contents of the buffer to check,
created @strong{in the same directory} as the buffer's file.  The name of the
file is random.

If the buffer has no file name, this symbol is equivalent to @code{source}.

This symbol should be used if and only if the syntax check @strong{needs other
files} from the source directory (e.g. include files in C, or Python
modules).

@item @code{source-original}

The file name of the current buffer, as by @code{buffer-file-name}, or an
empty string, if the buffer has no file name.

This symbol is provided to @strong{additionally} pass the real name of the
file to check to a syntax checker.

It should @strong{never} be used as primary input to the syntax checker,
unless both @code{source} and @code{source-original} are absolutely not
applicable.  In this case, be sure to add a predicate to your syntax
checker that inhibits the syntax check, if the buffer has no file name,
or was modified, for otherwise the syntax check will fail or return
out-dated errors:

@example
:predicate (lambda () (and (buffer-file-name)
                           (not (buffer-modified-p)))
@end example

@item @code{temporary-directory}

The path to an existing temporary directory, which is unique on each
execution of the syntax checker.

Use this symbol if you need to move files created by a syntax checker
out of the way.

See the declaration of the @ref{95,,elixir} syntax checker for an
application of this symbol.

@item @code{temporary-file-name}

The path to a temporary file, which is unique on each execution of the
syntax checker.  The file is @@emph@{not@} created automatically.

Use this symbol if you need to move files created by a syntax checker
out of the way.

See the declaration of the @@code@{go-build@} syntax checker for an
application of this symbol.

@item @code{(config-file @emph{option} @emph{variable})}

A configuration file for this syntax checker.

@code{@emph{option}} is a string containing the option that specifies a
configuration file to the syntax checker tool.

@code{@emph{variable}} is a symbol referring to a variable from which to
obtain the name or path of the configuration file.  See
@ref{5a,,Syntax checker configuration files} for more information about
syntax checker configuration.  You need to define this variable
@emph{explicitly} with @ref{96,,flycheck-def-config-file-var}.

If the configuration file is found, pass the @code{@emph{option}} and the
absolute path to the configuration file to the syntax checker.
Otherwise the cell is simply dropped from the arguments of the syntax
checker.

If @code{@emph{option}} ends with a @code{=} character, @code{@emph{option}} and the
absolute path to the configuration file are concatenated and given as a
single argument to the syntax checker.  Otherwise, @code{@emph{option}} and
the configuration file path are given as two separate arguments.

@item @code{(option @emph{option} @emph{variable} [@emph{filter}])}

The value of a variable.

@code{@emph{option}} is a string containing the option for with to specify
the value.  @code{@emph{filter}} is an optional function to be applied to
the value of @code{@emph{variable}} before use.  See @ref{97,,Option filters}
for a list of built-in option filters.

@code{@emph{variable}} is a symbol referring to a variable whose value to
:use.  See ref:@code{syntax-checker-configuration} for more information about
:syntax checker configuration.  You need to define this variable
:@emph{explicitly} with @ref{98,,flycheck-def-option-var}.

If @code{@emph{variable}} is not @code{nil} after applying @code{@emph{filter}}, pass
@code{@emph{option}} and the value of @code{@emph{variable}} after applying
@code{@emph{filter}}.  Otherwise the cell is simply dropped from the
arguments of the syntax checker.

An @code{@emph{option}} ending with a @code{=} character is treated like in a
@code{config-file} cell.

@item @code{(option-list @emph{option} @emph{variable} [@emph{prepend-fn} [@emph{filter}]])}

Like @code{@emph{option}}, but for lists of options.

@code{@emph{option}} is a string containing the option to specify.

@code{@emph{variable}} is a variable whose value must be a list.

@code{prepend-fn} is a function called with @code{@emph{option}} as first
and the item of the list as second argument.  It should return the
result of prepending @code{@{option@}} to the item, either as list or as
string.  If omitted, it defaults to @code{list}, so by default,
@code{@emph{option}} will be prepended as a separate argument.

@code{@emph{filter}} is an optional function to be applied to each item in
the list before use.  See @ref{97,,Option filters} for a list of built-in
option filters.

For each item in the value of @code{@emph{variable}}, which is not @code{nil}
after applying @code{@emph{filter}}, pass @code{@emph{option}} the the item
after applying @code{@emph{filter}}, as returned by @code{@emph{prepend-fn}}.

Nil items are simply ignored.

@item @code{(option-flag @emph{option} @emph{variable})}

Like @code{option}, but for boolean flags.

@code{@emph{option}} is a string containing the option to
specify. @code{@emph{variable}} is a symbol referring to a variable.

If @code{@emph{variable}} is non-nil, pass @code{@emph{option}} to the syntax
checker.  Otherwise just ignore this argument.

@item @code{(eval @emph{form})}

The result of evaluating @code{form}.

@code{form} is an arbitrary Emacs Lisp form.  It is evaluated literally @emph{each
time} the syntax checker is executed.  Special forms and symbols in
@code{form} are @emph{not} replaced!

@code{form} must evaluate either to a string, a list of strings or nil.  For
any other result, signal an error.

If the result of @code{form} is not nil, pass the result to the syntax
checker @emph{literally}.  Special symbols and forms in the result of @code{form}
are @emph{not} replaced.
@end table
@end deffn

@geindex ;error-patterns; Flycheck syntax checker property
@anchor{manual/extending flyc error-patterns}@anchor{92}
@deffn {Flycheck Syntax Checker Property} :error@w{-}patterns ((@emph{level} @emph{sexp}) ...)

An unquoted list of one or more error patterns to parse the output of the
syntax checker @ref{8f,,;command}.

@code{@emph{level}} is a Flycheck error level, and denotes the severity of
errors matched by the pattern.  This mainly affects the visual
representation of matched errors in buffers.

Flycheck provides the built-in error levels @code{error}, @code{warning} and @code{info}.
You can define your own error levels with
@ref{99,,flycheck-define-error-level}.

The @code{@emph{level}} is followed by one or more @code{rx} @code{@emph{sexp}}
elements.  See the docstring of the function @code{rx} for more information.
In addition to the standard forms of @code{rx}, Flycheck supports the following
additional forms to make specific parts of the error output available to
Flycheck:


@table @asis

@item @code{line}

Matches the line number the error refers to, as a sequence of one or
more digits.

@item @code{column}

Matches a column number the error refers to, as a sequence of one or
more digits.

@item @code{(file-name @emph{sexp} ...)}

Matches the file name the error refers to.  @code{@emph{sexp}} matches the
name of the file.  If no @code{@emph{sexp}} is given, use a default body of
@code{(minimal-match (one-or-more not-newline))}, which is equivalent to
@code{".+?"}.

@item @code{(message @emph{sexp} ...)}

Matches the error message to be shown to the user.  @code{@emph{sexp}}
matches the text of the message.  If no @code{@emph{sexp}} is given, use a
default body of @code{(one-or-more not-newline)}, which is equivalent to
@code{".+"}.
@end table

Each of these items is optional, however error messages without a @code{line}
will be ignored and are not shown in the buffer.

The patterns are applied in the order of declaration to the whole output
of the syntax checker.  Output already matched by a pattern will not be
matched by subsequent patterns.  In other words, the first pattern wins.
@end deffn

@geindex ;error-parser; Flycheck syntax checker property
@anchor{manual/extending flyc error-parser}@anchor{93}
@deffn {Flycheck Syntax Checker Property} :error@w{-}parser @emph{function}

@deffnx {Flycheck Syntax Checker Property} :error@w{-}parser (lambda (output checker buffer) @emph{body} ...)

A function to parse the output of the syntax checker, either as @emph{unquoted}
function symbol or @code{lambda} form.

The function must accept three arguments @code{output}, @code{checker} and @code{buffer},
where @code{output} is the output of the syntax checker as string, @code{checker}
the syntax checker that was used, and @code{buffer} a buffer object
representing the checker buffer.

The function must return a list of @ref{9a,,flycheck-error} objects
parsed from @code{output}.  See @ref{75,,Error API} for information about
@ref{9a,,flycheck-error}.  See @ref{9b,,Error parsers} for a list of
built-in error parsers.

If this property is given, it takes precedence over
@ref{92,,;error-patterns}.  To use an error parser together with
patterns, you must manually call
@ref{9c,,flycheck-parse-with-patterns} in your error parser to apply
the error patterns.  You can then manipulate the
@ref{9a,,flycheck-error} objects returned by this function.
@end deffn

@geindex ;modes; Flycheck syntax checker property
@anchor{manual/extending flyc modes}@anchor{90}
@deffn {Flycheck Syntax Checker Property} :modes @emph{mode}

@deffnx {Flycheck Syntax Checker Property} :modes (@emph{mode} ...)

An unquoted major mode symbol or an unquoted list thereof.

If given, this syntax checker is only used, if the major mode of the
buffer to check is equal (as in @code{eq}) to any given @code{@emph{mode}}.

If @ref{91,,;predicate} is given, it is additionally called in
buffers of any given @code{@emph{mode}}.
@end deffn

@geindex ;predicate; Flycheck syntax checker property
@anchor{manual/extending flyc predicate}@anchor{91}
@deffn {Flycheck Syntax Checker Property} :predicate @emph{function}

@deffnx {Flycheck Syntax Checker Property} :predicate (lambda () @emph{body} ...)

A function to determines whether to use this syntax checker in the current
buffer, either as unquoted function symbol or as @code{lambda} form.  The
syntax checker is only used if this function returns non-nil when called
in the buffer to check.

If @ref{90,,;modes} is given, the function is only called in
matching major modes.  Thus, if @ref{90,,;modes} and
@ref{91,,;predicate} are given, @strong{both} must match for this
syntax checker to be used.
@end deffn

@geindex ;next-checkers; Flycheck syntax checker property
@anchor{manual/extending flyc next-checkers}@anchor{94}
@deffn {Flycheck Syntax Checker Property} :next@w{-}checkers (@emph{item} ...)

An unquoted list defining the syntax checker to run after this checker.

Flycheck tries all items in the order of declaration.  Each @code{@emph{item}}
is either a syntax checker symbol or a cons cell @code{(@emph{predicate}
. @emph{checker})}.

In the former case, the @code{@emph{item}} is used, if the syntax checker is
enabled and suitable for the current buffer.  In the latter case, the
@code{@emph{predicate}} must match additionally.

@code{@emph{predicate}} is either @code{no-errors} or @code{warnings-only}:


@table @asis

@item @code{no-errors}

The syntax @code{@emph{checker}} is only considered if the current syntax
checker reported no errors at all.

@item @code{warnings-only}

The syntax @code{@emph{checker}} is only considered if the current syntax
checker only reported warnings, but no errors.
@end table
@end deffn
@end deffn

@geindex flycheck-def-config-file-var; Emacs Lisp macro
@anchor{manual/extending el functions flycheck-def-config-file-var}@anchor{96}
@deffn {Macro} flycheck@w{-}def@w{-}config@w{-}file@w{-}var symbol checker &optional  filename

Define @code{symbol} as configuration file variable for a syntax @code{checker}, with a
default value of @code{filename}.

@code{symbol} is declared as customizable, buffer-local variable using
@code{defcustom}, to provide a configuration file for the given syntax @code{checker}.
The variable has the customization type @code{string}, and gets a comprehensive
docstring, including a reference to @code{checker}.

@code{filename} is used as initial value for the variable.  If omitted, the
initial value is nil.

Use this macro together with the @code{config-file} form in the
@ref{8f,,;command} of a syntax checker.
@end deffn

@geindex flycheck-def-option-var; Emacs Lisp macro
@anchor{manual/extending el functions flycheck-def-option-var}@anchor{98}
@deffn {Macro} flycheck@w{-}def@w{-}option@w{-}var symbol initial-value checker &optional  custom-args

Define @code{symbol} as option variable for a syntax @code{checker}, with the given
@code{initial-value}.

@code{symbol} is declared as customizable variable, buffer-local variable using
@code{defcustom}, to provide an option for the given syntax @code{checker}.  @code{symbol}
gets a comprehensive docstring, including a reference to @code{checker}.

@code{custom-args} are forwarded to @code{defcustom}.  Use them to declare the
customization type, etc.

Use this macro together with the @code{option}, @code{option-list} and @code{option-flag}
forms in the @ref{8f,,;command} of a syntax checker.
@end deffn

@node Registering new syntax checkers,Error levels,Defining new syntax checkers,Extending Flycheck
@anchor{manual/extending registering-new-syntax-checkers}@anchor{9d}@anchor{manual/extending id2}@anchor{9e}
@section Registering new syntax checkers


After a syntax checker was defined, it should be registered for automatic
selection, by adding it to @ref{25,,flycheck-checkers}, e.g.

@example
(add-to-list 'flycheck-checkers 'my-new-syntax-checker)
@end example

@cartouche
@quotation Note 
@ref{2b,,flycheck-checker} and @ref{2a,,flycheck-select-checker} are
reserved for @strong{user customization}.  Do @strong{not} use them in Flycheck
extensions.

Specifically, please do @strong{not} provide a hook function which selects the syntax
checker explicitly by assigning to @ref{2b,,flycheck-checker} or by calling
@ref{2a,,flycheck-select-checker}, e.g.

@example
(defun enable-my-new-syntax-checker ()
  (setq flycheck-checker 'my-new-syntax-checker)
  (flycheck-buffer))

(add-hook 'my-major-mode-hook #'enable-my-new-syntax-checker)
@end example

This circumvents the entire automatic selection of Flycheck, and prevents the
user from effectively customizing Flycheck.
@end quotation
@end cartouche

@node Error levels,Error parsers,Registering new syntax checkers,Extending Flycheck
@anchor{manual/extending id3}@anchor{9f}@anchor{manual/extending error-levels}@anchor{a0}
@section Error levels


Flycheck provides some built-in error levels:


@table @asis

@item @code{error}

Severe errors which cannot be ignored

@item @code{warning}

Potential errors which can be ignored

@item @code{info}

Informational annotations
@end table

You can define new error levels with @ref{99,,flycheck-define-error-level}:

@geindex flycheck-define-error-level; Emacs Lisp function
@anchor{manual/extending el functions flycheck-define-error-level}@anchor{99}
@deffn {Function} flycheck@w{-}define@w{-}error@w{-}level level &rest  properties

Define a new error @code{level} with @code{properties}.

The following @code{properties} constitute an error level:


@table @asis

@item @code{:overlay-category @emph{category}}

The overlay @code{@emph{category}} for @code{level} as symbol.

An overlay category is a symbol whose properties provide the default
values for overlays of this category.  See @ref{Overlay Properties,,,elisp} for more information about overlay properties and
categories.

A category for an error level overlay should at least define the @code{face}
property, for error highlighting.  Other useful properties for error level
categories are @code{priority} to influence the stacking of multiple error
level overlays, and @code{help-echo} to define a default error messages for
errors without messages.

@item @code{:fringe-face @emph{face}}

A face to use for fringe indicators for @code{level} as symbol.

@item @code{:fringe-bitmap @emph{bitmap}}

A fringe bitmap to use for fringe indicators for @code{level} as symbol.

See @ref{Fringe Bitmaps,,,elisp} for a list of built-in fringe
bitmaps, and instructions on how to define new bitmaps.
@end table
@end deffn

@node Error parsers,Option filters,Error levels,Extending Flycheck
@anchor{manual/extending error-parsers}@anchor{9b}@anchor{manual/extending id4}@anchor{a1}
@section Error parsers


Syntax checkers may use more sophisticated error parsing by using the
@ref{93,,;error-parser} property.  See
@ref{b,,Defining new syntax checkers} for information about syntax checker
definition.

Flycheck provides the following error parsers for use by syntax checkers:

@geindex flycheck-parse-with-patterns; Emacs Lisp function
@anchor{manual/extending el functions flycheck-parse-with-patterns}@anchor{9c}
@deffn {Function} flycheck@w{-}parse@w{-}with@w{-}patterns output checker buffer

Parse @code{output} with the @ref{92,,;error-patterns} of the syntax
@code{checker}.
@end deffn

@geindex flycheck-parse-checkstyle; Emacs Lisp function
@anchor{manual/extending el functions flycheck-parse-checkstyle}@anchor{a2}
@deffn {Function} flycheck@w{-}parse@w{-}checkstyle output checker buffer

Parse @code{output} as Checkstyle@footnote{http://checkstyle.sourceforge.net/} XML.
@end deffn

You may also define your own error parsers.  An error parser is any function
that takes the following three arguments and returns a list of
@ref{9a,,flycheck-error} objects (see @ref{75,,Error API} for more
information):


@table @asis

@item @code{output}

The complete output of the syntax checker as string.

@item @code{checker}

A symbol denoting the executed syntax checker.

@item @code{buffer}

A buffer object referring to the buffer that was syntax-checked.
@end table

Flycheck provides some utility functions to implement your own error parsers.
See @ref{a3,,Error parser API}.

@node Option filters,Extending syntax checkers,Error parsers,Extending Flycheck
@anchor{manual/extending option-filters}@anchor{97}@anchor{manual/extending id5}@anchor{a4}
@section Option filters


Flycheck provides the following built-in option filters for use with the
@code{option}, @code{option-list} and @code{option-flag} forms in the
@ref{8f,,;command} of a syntax checker definition:

@geindex flycheck-option-int; Emacs Lisp function
@anchor{manual/extending el functions flycheck-option-int}@anchor{a5}
@deffn {Function} flycheck@w{-}option@w{-}int value

Like the built-in @code{number-to-string}, but returns @code{nil} when @code{value} is
@code{nil}.
@end deffn

@geindex flycheck-option-comma-separated-list; Emacs Lisp function
@anchor{manual/extending el functions flycheck-option-comma-separated-list}@anchor{a6}
@deffn {Function} flycheck@w{-}option@w{-}comma@w{-}separated@w{-}list value &optional  separator filter

Convert @code{value} into a list separated by @code{separator}.  @code{filter} is an
optional function to apply to each item in @code{value} first.
@end deffn

@node Extending syntax checkers,Examples,Option filters,Extending Flycheck
@anchor{manual/extending id6}@anchor{a7}@anchor{manual/extending extending-syntax-checkers}@anchor{a8}
@section Extending syntax checkers


There are some means to extend defined syntax checkers:

@geindex flycheck-add-next-checker; Emacs Lisp function
@anchor{manual/extending el functions flycheck-add-next-checker}@anchor{a9}
@deffn {Function} flycheck@w{-}add@w{-}next@w{-}checker checker next-checker &optional  append

Add a @code{next-checker} to run after @code{checker}.

@code{checker} is a syntax checker symbol.  @code{next-checker} is either a syntax
checker symbol or a cons cell in the format of a single entry to the
@ref{94,,;next-checkers} property.

@code{next-checker} is prepended before other checkers to run after
@code{checker}, unless @code{append} is non-nil.
@end deffn

@node Examples,,Extending syntax checkers,Extending Flycheck
@anchor{manual/extending examples}@anchor{aa}
@section Examples


@menu
* Basic syntax checkers:: 
* Syntax checkers with predicates:: 
* Configuration files for syntax checkers:: 
* Chaining syntax checkers:: 

@end menu

@node Basic syntax checkers,Syntax checkers with predicates,,Examples
@anchor{manual/extending id7}@anchor{ab}@anchor{manual/extending basic-syntax-checkers}@anchor{ac}
@subsection Basic syntax checkers


As explained in the previous chapter @ref{b,,Defining new syntax checkers}, a
syntax checker is declared with @ref{8e,,flycheck-define-checker}.

We will use this function to define a syntax checker using the PHP CodeSniffer
utility for the PHP programming language:

@example
(flycheck-define-checker php-phpcs
  "A PHP syntax checker using PHP_CodeSniffer.

See URL `http://pear.php.net/package/PHP_CodeSniffer/'."
  :command ("phpcs" "--report=checkstyle" source)
  :error-parser flycheck-parse-checkstyle
  :modes php-mode)

(add-to-list 'flycheck-checkers 'php-phpcs)
@end example

First we specify the @ref{8f,,;command} to execute.  The first element
of the command list is the name of the executable, @code{phpcs} in our case.  This
command is checked for existence with @code{executable-find} before using this syntax
checker.  If the command does not exist, the syntax checker is @emph{not} used.

The executable is following by the arguments, in this case some options and the
symbol @code{source}.  This symbol is replaced with the file to check.  This file is
a temporary file created in the system temporary directory and containing the
contents of the buffer to check.

Next we specify how to parse the output of the syntax checker.  PHP CodeSniffer
provides an option to output errors in an XML format similar to the Java tool
Checkstyle, so we use the built-in @emph{error parser}
@ref{a2,,flycheck-parse-checkstyle} to parse the output.

Then we enable the syntax checker in PHP editing modes.

Ultimately, we make the new syntax checker available for automatic selection by
adding it to @ref{25,,flycheck-checkers}.

If the syntax checker does not provide any sort of structured output format, we
have to parse the error messages from the textual output.  To do so, we can use
@emph{error patterns}, like in the Pylint syntax checker for the Python
programming language:

@example
(flycheck-define-checker python-pylint
  "A Python syntax and style checker using Pylint.

See URL `http://pypi.python.org/pypi/pylint'."
  :command ("epylint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line
            ": Warning (W" (zero-or-more not-newline) "): "
            (message) line-end)
   (error line-start (file-name) ":" line
          ": Error (E" (zero-or-more not-newline) "): "
          (message) line-end)
   (error line-start (file-name) ":" line ": [F] " (message) line-end))
  :modes python-mode)
@end example

Again, there is a @ref{8f,,;command}, however we use the @code{source-inplace}
symbol this time.  This symbol causes the temporary file to be created in the
same directory as the original file, making information from the source code
tree available to the syntax checker.  In case of Pylint, these are the Python
packages from the source code tree.

Next we give the list of @ref{92,,;error-patterns} to parse errors.
These patterns extract the error location and the error message from the output
of @code{epylint}.  An error pattern is a list containing a regular expression with
match groups to extract the error information, and an error level.

Eventually we enable the syntax checker in @code{python-mode}.

@node Syntax checkers with predicates,Configuration files for syntax checkers,Basic syntax checkers,Examples
@anchor{manual/extending syntax-checkers-with-predicates}@anchor{ad}
@subsection Syntax checkers with predicates


In the previous examples the syntax checkers were specific to certain major
modes.  However, this is not always the case.  For instance, GNU Emacs provides
a single mode only for shell scripting in various Shell languages.  A syntax
checker for a specific shell must check whether the edited shell script is
written for the right shell:

@example
(flycheck-define-checker zsh
  "A Zsh syntax checker using the Zsh shell.

See URL `http://www.zsh.org/'."
  :command ("zsh" "-n" "-d" "-f" source)
  :error-patterns
  ((error line-start (file-name) ":" line ": " (message) line-end))
  :modes sh-mode
  :predicate (lambda () (eq sh-shell 'zsh)))
@end example

This syntax checker for the Zsh shell is enabled in @code{sh-mode} as specified by
@ref{90,,;modes}, however it specifies an additional
@ref{91,,;predicate} to determine whether the right shell is in use.
Hence this syntax checker is only used if a Zsh shell scripting is being edited
in @code{sh-mode}, but not if a Bash or POSIX Shell script is being edited.

A syntax checker may even go as far as not having @ref{90,,;modes} at
all.  For instance, there is no special JSON mode, but syntax checking JSON is
still desirable.  Hence a JSON syntax checker may use the
@ref{91,,;predicate} to check the file extension:

@example
(flycheck-define-checker json-jsonlint
  "A JSON syntax and style checker using jsonlint.

See URL `https://github.com/zaach/jsonlint'."
  :command ("jsonlint" "-c" "-q" source)
  :error-patterns
  ((error line-start
          (file-name)
          ": line " line
          ", col " column ", "
          (message) line-end))
  :predicate
  (lambda ()
    (or
     (eq major-mode 'json-mode)
     (and buffer-file-name
          (string= "json" (file-name-extension buffer-file-name))))))
@end example

This syntax checker is now used whenever a file ends with @code{.json}, regardless of
the major mode.

@node Configuration files for syntax checkers,Chaining syntax checkers,Syntax checkers with predicates,Examples
@anchor{manual/extending configuration-files-for-syntax-checkers}@anchor{ae}
@subsection Configuration files for syntax checkers


Some syntax checkers can be configured using configuration files given
by an option.  Flycheck provides built-in support to handle such
configuration files:

@example
(flycheck-def-config-file-var flycheck-jshintrc javascript-jshint ".jshintrc")

(flycheck-define-checker javascript-jshint
  "A JavaScript syntax and style checker using jshint.

See URL `http://www.jshint.com'."
  :command ("jshint" "--checkstyle-reporter"
            (config-file "--config" flycheck-jshintrc) source)
  :error-parser flycheck-parse-checkstyle
  :modes (js-mode js2-mode js3-mode))
@end example

As you can see, we define a syntax checker for Javascript, using the @code{jshint}
utility.  This utility accepts a configuration file via the @code{--config} option.

To use a configuration file with jshint, we first declare the variable
@code{flycheck-jshintrc} that provides the name of the file, as explained in
@ref{5a,,Syntax checker configuration files}.

In the @ref{8f,,;command} we use a @code{config-file} form to pass the
configuration file to the syntax checker.  If the configuration file is found,
its path will be passed to the syntax checker, using the option specified after
the @code{config-file} symbol.  Otherwise the whole element is simply omitted from
the command line.

Some Syntax checkers can also be configured using options passed on the command
line.  Flycheck supports this case, too.  We will use this facility to extend
the PHP CodeSniffer syntax checker from the @ref{ac,,Basic syntax checkers} section
with support for coding standards:

@example
(flycheck-def-option-var flycheck-phpcs-standard nil phpcs
  "The coding standard for PHP CodeSniffer."
  :type '(choice (const :tag "Default standard" nil)
                 (string :tag "Standard name" nil)))
(put 'flycheck-phpcs-standard 'safe-local-variable #'stringp)

(flycheck-declare-checker php-phpcs
  "A PHP syntax checker using PHP_CodeSniffer."
  :command '("phpcs" "--report=checkstyle"
             (option "--standard=" flycheck-phpcs-standard)
             source)
  :error-parser 'flycheck-parse-checkstyle
  :modes 'php-mode)
@end example

The syntax checker is pretty much the same as before, except that a new element
was added to @ref{8f,,;command}.  This element passes the value of the
new option variable @ref{4d,,flycheck-phpcs-standard} to the syntax checker.
This variable is declared with the special macro
@ref{98,,flycheck-def-option-var} at the beginning.

@node Chaining syntax checkers,,Configuration files for syntax checkers,Examples
@anchor{manual/extending chaining-syntax-checkers}@anchor{af}
@subsection Chaining syntax checkers


For many languages, more than a single syntax checker is applicable.  For
instance, Emacs Lisp can be checked for syntactic corrections with the byte code
compiler, and for adherence to the Emacs Lisp documentation style using
Checkdoc.  PHP, too, can be syntax checked with the PHP parser, and verified
against coding styles using PHP CodeSniffer.

To support such cases, syntax checkers can be @emph{chained} using the
@ref{94,,;next-checkers}.  The standard PHP syntax checker uses this to
run PHP CodeSniffer if there are no syntax errors:

@example
(flycheck-define-checker php
  "A PHP syntax checker using the PHP command line interpreter.

See URL `http://php.net/manual/en/features.commandline.php'."
  :command ("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
            "-d" "log_errors=0" source)
  :error-patterns
  ((error line-start (or "Parse" "Fatal" "syntax") " error" (any ":" ",") " "
          (message) " in " (file-name) " on line " line line-end))
  :modes (php-mode php+-mode)
  :next-checkers ((warnings-only . php-phpcs)))
@end example

Now PHP CodeSniffer will check the coding style, whenever a PHP syntax check did
not result in any errors, if PHP CodeSniffer syntax checker is usable @emph{and}
registered.

@node Flycheck API,Contribution guidelines,Extending Flycheck,Top
@anchor{manual/api doc}@anchor{b0}@anchor{manual/api flycheck-api}@anchor{b1}
@chapter Flycheck API


This chapter provides a brief overview over the Flycheck API.

You may use this API to extend Flycheck, e.g. by implementing new error parsers
or more in-depth error analysis.  You will also find this API helpful if you
want to develop Flycheck itself.

The documentation provided in this chapter is intended as brief overview.  For a
definite reference on functions and variables, please consult the excellent
online help system of Emcas, via @code{describe-function} and @code{describe-variable}
respectively.

@menu
* Error API:: 
* Error parser API:: 

@end menu

@node Error API,Error parser API,,Flycheck API
@anchor{manual/api error-api}@anchor{75}@anchor{manual/api id1}@anchor{b2}
@section Error API


Flycheck errors are represented by the CL structure @ref{9a,,flycheck-error}.
See @ref{Structures,,,cl} for more information about CL structures.

@geindex flycheck-error; Emacs Lisp CL struct
@anchor{manual/api el structs flycheck-error}@anchor{9a}
@deffn {CL Struct} flycheck@w{-}error

A Flycheck error with the following slots.  Each of these slots may be @code{nil}.

@geindex flycheck-error-buffer; Emacs Lisp slot
@anchor{manual/api el functions flycheck-error-buffer}@anchor{b3}
@deffn {Slot} buffer

The buffer object referring to the buffer this error belongs to.

@cartouche
@quotation Note 
You do not need to set this attribute when creating errors in an error
parser.  Flycheck automatically keeps track of the buffer itself.
@end quotation
@end cartouche
@end deffn

@geindex flycheck-error-checker; Emacs Lisp slot
@anchor{manual/api el functions flycheck-error-checker}@anchor{b4}
@deffn {Slot} checker

The syntax checker that reported this error.
@end deffn

@geindex flycheck-error-filename; Emacs Lisp slot
@anchor{manual/api el functions flycheck-error-filename}@anchor{b5}
@deffn {Slot} filename

A string containing the filename the error refers to.
@end deffn

@geindex flycheck-error-line; Emacs Lisp slot
@anchor{manual/api el functions flycheck-error-line}@anchor{b6}
@deffn {Slot} line

An integer providing the line the error refers to.
@end deffn

@geindex flycheck-error-column; Emacs Lisp slot
@anchor{manual/api el functions flycheck-error-column}@anchor{b7}
@deffn {Slot} column

An integer providing the column the error refers to.

If this attribute is @code{nil}, Flycheck will assume that the error refers to
the whole line.
@end deffn

@geindex flycheck-error-message; Emacs Lisp slot
@anchor{manual/api el functions flycheck-error-message}@anchor{b8}
@deffn {Slot} message

The human-readable error message as string.
@end deffn

@geindex flycheck-error-level; Emacs Lisp slot
@anchor{manual/api el functions flycheck-error-level}@anchor{b9}
@deffn {Slot} level

The error level of the message, as symbol denoting an error level defined
with @ref{99,,flycheck-define-error-level}.
@end deffn

There are two constructors to create new @ref{9a,,flycheck-error} objects:

@geindex flycheck-error-new-at; Emacs Lisp function
@anchor{manual/api el functions flycheck-error-new-at}@anchor{ba}
@deffn {Function} flycheck@w{-}error@w{-}new@w{-}at line column &optional  level message &key                checker filename buffer

Create a new Flycheck error at the given @code{line} and @code{column}.

@code{line} and @code{column} refer to the @ref{b6,,line} and @ref{b7,,column} of
the new error.  The optional @code{level} and @code{message} arguments fill the
@ref{b9,,level} and @ref{b8,,message} slots respectively.

@code{checker}, @code{filename} and @code{buffer} are keyword arguments, for
@ref{b4,,checker}, @ref{b5,,filename} and @ref{b3,,buffer}
respectively.  @code{buffer} defaults to the current buffer, the other two
default to @code{nil}.

@cartouche
@quotation Warning 
Due to a limitation of Common Lisp functions in Emacs Lisp, you must
specify @strong{all} optional arguments, that is, @strong{both} @code{level} @strong{and}
@code{message}, to pass any keyword arguments.
@end quotation
@end cartouche
@end deffn

@geindex flycheck-error-new; Emacs Lisp function
@anchor{manual/api el functions flycheck-error-new}@anchor{bb}
@deffn {Function} flycheck@w{-}error@w{-}new  &rest attributes

Create a new @ref{9a,,flycheck-error} with the given @code{attributes}.

@code{attributes} is a property list, where each property specifies the value
for the corresponding slot of @ref{9a,,flycheck-error}, for instance:

@example
(flycheck-error-new :line 10 :column 5 :message "Foo" :level 'warning)
@end example
@end deffn

The following functions and macros work on errors:

@geindex flycheck-error-with-buffer; Emacs Lisp macro
@anchor{manual/api el functions flycheck-error-with-buffer}@anchor{bc}
@deffn {Macro} flycheck@w{-}error@w{-}with@w{-}buffer error &rest  forms

Evaluate @code{forms} with the @ref{b3,,buffer} of the given @code{error} as the
current buffer.

If the buffer is not live, @code{forms} are @strong{not} evaluated.
@end deffn

@geindex flycheck-error-line-region; Emacs Lisp function
@anchor{manual/api el functions flycheck-error-line-region}@anchor{bd}
@deffn {Function} flycheck@w{-}error@w{-}line@w{-}region error

Get the region marking the whole @ref{b6,,line} of the given @code{error}, as
a cons cell @code{(@emph{beg} . @emph{end})}.
@end deffn

@geindex flycheck-error-column-region; Emacs Lisp function
@anchor{manual/api el functions flycheck-error-column-region}@anchor{be}
@deffn {Function} flycheck@w{-}error@w{-}column@w{-}region error

Get the region marking the @ref{b7,,column} of the given @code{error}, as cons
cell @code{(@emph{beg} . @emph{end})}.

If the @ref{b7,,column} of @code{error} is @code{nil}, return @code{nil} instead.
@end deffn

@geindex flycheck-error-sexp-region; Emacs Lisp function
@anchor{manual/api el functions flycheck-error-sexp-region}@anchor{bf}
@deffn {Function} flycheck@w{-}error@w{-}sexp@w{-}region error

Get the region marking the expression around the @ref{b7,,column} of the
@code{error}, as cons cell @code{(@emph{beg} . @emph{end})}.

If the @ref{b7,,column} of @code{error} is @code{nil}, or if there is no expression
around this column, return @code{nil} instead.

@cartouche
@quotation Warning 
Flycheck relies on the major mode to parse the expression around the
column.  As such, the major mode must implement support for this feature.

Some major modes, especially from 3rd party packages, do not support
this feature at all, or only very poorly.  Others (for instance
@code{python-mode}) exhibit serious performance drops in some cases.

Use this function with care, and at best only in major modes which are
known to have good support for this feature.
@end quotation
@end cartouche
@end deffn

@geindex flycheck-error-pos; Emacs Lisp function
@anchor{manual/api el functions flycheck-error-pos}@anchor{c0}
@deffn {Function} flycheck@w{-}error@w{-}pos error

Get the exact buffer position of @code{error}.

Essentially this is the position of the @ref{b7,,column} of @code{error}, if
it is not @code{nil}, or the position of the first non-whitespace character on
the @ref{b6,,line} of @code{error} otherwise.  @@end defun
@end deffn

@geindex flycheck-error-format; Emacs Lisp function
@anchor{manual/api el functions flycheck-error-format}@anchor{c1}
@deffn {Function} flycheck@w{-}error@w{-}format error

Format @code{error} as a human-readable string.
@end deffn
@end deffn

The following functions and variables may be used to analyze the errors of a
syntax check.

@geindex flycheck-current-errors; Emacs Lisp variable
@anchor{manual/api el variables flycheck-current-errors}@anchor{22}
@deffn {Variable} flycheck@w{-}current@w{-}errors

This buffer-local variable stores the errors of the last syntax check,
sorted by line and column number.
@end deffn

@geindex flycheck-count-errors; Emacs Lisp function
@anchor{manual/api el functions flycheck-count-errors}@anchor{c2}
@deffn {Function} flycheck@w{-}count@w{-}errors errors

Count the number of errors and warnings in @code{errors}.

Return an alist mapping error level symbols to error counts.  Each item is a
cons cell @code{(@emph{level} . @emph{count})}, where @code{@emph{level}} is the level
symbol and @code{@emph{count}} is the number of errors of of @code{@emph{level}}.
@end deffn

@geindex flycheck-has-errors-p; Emacs Lisp function
@anchor{manual/api el functions flycheck-has-errors-p}@anchor{c3}
@deffn {Function} flycheck@w{-}has@w{-}errors@w{-}p errors &optional  level

Determine if there are any @code{errors} with the given @code{level}.

If @code{level} is omitted, determine whether @code{errors} is not nil.  Otherwise
determine whether there are any errors whose level is equal to the given
@code{level}.
@end deffn

@node Error parser API,,Error API,Flycheck API
@anchor{manual/api error-parser-api}@anchor{a3}@anchor{manual/api id2}@anchor{c4}
@section Error parser API


These functions can be used to implement custom error parsers:

@geindex flycheck-parse-xml-string; Emacs Lisp function
@anchor{manual/api el functions flycheck-parse-xml-string}@anchor{c5}
@deffn {Function} flycheck@w{-}parse@w{-}xml@w{-}string s

Parse a string @code{s} containing XML and return the parsed document tree.
@end deffn

@node Contribution guidelines,Credits,Flycheck API,Top
@anchor{manual/contributing doc}@anchor{c6}@anchor{manual/contributing contribution-guidelines}@anchor{c7}
@chapter Contribution guidelines


If you discovered bugs and issues, have ideas for improvements or new features,
or want to contribute a new syntax checker, please report to the issue tracker@footnote{https://github.com/flycheck/flycheck/issues} the repository and send a pull request, but respect the following
guidelines.

@menu
* Reporting issues:: 
* Contributing code:: 

@end menu

@node Reporting issues,Contributing code,,Contribution guidelines
@anchor{manual/contributing id1}@anchor{c8}@anchor{manual/contributing reporting-issues}@anchor{89}
@section Reporting issues



@itemize -

@item 
Check that the issue has not already been reported.

@item 
Check that the issue has not already been fixed in the latest code.

@item 
Be clear and precise (do not prose, but name functions and commands exactly).

@item 
Include the version of Flycheck as shown by @code{M-x flycheck-version}.

@item 
Open an issue with a clear title and description in grammatically correct,
complete sentences.
@end itemize

@node Contributing code,,Reporting issues,Contribution guidelines
@anchor{manual/contributing id2}@anchor{c9}@anchor{manual/contributing contributing-code}@anchor{ca}
@section Contributing code


Contributions of code, either as pull requests or as patches, are @emph{very}
welcome, but please respect the following guidelines.

@menu
* General:: 
* Code style:: 
* Commit messages:: 
* Contributing syntax checkers:: 
* Pull requests:: 

@end menu

@node General,Code style,,Contributing code
@anchor{manual/contributing general}@anchor{cb}
@subsection General



@itemize -

@item 
Write good and @emph{complete} code.

@item 
Provide use cases and rationale for new features.
@end itemize

@node Code style,Commit messages,General,Contributing code
@anchor{manual/contributing code-style}@anchor{cc}
@subsection Code style



@itemize -

@item 
Generally, use the same coding style and spacing.

@item 
Do not use tabs for indentation.

@item 
Add docstrings for every declaration.

@item 
Make sure your code compiles without warnings with @code{make compile}, and has no
checkdoc issues with @code{M-x checkdoc-buffer} or @code{C-c ? d}.  If you are using
Flycheck, just make sure that your code has no Flycheck warnings.
@end itemize

@node Commit messages,Contributing syntax checkers,Code style,Contributing code
@anchor{manual/contributing commit-messages}@anchor{cd}
@subsection Commit messages


Write commit messages according to Tim Pope's guidelines@footnote{http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html}. In short:


@itemize -

@item 
Start with a capitalized, short (50 characters or less) summary, followed by a
blank line.

@item 
If necessary, add one or more paragraphs with details, wrapped at 72
characters.

@item 
Use present tense and write in the imperative: “Fix bug”, not “fixed bug” or
“fixes bug”.

@item 
Separate paragraphs by blank lines.

@item 
Do @emph{not} use special markup (e.g. Markdown).  Commit messages are plain text.
You may use @code{*emphasis*} or @code{_underline_} though, following conventions
established on mailing lists.
@end itemize

This is a model commit message:

@example
Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the imperative: "Fix bug" and not "Fixed bug"
or "Fixes bug."  This convention matches up with commit messages generated
by commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, followed by a
  single space, with blank lines in between, but conventions vary here

- Use a hanging indent
@end example

Git Commit Mode@footnote{https://github.com/magit/git-modes/} and Magit@footnote{https://github.com/magit/magit/} provide a major mode for Git commit messages,
which helps you to comply to these guidelines.

@node Contributing syntax checkers,Pull requests,Commit messages,Contributing code
@anchor{manual/contributing contributing-syntax-checkers}@anchor{8c}@anchor{manual/contributing id3}@anchor{ce}
@subsection Contributing syntax checkers


For syntax checkers, some special guidelines apply in addition to the above:


@itemize -

@item 
Provide a link to the website of the syntax checker tool in the comments of
your pull request.

@item 
Add a proper docstring to your syntax checker, including this URL.
@end itemize

Additionally, either


@itemize -

@item 
show example code that triggers errors for each of the error patterns of the
syntax checker, or

@item 
add unit tests for your syntax checker.
@end itemize

@node Pull requests,,Contributing syntax checkers,Contributing code
@anchor{manual/contributing id4}@anchor{cf}@anchor{manual/contributing pull-requests}@anchor{d0}
@subsection Pull requests



@itemize -

@item 
Use a @strong{topic branch} to easily amend a pull request later, if necessary.

@item 
Do @strong{not} open new pull requests, when asked to improve your patch.  Instead,
amend your commits with @code{git rebase -i}, and then update the pull request with
@code{git push --force}

@item 
Open a pull request@footnote{https://help.github.com/articles/using-pull-requests} that relates to but one subject with a clear title and
description in grammatically correct, complete sentences.
@end itemize

@node Credits,Changes,Contribution guidelines,Top
@anchor{manual/credits credits}@anchor{d1}@anchor{manual/credits doc}@anchor{d2}@anchor{manual/credits pull-request}@anchor{d3}
@chapter Credits


Flycheck is written and maintained by Sebastian Wiesner@footnote{https://github.com/lunaryorn}, with contributions
from the following people.  Their help and ideas, their support and patches are
greatly appreciated.


@itemize -

@item 
Bozhidar Batsov@footnote{https://github.com/bbatsov} provided valuable feedback and refinements, brought
Flycheck to a larger user base by adding it to his Prelude@footnote{https://github.com/bbatsov/prelude} project, and added
a Ruby syntax checker using @code{rubocop}.

@item 
Damon Haley@footnote{https://github.com/dhaley} helped to shape and test the PHP CodeSniffer checker.

@item 
David Holm@footnote{https://github.com/dholm} added C/C++ syntax and style checkers using @code{clang} and
@code{cppcheck} respectively, and contributed a Verilog syntax checker using
@code{verilator}.

@item 
Gereon Frey@footnote{https://github.com/gfrey} fixed the @code{go-build} syntax checker and improved its tests.

@item 
Jimmy Yuen Ho Wong@footnote{https://github.com/wyuenho} added the HTML syntax checker and the jshint Javascript
checker, and did valuable testing and bug fixing.

@item 
Krzysztof Witkowski@footnote{https://github.com/kwitek} implemented @code{eval} support in Flycheck commands.

@item 
Magnar Sveen@footnote{https://github.com/magnars/dash.el} developed the awesome @code{dash.el} and s.el@footnote{https://github.com/magnars/s.el}
libraries, that drive considerable parts of Flycheck's internals.

@item 
Marian Schubert@footnote{https://github.com/maio} added the Perl syntax checker.

@item 
Mark Hellewell@footnote{https://github.com/markhellewell} added the Puppet syntax and style checkers.

@item 
Martin Grenfell@footnote{https://github.com/scrooloose} created the awesome Vim library syntastic@footnote{https://github.com/scrooloose/syntastic} which inspired
this project and many of its checkers.

@item 
Matthias Dahl@footnote{https://github.com/BinaryKhaos} improved the performance of Flycheck's temp file handling.

@item 
Mitch Tishmack@footnote{https://github.com/mitchty} added support for Microsoft extensions to the Clang syntax
checker.

@item 
Peter Vasil@footnote{https://github.com/ptrv} contributed syntax checkers for XML, Lua and Go (using @code{go
build} and @code{go test}), added unit tests and did valuable testing.

@item 
Robert Dallas Gray@footnote{https://github.com/rdallasgray} made error display customizable with
@code{flycheck-display-errors-function}.

@item 
Robert Zaremba@footnote{https://github.com/robert-zaremba} added Go syntax checker using @code{gofmt}.

@item 
Simon Carter@footnote{https://github.com/bbbscarter} provided valuable feedback about automatic
syntax checking, and took great effort to debug some very subtle issues in it.

@item 
steckerhalter@footnote{https://github.com/steckerhalter} provided the PHP CodeSniffer checker.

@item 
Steve Purcell@footnote{https://github.com/purcell} implemented many checkers, contributed important ideas to the
design of the checker API and engaged in worthwhile discussion to shape this
project.

@item 
Sylvain Benner@footnote{https://github.com/syl20bnr} added syntax checkers for Elixir and Erlang, and wrote the
cool flycheck-color-mode-line@footnote{https://github.com/flycheck/flycheck-color-mode-line} extension.

@item 
Sylvain Rousseau@footnote{https://github.com/thisirs} added a syntax checker for POSIX shell script using
@code{bash}, and improved error parsing in the Bash script syntax checker.

@item 
Ted Zlatanov@footnote{https://github.com/tzz} added a syntax checker for CFEngine.

@item 
tom tan@footnote{https://github.com/tom-tan} added a syntax checker for the D programming language using @code{dmd},
and wrote the cool flycheck-d-unittest@footnote{https://github.com/flycheck/flycheck-d-unittest} extension.

@item 
Yannick Roehlly@footnote{https://github.com/yannick1974} added support for PEP8 naming errors to the Flake8 syntax checker.

@item 
Yasuyuki Oka@footnote{https://github.com/yasuyk} contributed a lot of syntax checkers for various languages,
including AsciiDoc, Chef recipes, ERuby, GNU Make, Handlebars, Javascript,
PHP, Racket, Ruby, Slim and YAML.

@item 
Victor Deryagin@footnote{https://github.com/vderyagin} added the Rust syntax checker.
@end itemize

Of course we also need to thank GNU Flymake@footnote{http://www.gnu.org/software/emacs/manual/html_node/flymake/}, the first, respectable, though
somewhat failed attempt at on-the-fly syntax checking.

@c Local Variables:

@c sort-fold-case: t

@c End:

@node Changes,GNU Free Documentation License,Credits,Top
@anchor{manual/changes changes}@anchor{d4}@anchor{manual/changes doc}@anchor{d5}
@chapter Changes


@menu
* master (in development): master in development. 
* 0.17 (Feb 1@comma{} 2014): 0 17 Feb 1 2014. 
* 0.16 (Jan 11@comma{} 2014): 0 16 Jan 11 2014. 
* 0.15 (Nov 15@comma{} 2013): 0 15 Nov 15 2013. 
* 0.14.1 (Aug 16@comma{} 2013): 0 14 1 Aug 16 2013. 
* 0.14 (Aug 15@comma{} 2013): 0 14 Aug 15 2013. 
* 0.13 (Jun 28@comma{} 2013): 0 13 Jun 28 2013. 
* 0.12 (May 18@comma{} 2013): 0 12 May 18 2013. 
* 0.11 (May 01@comma{} 2013): 0 11 May 01 2013. 
* 0.10 (Apr 21@comma{} 2013): 0 10 Apr 21 2013. 
* 0.9 (Apr 13@comma{} 2013): 0 9 Apr 13 2013. 
* 0.8 (Apr 9@comma{} 2013): 0 8 Apr 9 2013. 
* 0.7.1 (Feb 23@comma{} 2013): 0 7 1 Feb 23 2013. 
* 0.7 (Feb 14@comma{} 2013): 0 7 Feb 14 2013. 
* 0.6.1 (Jan 30@comma{} 2013): 0 6 1 Jan 30 2013. 
* 0.6 (Jan 29@comma{} 2013): 0 6 Jan 29 2013. 
* 0.5 (Dec 28@comma{} 2012): 0 5 Dec 28 2012. 
* 0.4 (Nov 21@comma{} 2012): 0 4 Nov 21 2012. 
* 0.3 (Nov 21@comma{} 2012): 0 3 Nov 21 2012. 
* 0.2 (Oct 25@comma{} 2012): 0 2 Oct 25 2012. 
* 0.1 (Oct 11@comma{} 2012): 0 1 Oct 11 2012. 

@end menu

@node master in development,0 17 Feb 1 2014,,Changes
@anchor{manual/changes master-in-development}@anchor{d6}
@section master (in development)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
#88@footnote{https://github.com/flycheck/flycheck/issues/88}: Perl with Perl Critic

@item 
#322@footnote{https://github.com/flycheck/flycheck/issues/322}: Replace GNU Make with POSIX Make
@end itemize
@end itemize

@node 0 17 Feb 1 2014,0 16 Jan 11 2014,master in development,Changes
@anchor{manual/changes feb-1-2014}@anchor{d7}
@section 0.17 (Feb 1, 2014)



@itemize -

@item 
#274@footnote{https://github.com/flycheck/flycheck/issues/274}: The manual was ported to Sphinx@footnote{http://sphinx-doc.org} and is now located at
@indicateurl{http://flycheck.readthedocs.org}

@item 
@strong{Breaking changes}:


@itemize -

@item 
The default @code{flycheck-completion-system} was changed to nil, i.e. the
built-in @code{completing-read}, for compliance with Emacs' defaults.  To restore
the previous behaviour, add @code{(eval-after-load 'flycheck '(setq
flycheck-completion-system 'ido))} to your @code{init.el}.

@item 
@code{flycheck-count-errors} counts errors of all levels now, and returns an
alist mapping error symbols to error counts.
@end itemize

@item 
New syntax checkers:


@itemize -

@item 
RST (ReStructuredText) using Sphinx

@item 
#321@footnote{https://github.com/flycheck/flycheck/issues/321}: GNU Make
@end itemize

@item 
New features:


@itemize -

@item 
#266@footnote{https://github.com/flycheck/flycheck/issues/266}: Extend syntax checkers with @code{flycheck-add-next-checkers}
@end itemize

@item 
Improvements:


@itemize -

@item 
#301@footnote{https://github.com/flycheck/flycheck/issues/301}: Immediately re-check the buffer when it was changed during a syntax
check

@item 
#305@footnote{https://github.com/flycheck/flycheck/issues/305}: Do not defer syntax checker after idle change timeout

@item 
Do not use the generic @code{rst} syntax checker in Sphinx projects anymore, to
avoid false positives by Sphinx-only markup

@item 
#314@footnote{https://github.com/flycheck/flycheck/issues/314}: Check for more than just syntax errors in @code{rust}

@item 
@code{chef-foodcritic} supports @code{enh-ruby-mode} now
@end itemize

@item 
Bug fixes


@itemize -

@item 
#298@footnote{https://github.com/flycheck/flycheck/issues/298}: Do not attach syntax checker processes to the buffer anymore

@item 
#319@footnote{https://github.com/flycheck/flycheck/issues/319}: Do not visit the file to check in @code{emacs-lisp} and
@code{emacs-lisp-checkdoc} to avoid unintended side effects
@end itemize
@end itemize

@node 0 16 Jan 11 2014,0 15 Nov 15 2013,0 17 Feb 1 2014,Changes
@anchor{manual/changes sphinx}@anchor{d8}@anchor{manual/changes jan-11-2014}@anchor{d9}
@section 0.16 (Jan 11, 2014)



@itemize -

@item 
@strong{Breaking changes}:


@itemize -

@item 
Argument substitution is no longer performed on syntax checker executables.
The executable must be a string.

@item 
#275@footnote{https://github.com/flycheck/flycheck/issues/275}: Split out @code{haskell-hdevtools} into a separate package.  See
flycheck-hdevtools@footnote{https://github.com/flycheck/flycheck-hdevtools}

@item 
Drop support for coffeelint 0.x

@item 
#230@footnote{https://github.com/flycheck/flycheck/issues/230}: The error list is reimplemented on top of Tabulated List Mode.  This
greatly changes the appearance and behaviour of the error list.
@end itemize

@item 
New syntax checkers:


@itemize -

@item 
#250@footnote{https://github.com/flycheck/flycheck/issues/250}: Ruby with @code{ruby-lint}

@item 
#270@footnote{https://github.com/flycheck/flycheck/issues/270}: Handlebars

@item 
#253@footnote{https://github.com/flycheck/flycheck/issues/253}: YAML with @code{yaml-jsyaml}

@item 
#255@footnote{https://github.com/flycheck/flycheck/issues/255}: Chef recipes with @code{foodcritic}

@item 
#276@footnote{https://github.com/flycheck/flycheck/issues/276}: AsciiDoc

@item 
#271@footnote{https://github.com/flycheck/flycheck/issues/271}: CFEngine

@item 
#277@footnote{https://github.com/flycheck/flycheck/issues/277}: Racket

@item 
Texinfo

@item 
#296@footnote{https://github.com/flycheck/flycheck/issues/296}: Verilog

@item 
#291@footnote{https://github.com/flycheck/flycheck/issues/291}: Javascript with @code{eslint}

@item 
#285@footnote{https://github.com/flycheck/flycheck/issues/285}: ERuby
@end itemize

@item 
New features:


@itemize -

@item 
#272@footnote{https://github.com/flycheck/flycheck/issues/272}: Define variables to override the executables of syntax checkers

@item 
#272@footnote{https://github.com/flycheck/flycheck/issues/272}: Interactively set the executable of a syntax checker with
@code{flycheck-set-checker-executable}

@item 
#269@footnote{https://github.com/flycheck/flycheck/issues/269}: Disable syntax checkers easily with @code{flycheck-disabled-checkers}

@item 
#268@footnote{https://github.com/flycheck/flycheck/issues/268}: Add support for the Compass CSS framework in the @code{sass} and @code{scss}
checkers, with @code{flycheck-sass-compass} and @code{flycheck-scss-compass}
respectively

@item 
#287@footnote{https://github.com/flycheck/flycheck/issues/287}: Disable style checks in @code{ruby-rubocop} with
@code{flycheck-rubocop-lint-only}

@item 
#283@footnote{https://github.com/flycheck/flycheck/issues/283}: Add support for Microsoft extensions in @code{c/c++-clang} via
@code{flycheck-clang-ms-extensions}

@item 
#230@footnote{https://github.com/flycheck/flycheck/issues/230}: New faces @code{flycheck-error-list-info}, @code{flycheck-error-list-warning},
@code{flycheck-error-list-error}, @code{flycheck-error-list-line-number} and
@code{flycheck-error-list-column-number}

@item 
Add @code{flycheck-ghc-no-user-package-database} to disable the user package
database for @code{haskell-ghc}

@item 
Add @code{flycheck-ghc-package-databases} to add additional package databases to
@code{haskell-ghc}

@item 
Add @code{flycheck-ghc-search-path} to add additional directories to the search
path of @code{haskell-ghc}
@end itemize

@item 
Improvements:


@itemize -

@item 
Demote Rubocop convention messages to @code{info} level

@item 
#282@footnote{https://github.com/flycheck/flycheck/issues/282}: Stop Flycheck before the buffer is reverted

@item 
Properly resolve local module imports in @code{haskell-ghc}
@end itemize

@item 
Bug fixes:


@itemize -

@item 
#280@footnote{https://github.com/flycheck/flycheck/issues/280}: Make relative imports work with @code{python-pylint}

@item 
Fix parsing of errors in @code{scss} and @code{sass}
@end itemize
@end itemize

@node 0 15 Nov 15 2013,0 14 1 Aug 16 2013,0 16 Jan 11 2014,Changes
@anchor{manual/changes nov-15-2013}@anchor{da}@anchor{manual/changes flycheck-hdevtools}@anchor{db}
@section 0.15 (Nov 15, 2013)



@itemize -

@item 
Flycheck has a new home at @indicateurl{https://github.com/flycheck/flycheck},
the online manual moved to @indicateurl{http://flycheck.github.io}.

@item 
@strong{Breaking changes}:


@itemize -

@item 
Do not add the current directory to the @code{emacs-lisp} syntax checker load
path

@item 
#214@footnote{https://github.com/flycheck/flycheck/issues/214}: @code{flycheck-list-errors} cannot list errors at point anymore.  It does
not accept a prefix argument anymore, and takes zero arguments now

@item 
#214@footnote{https://github.com/flycheck/flycheck/issues/214}: @code{flycheck-display-errors-in-list} is gone.  The error list
automatically highlights the error at point now

@item 
Remove obsolete @code{flycheck-declare-checker}
@end itemize

@item 
New syntax checkers:


@itemize -

@item 
#236@footnote{https://github.com/flycheck/flycheck/issues/236}: YAML

@item 
#245@footnote{https://github.com/flycheck/flycheck/issues/245}: Javascript with @code{gjslint}

@item 
#246@footnote{https://github.com/flycheck/flycheck/issues/246}: Slim

@item 
#249@footnote{https://github.com/flycheck/flycheck/issues/249}: PHP using @code{phpmd}
@end itemize

@item 
New features:


@itemize -

@item 
Support IDO or Grizzl@footnote{https://github.com/d11wtq/grizzl} as completion systems for @code{flycheck-select-checker}
at @code{C-c ! s}

@item 
#202@footnote{https://github.com/flycheck/flycheck/issues/202}: Disable standard error navigation with
@code{flycheck-standard-error-navigation}

@item 
#207@footnote{https://github.com/flycheck/flycheck/issues/207}: Add @code{flycheck-clang-language-standard} to choose the language standard
for C/C++ syntax checking

@item 
#207@footnote{https://github.com/flycheck/flycheck/issues/207}: Add @code{flycheck-clang-definitions} to set additional definitions for
C/C++ syntax checking

@item 
#207@footnote{https://github.com/flycheck/flycheck/issues/207}: Add @code{flycheck-clang-no-rtti} to disable RTTI for C/C++ syntax checking

@item 
Add new option cell @code{option-flag} for boolean flags in syntax checker
commands

@item 
#207@footnote{https://github.com/flycheck/flycheck/issues/207}: Add @code{flycheck-clang-includes} to include additional files for C/C++
syntax checking

@item 
Add configuration file variable @code{flycheck-pylintrc} for Pylint

@item 
#214@footnote{https://github.com/flycheck/flycheck/issues/214}: New faces @code{flycheck-error-list-highlight-at-point} and
@code{flycheck-error-list-highlight} to highlight the errors at point and at the
current line respectively in the error list

@item 
#214@footnote{https://github.com/flycheck/flycheck/issues/214}: The error list now automatically updates to show the errors of the
current buffer

@item 
#212@footnote{https://github.com/flycheck/flycheck/issues/212}: Define new error levels with @code{flycheck-define-error-level}

@item 
#234@footnote{https://github.com/flycheck/flycheck/issues/234}: Add @code{flycheck-clang-standard-library} to choose the standard library
for C/C++ syntax checking

@item 
#243@footnote{https://github.com/flycheck/flycheck/issues/243}: Customize the delay for displaying errors via
@code{flycheck-display-errors-delay}

@item 
#215@footnote{https://github.com/flycheck/flycheck/issues/215}: Add @code{info} level for informational annotations by syntax checkers

@item 
#259@footnote{https://github.com/flycheck/flycheck/issues/259}: Add a new symbol @code{temporary-file-name} to pass temporary file names to
syntax checkers
@end itemize

@item 
Improvements:


@itemize -

@item 
#214@footnote{https://github.com/flycheck/flycheck/issues/214}: The error list now refreshes automatically after each syntax check

@item 
#214@footnote{https://github.com/flycheck/flycheck/issues/214}: The errors at point are now automatically highlighted in the error
list

@item 
@code{emacs-lisp-checkdoc} does not longer check @code{.dir-locals.el} files

@item 
#222@footnote{https://github.com/flycheck/flycheck/issues/222}: Do not automatically check syntax in encrypted files

@item 
#215@footnote{https://github.com/flycheck/flycheck/issues/215}: Parse notes from @code{c/c++-clang} into info level messages

@item 
#204@footnote{https://github.com/flycheck/flycheck/issues/204}: Parse convention warnings from @code{pylint}#215@footnote{https://github.com/flycheck/flycheck/issues/215}: info level

@item 
#215@footnote{https://github.com/flycheck/flycheck/issues/215}: Demote naming warnings from @code{python-flake8} to info level

@item 
#256@footnote{https://github.com/flycheck/flycheck/issues/256}: Support @code{enh-ruby-mode} in Ruby syntax checkers

@item 
Parse columns from @code{python-pylint} errors

@item 
Do not compress temporary files for syntax checks if the original file was
compressed
@end itemize

@item 
Bug fixes:


@itemize -

@item 
#225@footnote{https://github.com/flycheck/flycheck/issues/225}: Find local includes in the Clang syntax checker

@item 
Do not emit spurious flawed definition warning in the @code{rst} syntax checker

@item 
#251@footnote{https://github.com/flycheck/flycheck/issues/251}: Handle abbreviated file names in @code{luac} output, by simply ignoring
them

@item 
#259@footnote{https://github.com/flycheck/flycheck/issues/259}: Correctly redirect the output binary of the @code{go-build} syntax checker

@item 
#263@footnote{https://github.com/flycheck/flycheck/issues/263}: Fix Cppcheck parsing with the built-in Emacs XML parser
@end itemize
@end itemize

@node 0 14 1 Aug 16 2013,0 14 Aug 15 2013,0 15 Nov 15 2013,Changes
@anchor{manual/changes grizzl}@anchor{dc}@anchor{manual/changes aug-16-2013}@anchor{dd}
@section 0.14.1 (Aug 16, 2013)



@itemize -

@item 
Bug fixes:


@itemize -

@item 
#194@footnote{https://github.com/flycheck/flycheck/issues/194}: Add a missing dependency
@end itemize
@end itemize

@node 0 14 Aug 15 2013,0 13 Jun 28 2013,0 14 1 Aug 16 2013,Changes
@anchor{manual/changes aug-15-2013}@anchor{de}
@section 0.14 (Aug 15, 2013)



@itemize -

@item 
@strong{Breaking changes}:


@itemize -

@item 
#163@footnote{https://github.com/flycheck/flycheck/issues/163}: Introduce @code{flycheck-define-checker} and obsolete
@code{flycheck-declare-checker}

@item 
Remove the obsolete @code{flycheck-error-face} and @code{flycheck-warning-face}

@item 
#176@footnote{https://github.com/flycheck/flycheck/issues/176}: Do not initialize packages by default in @code{emacs-lisp} syntax checker
for non-configuration files

@item 
#179@footnote{https://github.com/flycheck/flycheck/issues/179}: Change the default @code{flycheck-highlighting-mode} to @code{symbols}

@item 
#184@footnote{https://github.com/flycheck/flycheck/issues/184}: Drop support for Pylint 0.x in @code{python-pylint}
@end itemize

@item 
New features:


@itemize -

@item 
#166@footnote{https://github.com/flycheck/flycheck/issues/166}: List errors at point only with prefix arg to @code{flycheck-list-errors}

@item 
#166@footnote{https://github.com/flycheck/flycheck/issues/166}: Add new display function @code{flycheck-display-errors-in-list} to display
errors at point in the error list

@item 
New @code{option-list} argument cell to pass option lists to a syntax checker

@item 
#174@footnote{https://github.com/flycheck/flycheck/issues/174}: New @code{flycheck-emacs-lisp-load-path} option to customize the @code{load-path}
used by the @code{emacs-lisp} syntax checker

@item 
#176@footnote{https://github.com/flycheck/flycheck/issues/176}: New @code{flycheck-emacs-lisp-initialize-packages} option to initialize
packages in the @code{emacs-lisp} syntax checker

@item 
#176@footnote{https://github.com/flycheck/flycheck/issues/176}: New @code{flycheck-emacs-lisp-package-user-dir} option to configure the
package directory for the @code{emacs-lisp} syntax checker

@item 
New option filter @code{flycheck-option-comma-separated-list} for options with
comma separated lists as values

@item 
#179@footnote{https://github.com/flycheck/flycheck/issues/179}: New highlighting mode @code{symbols} to highlight the symbol pointed to by an
error
@end itemize

@item 
New syntax checkers:


@itemize -

@item 
#160@footnote{https://github.com/flycheck/flycheck/issues/160}: LESS

@item 
#162@footnote{https://github.com/flycheck/flycheck/issues/162}: Haskell with @code{ghc}, @code{hdevtools} and @code{hlint}

@item 
#170@footnote{https://github.com/flycheck/flycheck/issues/170}: C/C++ with @code{cppcheck}

@item 
#172@footnote{https://github.com/flycheck/flycheck/issues/172}: C/C++ with @code{clang}

@item 
CoffeeScript with @code{coffee}

@item 
#180@footnote{https://github.com/flycheck/flycheck/issues/180}: XML with @code{xmllint}

@item 
#167@footnote{https://github.com/flycheck/flycheck/issues/167}: D with @code{dmd}
@end itemize

@item 
Improvements:


@itemize -

@item 
#157@footnote{https://github.com/flycheck/flycheck/issues/157}: Support Web Mode in @code{html-tidy} syntax checker

@item 
#159@footnote{https://github.com/flycheck/flycheck/issues/159}: Support Rubocop 0.9 and drop support for older Rubocop releases

@item 
Include the message ID in error messages from @code{python-pylint}
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Fix warnings about flawed definitions in @code{emacs-lisp} and
@code{emacs-lisp-checkdoc}, caused by faulty formatting of sexps

@item 
#166@footnote{https://github.com/flycheck/flycheck/issues/166}: Refresh error lists when pressing @code{g}

@item 
#175@footnote{https://github.com/flycheck/flycheck/issues/175}: Do not obscure active minibuffer input when displaying errors in the
echo area

@item 
Fix universal prefix argument for @code{flycheck-next-error} at @code{C-c ! n}

@item 
#192@footnote{https://github.com/flycheck/flycheck/issues/192}: Correctly parse output of @code{coffeelint} 0.5.7

@item 
#184@footnote{https://github.com/flycheck/flycheck/issues/184}: Correctly parse output of @code{pylint} 1.0
@end itemize
@end itemize

@node 0 13 Jun 28 2013,0 12 May 18 2013,0 14 Aug 15 2013,Changes
@anchor{manual/changes jun-28-2013}@anchor{df}
@section 0.13 (Jun 28, 2013)



@itemize -

@item 
@strong{Breaking changes}:


@itemize -

@item 
Obsolete @code{flycheck-warning-face} and @code{flycheck-error-face} in favor
@code{flycheck-warning} and @code{flycheck-error} respectively

@item 
Obsolete @code{:predicate} forms in favor of @code{:predicate} functions

@item 
@code{flycheck-def-config-file-var} does not automatically mark variables as safe
anymore
@end itemize

@item 
New features:


@itemize -

@item 
Make fringe indicator faces customizable independently with
@code{flycheck-fringe-error} and @code{flycheck-fringe-warning}

@item 
Improve the default faces by using underlines instead of foreground colors,
if possible

@item 
#141@footnote{https://github.com/flycheck/flycheck/issues/141}: Customizable error processing with @code{flycheck-process-error-functions}

@item 
#144@footnote{https://github.com/flycheck/flycheck/issues/144}: Make the delay before starting a syntax check customizable via
@code{flycheck-idle-change-delay}

@item 
#156@footnote{https://github.com/flycheck/flycheck/issues/156}: Make display of errors under point customizable via
@code{flycheck-display-errors-function}
@end itemize

@item 
Improvements


@itemize -

@item 
Always highlight errors on top of warnings now

@item 
#141@footnote{https://github.com/flycheck/flycheck/issues/141}: Do not trigger syntax checks in the middle of commands

@item 
Add the current directory to load path in the @code{emacs-lisp} syntax checker

@item 
Do not longer use the @code{emacs-lisp-checkdoc} syntax checker in Scratch
buffers

@item 
#149@footnote{https://github.com/flycheck/flycheck/issues/149}: Do not flush temporary files onto disk

@item 
Syntax checkers may have error patterns and error parser now

@item 
Predicate forms are now wrapped into functions and compiled into functions
during byte compilation

@item 
Copy each message separately in @code{flycheck-copy-messages-as-kill}

@item 
Mark some customizable variables as safe for file variable usage, most
notably @code{flycheck-indication-mode}, @code{flycheck-highlighting-mode} and
@code{flycheck-idle-change-delay}.
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Fix error when searching for a configuration file outside a Projectile
project

@item 
Do not start a syntax check before the @code{flycheck-mode-hook} was run

@item 
Do not start automatic syntax checks if Flycheck Mode is disabled

@item 
#143@footnote{https://github.com/flycheck/flycheck/issues/143}: Defer the initial syntax check until after the current interactive
command

@item 
Correctly clean up information about running processes

@item 
#150@footnote{https://github.com/flycheck/flycheck/issues/150}: Fix compatibility with Emacs 24.2 and earlier

@item 
Fix version information on Emacs trunk builds
@end itemize
@end itemize

@node 0 12 May 18 2013,0 11 May 01 2013,0 13 Jun 28 2013,Changes
@anchor{manual/changes may-18-2013}@anchor{e0}
@section 0.12 (May 18, 2013)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
#136@footnote{https://github.com/flycheck/flycheck/issues/136}: Ruby using @code{jruby}

@item 
#138@footnote{https://github.com/flycheck/flycheck/issues/138}: Puppet
@end itemize

@item 
New features:


@itemize -

@item 
Highlight error expressions by default, with the new @code{sexps} highlighting
mode

@item 
#140@footnote{https://github.com/flycheck/flycheck/issues/140}: Automatically check syntax some time after the last change in the
buffer

@item 
Add @code{flycheck-version} to determine the installed Flycheck version

@item 
Add @code{flycheck-list-errors}, mapped to @code{C-c ! l}, to list all errors in a
separate buffer
@end itemize

@item 
Improvements:


@itemize -

@item 
Defer syntax checks while a buffer is reverted, to avoid race conditions
@end itemize

@item 
Bug fixes:


@itemize -

@item 
#136@footnote{https://github.com/flycheck/flycheck/issues/136}: Correctly parse syntax errors from JRuby
@end itemize
@end itemize

@node 0 11 May 01 2013,0 10 Apr 21 2013,0 12 May 18 2013,Changes
@anchor{manual/changes may-01-2013}@anchor{e1}
@section 0.11 (May 01, 2013)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
#124@footnote{https://github.com/flycheck/flycheck/issues/124}: Scala
@end itemize

@item 
New features:


@itemize -

@item 
Customizable error indication with control of the fringe side, via
@code{flycheck-indication-mode}

@item 
#128@footnote{https://github.com/flycheck/flycheck/issues/128}: Customizable automatic syntax checking, via
@code{flycheck-check-syntax-automatically}

@item 
#133@footnote{https://github.com/flycheck/flycheck/issues/133}: Customizable configuration file search, via
@code{flycheck-locate-config-file-functions}

@item 
Find configuration files in Projectile@footnote{https://github.com/bbatsov/projectile} projects

@item 
Add @code{flycheck-before-syntax-check-hook} and
@code{flycheck-syntax-check-failed-hook}
@end itemize

@item 
Improvements:


@itemize -

@item 
#123@footnote{https://github.com/flycheck/flycheck/issues/123}: The @code{ruby} syntax checker now differentiates warnings from errors

@item 
Faces are now in a separate customization group
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Add missing customization group for syntax checker options
@end itemize
@end itemize

@node 0 10 Apr 21 2013,0 9 Apr 13 2013,0 11 May 01 2013,Changes
@anchor{manual/changes apr-21-2013}@anchor{e2}@anchor{manual/changes projectile}@anchor{e3}
@section 0.10 (Apr 21, 2013)



@itemize -

@item 
Flycheck uses @code{cl-lib} now.  This library is built-in as of GNU Emacs 24.3.
For earlier releases of GNU Emacs 24 an additional compatibility library will
be installed from GNU ELPA.

@item 
New syntax checkers:


@itemize -

@item 
#112@footnote{https://github.com/flycheck/flycheck/issues/112}: POSIX Shell script using @code{bash}

@item 
#113@footnote{https://github.com/flycheck/flycheck/issues/113}: Ruby using @code{rubocop}

@item 
#108@footnote{https://github.com/flycheck/flycheck/issues/108}: Elixir

@item 
#122@footnote{https://github.com/flycheck/flycheck/issues/122}: Erlang
@end itemize

@item 
Removed syntax checkers:


@itemize -

@item 
#115@footnote{https://github.com/flycheck/flycheck/issues/115}: Python using Pyflakes.  Use the superior Flake8 syntax checker
@end itemize

@item 
New features:


@itemize -

@item 
Add @code{flycheck-copy-messages-as-kill}, mapped to @code{C-c ! C-w}, to copy all
error messages under point into kill ring

@item 
Add @code{flycheck-google-messages}, mapped to @code{C-c ! /}, to google for error
messages under point.  Needs the Google This@footnote{https://github.com/Bruce-Connor/emacs-google-this} library

@item 
Syntax checkers can redirect output to a temporary directory now using the
@code{temporary-directory} argument symbol
@end itemize

@item 
Improvements:


@itemize -

@item 
Call option filters for @code{nil} values, too

@item 
#112@footnote{https://github.com/flycheck/flycheck/issues/112}: Improve error parsing in Bash syntax checker

@item 
Error navigation does not cross restrictions in narrowed buffers anymore

@item 
#99@footnote{https://github.com/flycheck/flycheck/issues/99}: Try to preserve the non-directory part of the buffer's file name when
substituting the @code{source} symbol
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Fix error highlighting and navigation in narrowed buffers

@item 
#118@footnote{https://github.com/flycheck/flycheck/issues/118}: Use a hopefully more reliable way to parse output of PHP CodeSniffer
@end itemize
@end itemize

@node 0 9 Apr 13 2013,0 8 Apr 9 2013,0 10 Apr 21 2013,Changes
@anchor{manual/changes apr-13-2013}@anchor{e4}@anchor{manual/changes google-this}@anchor{e5}
@section 0.9 (Apr 13, 2013)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
#103@footnote{https://github.com/flycheck/flycheck/issues/103}: SCSS using @code{scss}

@item 
RST (ReStructuredText) using Docutils

@item 
#107@footnote{https://github.com/flycheck/flycheck/issues/107}: Go using @code{go build} and @code{go test}
@end itemize

@item 
Improvements:


@itemize -

@item 
Quit the error message window when navigating away from error locations
@end itemize
@end itemize

@node 0 8 Apr 9 2013,0 7 1 Feb 23 2013,0 9 Apr 13 2013,Changes
@anchor{manual/changes apr-9-2013}@anchor{e6}
@section 0.8 (Apr 9, 2013)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
#91@footnote{https://github.com/flycheck/flycheck/issues/91}: Go using @code{gofmt}

@item 
#101@footnote{https://github.com/flycheck/flycheck/issues/101}: Rust using @code{rustc}
@end itemize

@item 
New features:


@itemize -

@item 
#29@footnote{https://github.com/flycheck/flycheck/issues/29}: Add a global Flycheck mode.  @code{(global-flycheck-mode)}
is now the recommended way to enable Flycheck

@item 
#72@footnote{https://github.com/flycheck/flycheck/issues/72}: Add support for syntax checker options

@item 
Add option for the coding standard used by the @code{php-phpcs} syntax
checker

@item 
Add options for the maximum McCabe complexity and the maximum line
length to @code{python-flake8}
@end itemize

@item 
Improvements:


@itemize -

@item 
Support McCabe warnings in @code{python-flake8}

@item 
Support warnings from @code{flake8} 2

@item 
#94@footnote{https://github.com/flycheck/flycheck/issues/94}: Show long error messages in a popup buffer

@item 
#96@footnote{https://github.com/flycheck/flycheck/issues/96}: Show all error messages at point

@item 
#98@footnote{https://github.com/flycheck/flycheck/issues/98}: Add support for naming warings from @code{flake8} 2

@item 
Flycheck mode is not longer enabled for buffers whose names start with a
space

@item 
#100@footnote{https://github.com/flycheck/flycheck/issues/100}: Improve highlighting to reduce screen flickering
@end itemize
@end itemize

@node 0 7 1 Feb 23 2013,0 7 Feb 14 2013,0 8 Apr 9 2013,Changes
@anchor{manual/changes feb-23-2013}@anchor{e7}
@section 0.7.1 (Feb 23, 2013)



@itemize -

@item 
Bug fixes:


@itemize -

@item 
#87@footnote{https://github.com/flycheck/flycheck/issues/87}: Do not signal errors from @code{flycheck-mode}

@item 
Correctly fall back to @code{$HOME} when searching configuration files

@item 
Correctly ascend to parent directory when searching configuration files
@end itemize

@item 
API changes:


@itemize -

@item 
Rename @code{config} cell to @code{config-file}

@item 
Allow to pass the result of @code{config-file} cells as single argument

@item 
#86@footnote{https://github.com/flycheck/flycheck/issues/86}: Add support for evaluating Lisp forms in syntax checker commands
@end itemize
@end itemize

@node 0 7 Feb 14 2013,0 6 1 Jan 30 2013,0 7 1 Feb 23 2013,Changes
@anchor{manual/changes feb-14-2013}@anchor{e8}
@section 0.7 (Feb 14, 2013)



@itemize -

@item 
New features:


@itemize -

@item 
Navigate to source of syntax checker declarations from syntax checker help

@item 
#60@footnote{https://github.com/flycheck/flycheck/issues/60}: Add online Info manual
@end itemize

@item 
Improvements:


@itemize -

@item 
Use pipes instead of TTYs to read output from syntax checkers

@item 
#80@footnote{https://github.com/flycheck/flycheck/issues/80}: Defer syntax checks for invisible buffers

@item 
#62@footnote{https://github.com/flycheck/flycheck/issues/62}: Immediately display error messages after error navigation
@end itemize

@item 
Bug fixes:


@itemize -

@item 
Never select deleted buffers

@item 
Do not let the debugger interfere with necessary cleanup actions

@item 
#78@footnote{https://github.com/flycheck/flycheck/issues/78}: Do not attempt to parse empty XML trees

@item 
#81@footnote{https://github.com/flycheck/flycheck/issues/81}: Fix infinite recursion on Windows
@end itemize
@end itemize

@node 0 6 1 Jan 30 2013,0 6 Jan 29 2013,0 7 Feb 14 2013,Changes
@anchor{manual/changes jan-30-2013}@anchor{e9}
@section 0.6.1 (Jan 30, 2013)



@itemize -

@item 
Fix package dependencies
@end itemize

@node 0 6 Jan 29 2013,0 5 Dec 28 2012,0 6 1 Jan 30 2013,Changes
@anchor{manual/changes jan-29-2013}@anchor{ea}
@section 0.6 (Jan 29, 2013)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
#53@footnote{https://github.com/flycheck/flycheck/issues/53}: Emacs Lisp with @code{checkdoc-current-buffer}

@item 
#72@footnote{https://github.com/flycheck/flycheck/issues/72}: PHP with PHP CodeSniffer
@end itemize

@item 
Removed syntax checkers:


@itemize -

@item 
Javascript with @code{jsl}
@end itemize

@item 
New features:


@itemize -

@item 
#26@footnote{https://github.com/flycheck/flycheck/issues/26}: Error navigation with @code{next-error} and @code{previous-error}

@item 
#33@footnote{https://github.com/flycheck/flycheck/issues/33}: Fringe icons instead of error indicators

@item 
#59@footnote{https://github.com/flycheck/flycheck/issues/59}: Menu entry for Flycheck

@item 
#35@footnote{https://github.com/flycheck/flycheck/issues/35}: Customizable error highlighting, taking the column number into account

@item 
Configuration files for syntax checkers

@item 
Add configuration file support to the syntax checkers @code{coffee-coffeelint},
@code{html-tidy}, @code{javascript-jshint}, @code{pyton-flake8} and @code{tex-chktex}

@item 
#58@footnote{https://github.com/flycheck/flycheck/issues/58}: Allow to compile a buffer with a syntax checker for testing purposes

@item 
#31@footnote{https://github.com/flycheck/flycheck/issues/31}: Use multiple syntax checkers during a syntax check

@item 
#52@footnote{https://github.com/flycheck/flycheck/issues/52}: Add dedicated help for syntax checkers
@end itemize

@item 
Improvements:


@itemize -

@item 
#55@footnote{https://github.com/flycheck/flycheck/issues/55}: Match error patterns in order of declaration
@end itemize

@item 
Bug fixes:


@itemize -

@item 
#24@footnote{https://github.com/flycheck/flycheck/issues/24}: Inherit highlighting faces from built-in faces

@item 
#36@footnote{https://github.com/flycheck/flycheck/issues/36}: Correct error patterns of the HTML syntax checker

@item 
#42@footnote{https://github.com/flycheck/flycheck/issues/42}: Detect syntax errors in the @code{python-flake8} syntax checker

@item 
Fix various regressions after introducing unit tests

@item 
#45@footnote{https://github.com/flycheck/flycheck/issues/45}: Inhibit syntax checking during package installation

@item 
#54@footnote{https://github.com/flycheck/flycheck/issues/54}: Disable syntax checking in Tramp buffers

@item 
#65@footnote{https://github.com/flycheck/flycheck/issues/65}: Preserve whitespace in error messages
@end itemize

@item 
API changes:


@itemize -

@item 
#41@footnote{https://github.com/flycheck/flycheck/issues/41}: Replace syntax checker variables with syntax checker declarations

@item 
#38@footnote{https://github.com/flycheck/flycheck/issues/38}: Support parsing errors with arbitrary functions instead of error
patterns

@item 
#38@footnote{https://github.com/flycheck/flycheck/issues/38}: Add an error parser for Checkstyle-like XML output
@end itemize
@end itemize

@node 0 5 Dec 28 2012,0 4 Nov 21 2012,0 6 Jan 29 2013,Changes
@anchor{manual/changes dec-28-2012}@anchor{eb}
@section 0.5 (Dec 28, 2012)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
#15@footnote{https://github.com/flycheck/flycheck/issues/15}: SASS

@item 
#21@footnote{https://github.com/flycheck/flycheck/issues/21}: Perl

@item 
XML

@item 
#30@footnote{https://github.com/flycheck/flycheck/issues/30}: Lua
@end itemize

@item 
New features:


@itemize -

@item 
#25@footnote{https://github.com/flycheck/flycheck/issues/25}: Support manual buffer-local selection of syntax checker

@item 
#28@footnote{https://github.com/flycheck/flycheck/issues/28}: Add customizable error indicators

@item 
#27@footnote{https://github.com/flycheck/flycheck/issues/27}: Echo error messages at point without 3rd-party libraries like
flymake-cursor
@end itemize

@item 
Improvements:


@itemize -

@item 
#24@footnote{https://github.com/flycheck/flycheck/issues/24}: Remember the last automatically selected syntax checker
@end itemize

@item 
Bug fixes:


@itemize -

@item 
#19@footnote{https://github.com/flycheck/flycheck/issues/19}: Fix syntax checking of buffers without backing files
@end itemize

@item 
API changes:


@itemize -

@item 
#15@footnote{https://github.com/flycheck/flycheck/issues/15}: Replace underlying Flymake API with a custom syntax checking
implementation
@end itemize
@end itemize

@node 0 4 Nov 21 2012,0 3 Nov 21 2012,0 5 Dec 28 2012,Changes
@anchor{manual/changes nov-21-2012}@anchor{ec}@anchor{manual/changes flymake-cursor}@anchor{ed}
@section 0.4 (Nov 21, 2012)



@itemize -

@item 
#5@footnote{https://github.com/flycheck/flycheck/issues/5}: Rename the project to Flycheck

@item 
New syntax checkers


@itemize -

@item 
#9@footnote{https://github.com/flycheck/flycheck/issues/9}: HAML

@item 
#9@footnote{https://github.com/flycheck/flycheck/issues/9}: CSS

@item 
#9@footnote{https://github.com/flycheck/flycheck/issues/9}: Javascript with @code{jsl}

@item 
#16@footnote{https://github.com/flycheck/flycheck/issues/16}: Javascript with @code{jshint}

@item 
#12@footnote{https://github.com/flycheck/flycheck/issues/12}: JSON

@item 
LaTeX with @code{lacheck}
@end itemize

@item 
Bug fixes:


@itemize -

@item 
#10@footnote{https://github.com/flycheck/flycheck/issues/10}: Fix type error when checking compressed Emacs Lisp
@end itemize
@end itemize

@node 0 3 Nov 21 2012,0 2 Oct 25 2012,0 4 Nov 21 2012,Changes
@anchor{manual/changes id1}@anchor{ee}
@section 0.3 (Nov 21, 2012)



@itemize -

@item 
#4@footnote{https://github.com/flycheck/flycheck/issues/4}: Replace @code{flymake-mode} with a custom syntax checking minor mode
@end itemize

@node 0 2 Oct 25 2012,0 1 Oct 11 2012,0 3 Nov 21 2012,Changes
@anchor{manual/changes oct-25-2012}@anchor{ef}
@section 0.2 (Oct 25, 2012)



@itemize -

@item 
New syntax checkers:


@itemize -

@item 
PHP
@end itemize

@item 
API changes:


@itemize -

@item 
#2@footnote{https://github.com/flycheck/flycheck/issues/2}: Simplify syntax checker declarations
@end itemize
@end itemize

@node 0 1 Oct 11 2012,,0 2 Oct 25 2012,Changes
@anchor{manual/changes oct-11-2012}@anchor{f0}
@section 0.1 (Oct 11, 2012)


Initial release as flymake-checkers


@itemize -

@item 
New syntax checkers:


@itemize -

@item 
TeX/LaTeX

@item 
Shell scripts

@item 
Python

@item 
Ruby

@item 
Coffeescript

@item 
Emacs Lisp
@end itemize
@end itemize

@node GNU Free Documentation License,Supported languages,Changes,Top
@anchor{manual/fdl doc}@anchor{1}@anchor{manual/fdl gnu-free-documentation-license}@anchor{f1}
@chapter GNU Free Documentation License


@example

                GNU Free Documentation License
                 Version 1.3, 3 November 2008


 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
functional and useful document "free" in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The "Document", below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as "you".  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML, PostScript or PDF designed for human modification.  Examples of
transparent image formats include PNG, XCF and JPG.  Opaque formats
include proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML, PostScript or PDF produced by some word
processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of
the Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as "Acknowledgements",
"Dedications", "Endorsements", or "History".)  To "Preserve the Title"
of such a section when you modify the Document means that it remains a
section "Entitled XYZ" according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.

2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no
other conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to
give them a chance to provide you with an updated version of the
Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has fewer than five),
   unless they release you from this requirement.
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled "History", Preserve its Title, and add
   to it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section Entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. For any section Entitled "Acknowledgements" or "Dedications",
   Preserve the Title of the section, and preserve in the section all
   the substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section Entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section to be Entitled "Endorsements"
   or to conflict in title with any Invariant Section.
O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History"
in the various original documents, forming one section Entitled
"History"; likewise combine any sections Entitled "Acknowledgements",
and any sections Entitled "Dedications".  You must delete all sections
Entitled "Endorsements".


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other
documents released under this License, and replace the individual
copies of this License in the various documents with a single copy
that is included in the collection, provided that you follow the rules
of this License for verbatim copying of each of the documents in all
other respects.

You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an "aggregate" if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled "Acknowledgements",
"Dedications", or "History", the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions of the
GNU Free Documentation License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in
detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.

11. RELICENSING

"Massive Multiauthor Collaboration Site" (or "MMC Site") means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
"Massive Multiauthor Collaboration" (or "MMC") contained in the site
means any set of copyrightable works thus published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0 
license published by Creative Commons Corporation, a not-for-profit 
corporation with a principal place of business in San Francisco, 
California, as well as future copyleft versions of that license 
published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in 
part, as part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this 
License, and if all works that were first published under this License 
somewhere other than this MMC, and subsequently incorporated in whole or 
in part into the MMC, (1) had no cover texts or invariant sections, and 
(2) were thus incorporated prior to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts." line with this:

    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
@end example

@node Supported languages,Glossary,GNU Free Documentation License,Top
@anchor{manual/languages doc}@anchor{7}@anchor{manual/languages supported-languages}@anchor{f2}
@chapter Supported languages


Flycheck supports the following 41 languages with
62 syntax checkers.

Each language has one or more syntax checkers, whose names follow a
@code{@emph{language}-@emph{tool}} convention, where @code{@emph{language}} is the
programming language supported by this syntax checker, and @code{@emph{tool}} the
specific syntax checker tool.

This document provides just a brief overview, use
@ref{10,,flycheck-describe-checker} to see comprehensive documenation about
a syntax checker.

@menu
* AsciiDoc:: 
* Bash:: 
* C/C++:: 
* CFEngine:: 
* Chef:: 
* Coffeescript:: 
* CSS:: 
* D:: 
* Elixir:: 
* Emacs Lisp:: 
* Erlang:: 
* ERuby:: 
* Go:: 
* Haml:: 
* Handlebars:: 
* Haskell:: 
* HTML:: 
* Javascript:: 
* JSON:: 
* LESS:: 
* Lua:: 
* Make:: 
* Perl:: 
* PHP:: 
* Puppet:: 
* Python:: 
* Racket:: 
* ReStructuredText:: 
* Ruby:: 
* Rust:: 
* Sass:: 
* Scala:: 
* Scss:: 
* Shell (POSIX): Shell POSIX. 
* Slim:: 
* TeX/LaTeX:: 
* Texinfo:: 
* Verilog:: 
* XML:: 
* YAML:: 
* Zsh:: 

@end menu

@node AsciiDoc,Bash,,Supported languages
@anchor{manual/languages asciidoc}@anchor{f3}
@section AsciiDoc



@subsubheading See also


@indicateurl{http://www.methods.co.nz/asciidoc/}


@geindex asciidoc; Flycheck syntax checker
@anchor{manual/languages flyc asciidoc}@anchor{f4}
@deffn {Flycheck Syntax Checker} Syntax Checker asciidoc
@end deffn

@node Bash,C/C++,AsciiDoc,Supported languages
@anchor{manual/languages bash}@anchor{f5}
@section Bash



@subsubheading See also


@indicateurl{http://www.gnu.org/software/bash/}


@geindex bash; Flycheck syntax checker
@anchor{manual/languages flyc bash}@anchor{f6}
@deffn {Flycheck Syntax Checker} Syntax Checker bash
@end deffn

@node C/C++,CFEngine,Bash,Supported languages
@anchor{manual/languages c-c}@anchor{f7}
@section C/C++


@geindex c/c++-clang; Flycheck syntax checker
@anchor{manual/languages flyc c/c++-clang}@anchor{34}
@deffn {Flycheck Syntax Checker} Syntax Checker c/c++@w{-}clang


@subsubheading See also


@indicateurl{http://clang.llvm.org/}

@end deffn

@geindex c/c++-cppcheck; Flycheck syntax checker
@anchor{manual/languages flyc c/c++-cppcheck}@anchor{3d}
@deffn {Flycheck Syntax Checker} Syntax Checker c/c++@w{-}cppcheck


@subsubheading See also


@indicateurl{http://cppcheck.sourceforge.net/}

@end deffn

@node CFEngine,Chef,C/C++,Supported languages
@anchor{manual/languages cfengine}@anchor{f8}
@section CFEngine



@subsubheading See also


@indicateurl{http://cfengine.com/}


@geindex cfengine; Flycheck syntax checker
@anchor{manual/languages flyc cfengine}@anchor{f9}
@deffn {Flycheck Syntax Checker} Syntax Checker cfengine
@end deffn

@node Chef,Coffeescript,CFEngine,Supported languages
@anchor{manual/languages chef}@anchor{fa}
@section Chef



@subsubheading See also


@indicateurl{http://www.getchef.com/chef/}


@geindex chef-foodcritic; Flycheck syntax checker
@anchor{manual/languages flyc chef-foodcritic}@anchor{fb}
@deffn {Flycheck Syntax Checker} Syntax Checker chef@w{-}foodcritic


@subsubheading See also


@indicateurl{http://acrmp.github.io/foodcritic/}

@end deffn

@node Coffeescript,CSS,Chef,Supported languages
@anchor{manual/languages coffeescript}@anchor{fc}
@section Coffeescript



@subsubheading See also


@indicateurl{http://coffeescript.org/}


@geindex coffee; Flycheck syntax checker
@anchor{manual/languages flyc coffee}@anchor{fd}
@deffn {Flycheck Syntax Checker} Syntax Checker coffee
@end deffn

@geindex coffee-coffeelint; Flycheck syntax checker
@anchor{manual/languages flyc coffee-coffeelint}@anchor{5e}
@deffn {Flycheck Syntax Checker} Syntax Checker coffee@w{-}coffeelint


@subsubheading See also


@indicateurl{http://www.coffeelint.org/}

@end deffn

@node CSS,D,Coffeescript,Supported languages
@anchor{manual/languages css}@anchor{fe}
@section CSS


@geindex css-csslint; Flycheck syntax checker
@anchor{manual/languages flyc css-csslint}@anchor{ff}
@deffn {Flycheck Syntax Checker} Syntax Checker css@w{-}csslint


@subsubheading See also


@indicateurl{https://github.com/stubbornella/csslint}

@end deffn

@node D,Elixir,CSS,Supported languages
@anchor{manual/languages d}@anchor{100}
@section D



@subsubheading See also


@indicateurl{http://dlang.org/}


@geindex d-dmd; Flycheck syntax checker
@anchor{manual/languages flyc d-dmd}@anchor{101}
@deffn {Flycheck Syntax Checker} Syntax Checker d@w{-}dmd
@end deffn

@node Elixir,Emacs Lisp,D,Supported languages
@anchor{manual/languages elixir}@anchor{102}
@section Elixir



@subsubheading See also


@indicateurl{http://elixir-lang.org}


@geindex elixir; Flycheck syntax checker
@anchor{manual/languages flyc elixir}@anchor{95}
@deffn {Flycheck Syntax Checker} Syntax Checker elixir
@end deffn

@node Emacs Lisp,Erlang,Elixir,Supported languages
@anchor{manual/languages emacs-lisp}@anchor{103}
@section Emacs Lisp



@subsubheading See also



@table @asis

@item Emacs

@indicateurl{http://www.gnu.org/software/emacs/}

@item Emacs Lisp manual

@indicateurl{http://www.gnu.org/software/emacs/manual/html_node/elisp/index.html}
@end table


@geindex emacs-lisp; Flycheck syntax checker
@anchor{manual/languages flyc emacs-lisp}@anchor{3f}
@deffn {Flycheck Syntax Checker} Syntax Checker emacs@w{-}lisp
@end deffn

@geindex emacs-lisp-checkdoc; Flycheck syntax checker
@anchor{manual/languages flyc emacs-lisp-checkdoc}@anchor{104}
@deffn {Flycheck Syntax Checker} Syntax Checker emacs@w{-}lisp@w{-}checkdoc


@subsubheading See also



@table @asis

@item Tips for Documentation Strings

@indicateurl{http://www.gnu.org/software/emacs/manual/html_node/elisp/Documentation-Tips.html#Documentation-Tips}
@end table

@end deffn

@node Erlang,ERuby,Emacs Lisp,Supported languages
@anchor{manual/languages erlang}@anchor{105}
@section Erlang



@subsubheading See also


@indicateurl{http://www.erlang.org/}


@geindex erlang; Flycheck syntax checker
@anchor{manual/languages flyc erlang}@anchor{106}
@deffn {Flycheck Syntax Checker} Syntax Checker erlang
@end deffn

@node ERuby,Go,Erlang,Supported languages
@anchor{manual/languages eruby}@anchor{107}
@section ERuby


@geindex eruby-erubis; Flycheck syntax checker
@anchor{manual/languages flyc eruby-erubis}@anchor{108}
@deffn {Flycheck Syntax Checker} Syntax Checker eruby@w{-}erubis


@subsubheading See also



@table @asis

@item Erubis

@indicateurl{http://www.kuwata-lab.com/erubis/}
@end table

@end deffn

@node Go,Haml,ERuby,Supported languages
@anchor{manual/languages go}@anchor{109}
@section Go



@subsubheading See also


@indicateurl{http://golang.org/}


@geindex go-gofmt; Flycheck syntax checker
@anchor{manual/languages flyc go-gofmt}@anchor{10a}
@deffn {Flycheck Syntax Checker} Syntax Checker go@w{-}gofmt
@end deffn

@geindex go-build; Flycheck syntax checker
@anchor{manual/languages flyc go-build}@anchor{10b}
@deffn {Flycheck Syntax Checker} Syntax Checker go@w{-}build
@end deffn

@geindex go-test; Flycheck syntax checker
@anchor{manual/languages flyc go-test}@anchor{10c}
@deffn {Flycheck Syntax Checker} Syntax Checker go@w{-}test
@end deffn

@node Haml,Handlebars,Go,Supported languages
@anchor{manual/languages haml}@anchor{10d}
@section Haml



@subsubheading See also


@indicateurl{http://haml.info/}


@geindex haml; Flycheck syntax checker
@anchor{manual/languages flyc haml}@anchor{10e}
@deffn {Flycheck Syntax Checker} Syntax Checker haml
@end deffn

@node Handlebars,Haskell,Haml,Supported languages
@anchor{manual/languages handlebars}@anchor{10f}
@section Handlebars



@subsubheading See also


@indicateurl{http://handlebarsjs.com/}


@geindex handlebars; Flycheck syntax checker
@anchor{manual/languages flyc handlebars}@anchor{110}
@deffn {Flycheck Syntax Checker} Syntax Checker handlebars
@end deffn

@node Haskell,HTML,Handlebars,Supported languages
@anchor{manual/languages haskell}@anchor{111}
@section Haskell



@subsubheading See also


@indicateurl{http://www.haskell.org/}


@geindex haskell-ghc; Flycheck syntax checker
@anchor{manual/languages flyc haskell-ghc}@anchor{48}
@deffn {Flycheck Syntax Checker} Syntax Checker haskell@w{-}ghc


@subsubheading See also


@indicateurl{http://www.haskell.org/ghc/}

@end deffn

@geindex haskell-hlint; Flycheck syntax checker
@anchor{manual/languages flyc haskell-hlint}@anchor{112}
@deffn {Flycheck Syntax Checker} Syntax Checker haskell@w{-}hlint


@subsubheading See also


@indicateurl{https://github.com/ndmitchell/hlint}

@end deffn

@node HTML,Javascript,Haskell,Supported languages
@anchor{manual/languages html}@anchor{113}
@section HTML


@geindex html-tidy; Flycheck syntax checker
@anchor{manual/languages flyc html-tidy}@anchor{69}
@deffn {Flycheck Syntax Checker} Syntax Checker html@w{-}tidy


@subsubheading See also



@table @asis

@item HTML Tidy

@indicateurl{http://tidy.sourceforge.net/}

@item HTML Tidy for HTML 5

@indicateurl{http://w3c.github.io/tidy-html5/}
@end table

@end deffn

@node Javascript,JSON,HTML,Supported languages
@anchor{manual/languages javascript}@anchor{114}
@section Javascript


@geindex javascript-jshint; Flycheck syntax checker
@anchor{manual/languages flyc javascript-jshint}@anchor{64}
@deffn {Flycheck Syntax Checker} Syntax Checker javascript@w{-}jshint


@subsubheading See also


@indicateurl{http://www.jshint.com/}

@end deffn

@geindex javascript-eslint; Flycheck syntax checker
@anchor{manual/languages flyc javascript-eslint}@anchor{43}
@deffn {Flycheck Syntax Checker} Syntax Checker javascript@w{-}eslint


@subsubheading See also


@indicateurl{https://github.com/eslint/eslint}

@end deffn

@geindex javascript-gjslint; Flycheck syntax checker
@anchor{manual/languages flyc javascript-gjslint}@anchor{62}
@deffn {Flycheck Syntax Checker} Syntax Checker javascript@w{-}gjslint


@subsubheading See also



@table @asis

@item Closure Linter

@indicateurl{https://developers.google.com/closure/utilities/}
@end table

@end deffn

@node JSON,LESS,Javascript,Supported languages
@anchor{manual/languages json}@anchor{115}
@section JSON


@geindex json-jsonlint; Flycheck syntax checker
@anchor{manual/languages flyc json-jsonlint}@anchor{116}
@deffn {Flycheck Syntax Checker} Syntax Checker json@w{-}jsonlint


@subsubheading See also


@indicateurl{https://github.com/zaach/jsonlint}

@end deffn

@node LESS,Lua,JSON,Supported languages
@anchor{manual/languages less}@anchor{117}
@section LESS


@geindex less; Flycheck syntax checker
@anchor{manual/languages flyc less}@anchor{118}
@deffn {Flycheck Syntax Checker} Syntax Checker less


@subsubheading See also


@indicateurl{http://www.lesscss.org/}

@end deffn

@node Lua,Make,LESS,Supported languages
@anchor{manual/languages lua}@anchor{119}
@section Lua


@geindex lua; Flycheck syntax checker
@anchor{manual/languages flyc lua}@anchor{11a}
@deffn {Flycheck Syntax Checker} Syntax Checker lua


@subsubheading See also


@indicateurl{http://www.lua.org/}

@end deffn

@node Make,Perl,Lua,Supported languages
@anchor{manual/languages make}@anchor{11b}
@section Make



@subsubheading See also



@table @asis

@item IEEE Std 1003.1, 2013 Edition, Make

@indicateurl{http://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html}
@end table


@geindex make; Flycheck syntax checker
@anchor{manual/languages flyc make}@anchor{11c}
@deffn {Flycheck Syntax Checker} Syntax Checker make


@subsubheading See also



@table @asis

@item GNU Make

@indicateurl{http://www.gnu.org/software/make/}

@item NetBSD Make

@indicateurl{http://netbsd.gw.com/cgi-bin/man-cgi?make++NetBSD-current}

@item FreeBSD Make

@indicateurl{http://www.freebsd.org/cgi/man.cgi?query=make&sektion=1}

@item OpenBSD Make

@indicateurl{http://www.openbsd.org/cgi-bin/man.cgi?query=make}
@end table

@end deffn

@node Perl,PHP,Make,Supported languages
@anchor{manual/languages perl}@anchor{11d}
@section Perl



@subsubheading See also


@indicateurl{http://www.perl.org}


@geindex perl; Flycheck syntax checker
@anchor{manual/languages flyc perl}@anchor{11e}
@deffn {Flycheck Syntax Checker} Syntax Checker perl
@end deffn

@geindex perl-perlcritic; Flycheck syntax checker
@anchor{manual/languages flyc perl-perlcritic}@anchor{4c}
@deffn {Flycheck Syntax Checker} Syntax Checker perl@w{-}perlcritic


@subsubheading See also


@indicateurl{http://search.cpan.org/dist/Perl-Critic/}

@end deffn

@node PHP,Puppet,Perl,Supported languages
@anchor{manual/languages php}@anchor{11f}
@section PHP


@geindex php; Flycheck syntax checker
@anchor{manual/languages flyc php}@anchor{120}
@deffn {Flycheck Syntax Checker} Syntax Checker php


@subsubheading See also



@table @asis

@item PHP Command Line

@indicateurl{http://php.net/manual/en/features.commandline.php}
@end table

@end deffn

@geindex php-phpmd; Flycheck syntax checker
@anchor{manual/languages flyc php-phpmd}@anchor{50}
@deffn {Flycheck Syntax Checker} Syntax Checker php@w{-}phpmd


@subsubheading See also



@table @asis

@item PHP Mess Detector

@indicateurl{http://phpmd.org/}
@end table

@end deffn

@geindex php-phpcs; Flycheck syntax checker
@anchor{manual/languages flyc php-phpcs}@anchor{4e}
@deffn {Flycheck Syntax Checker} Syntax Checker php@w{-}phpcs


@subsubheading See also



@table @asis

@item PHP Code Sniffer

@indicateurl{http://pear.php.net/package/PHP_CodeSniffer/}
@end table

@end deffn

@node Puppet,Python,PHP,Supported languages
@anchor{manual/languages puppet}@anchor{121}
@section Puppet



@subsubheading See also


@indicateurl{https://puppetlabs.com/}


@geindex puppet-parser; Flycheck syntax checker
@anchor{manual/languages flyc puppet-parser}@anchor{122}
@deffn {Flycheck Syntax Checker} Syntax Checker puppet@w{-}parser
@end deffn

@geindex puppet-lint; Flycheck syntax checker
@anchor{manual/languages flyc puppet-lint}@anchor{123}
@deffn {Flycheck Syntax Checker} Syntax Checker puppet@w{-}lint


@subsubheading See also


@indicateurl{http://www.puppet-lint.com/}

@end deffn

@node Python,Racket,Puppet,Supported languages
@anchor{manual/languages python}@anchor{124}
@section Python


@geindex python-flake8; Flycheck syntax checker
@anchor{manual/languages flyc python-flake8}@anchor{45}
@deffn {Flycheck Syntax Checker} Syntax Checker python@w{-}flake8


@subsubheading See also


@indicateurl{http://flake8.readthedocs.org/}

@end deffn

@geindex python-pylint; Flycheck syntax checker
@anchor{manual/languages flyc python-pylint}@anchor{66}
@deffn {Flycheck Syntax Checker} Syntax Checker python@w{-}pylint


@subsubheading See also


@indicateurl{http://www.pylint.org/}

@end deffn

@node Racket,ReStructuredText,Python,Supported languages
@anchor{manual/languages racket}@anchor{125}
@section Racket



@subsubheading See also


@indicateurl{http://racket-lang.org/}


@geindex racket; Flycheck syntax checker
@anchor{manual/languages flyc racket}@anchor{126}
@deffn {Flycheck Syntax Checker} Syntax Checker racket
@end deffn

@node ReStructuredText,Ruby,Racket,Supported languages
@anchor{manual/languages restructuredtext}@anchor{127}
@section ReStructuredText



@subsubheading See also



@table @asis

@item ReStructuredText

@indicateurl{http://docutils.sourceforge.net/rst.html}

@item Docutils

@indicateurl{http://docutils.sourceforge.net/}
@end table


@geindex rst; Flycheck syntax checker
@anchor{manual/languages flyc rst}@anchor{128}
@deffn {Flycheck Syntax Checker} Syntax Checker rst
@end deffn

@geindex rst-sphinx; Flycheck syntax checker
@anchor{manual/languages flyc rst-sphinx}@anchor{58}
@deffn {Flycheck Syntax Checker} Syntax Checker rst@w{-}sphinx


@subsubheading See also


sphinx-doc.org

@end deffn

@node Ruby,Rust,ReStructuredText,Supported languages
@anchor{manual/languages ruby}@anchor{129}
@section Ruby



@subsubheading See also


@indicateurl{https://www.ruby-lang.org/}


@geindex ruby-rubocop; Flycheck syntax checker
@anchor{manual/languages flyc ruby-rubocop}@anchor{52}
@deffn {Flycheck Syntax Checker} Syntax Checker ruby@w{-}rubocop


@subsubheading See also


@indicateurl{https://github.com/bbatsov/rubocop}

@end deffn

@geindex ruby-rubylint; Flycheck syntax checker
@anchor{manual/languages flyc ruby-rubylint}@anchor{12a}
@deffn {Flycheck Syntax Checker} Syntax Checker ruby@w{-}rubylint


@subsubheading See also


@indicateurl{https://github.com/YorickPeterse/ruby-lint}

@end deffn

@geindex ruby; Flycheck syntax checker
@anchor{manual/languages flyc ruby}@anchor{12b}
@deffn {Flycheck Syntax Checker} Syntax Checker ruby
@end deffn

@geindex ruby-jruby; Flycheck syntax checker
@anchor{manual/languages flyc ruby-jruby}@anchor{12c}
@deffn {Flycheck Syntax Checker} Syntax Checker ruby@w{-}jruby


@subsubheading See also


@indicateurl{http://jruby.org/}

@end deffn

@node Rust,Sass,Ruby,Supported languages
@anchor{manual/languages rust}@anchor{12d}
@section Rust



@subsubheading See also


@indicateurl{http://www.rust-lang.org/}


@geindex rust; Flycheck syntax checker
@anchor{manual/languages flyc rust}@anchor{12e}
@deffn {Flycheck Syntax Checker} Syntax Checker rust
@end deffn

@node Sass,Scala,Rust,Supported languages
@anchor{manual/languages sass}@anchor{12f}
@section Sass



@subsubheading See also


@indicateurl{http://sass-lang.com/}


@geindex sass; Flycheck syntax checker
@anchor{manual/languages flyc sass}@anchor{54}
@deffn {Flycheck Syntax Checker} Syntax Checker sass
@end deffn

@node Scala,Scss,Sass,Supported languages
@anchor{manual/languages scala}@anchor{130}
@section Scala



@subsubheading See also


@indicateurl{http://www.scala-lang.org/}


@geindex scala; Flycheck syntax checker
@anchor{manual/languages flyc scala}@anchor{131}
@deffn {Flycheck Syntax Checker} Syntax Checker scala
@end deffn

@node Scss,Shell POSIX,Scala,Supported languages
@anchor{manual/languages scss}@anchor{132}
@section Scss


@geindex scss; Flycheck syntax checker
@anchor{manual/languages flyc scss}@anchor{56}
@deffn {Flycheck Syntax Checker} Syntax Checker scss


@subsubheading See also


@indicateurl{http://sass-lang.com/}

@end deffn

@node Shell POSIX,Slim,Scss,Supported languages
@anchor{manual/languages shell-posix}@anchor{133}
@section Shell (POSIX)



@subsubheading See also



@table @asis

@item POSIX Shell Command Language

@indicateurl{http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html}
@end table


@geindex sh-dash; Flycheck syntax checker
@anchor{manual/languages flyc sh-dash}@anchor{134}
@deffn {Flycheck Syntax Checker} Syntax Checker sh@w{-}dash


@subsubheading See also



@table @asis

@item DASH

@indicateurl{http://gondor.apana.org.au/~herbert/dash/}
@end table

@end deffn

@geindex sh-bash; Flycheck syntax checker
@anchor{manual/languages flyc sh-bash}@anchor{135}
@deffn {Flycheck Syntax Checker} Syntax Checker sh@w{-}bash


@subsubheading See also


@indicateurl{http://www.gnu.org/software/bash/}

@end deffn

@node Slim,TeX/LaTeX,Shell POSIX,Supported languages
@anchor{manual/languages slim}@anchor{136}
@section Slim



@subsubheading See also


@indicateurl{http://slim-lang.com/}


@geindex slim; Flycheck syntax checker
@anchor{manual/languages flyc slim}@anchor{137}
@deffn {Flycheck Syntax Checker} Syntax Checker slim
@end deffn

@node TeX/LaTeX,Texinfo,Slim,Supported languages
@anchor{manual/languages tex-latex}@anchor{138}
@section TeX/LaTeX



@subsubheading See also



@table @asis

@item LaTeX

@indicateurl{http://www.latex-project.org/}

@item TeX Live

@indicateurl{http://www.tug.org/texlive/}
@end table


@geindex tex-chktex; Flycheck syntax checker
@anchor{manual/languages flyc tex-chktex}@anchor{5c}
@deffn {Flycheck Syntax Checker} Syntax Checker tex@w{-}chktex


@subsubheading See also


@indicateurl{http://www.nongnu.org/chktex/}

@end deffn

@geindex tex-lacheck; Flycheck syntax checker
@anchor{manual/languages flyc tex-lacheck}@anchor{139}
@deffn {Flycheck Syntax Checker} Syntax Checker tex@w{-}lacheck


@subsubheading See also


@indicateurl{http://www.ctan.org/pkg/lacheck}

@end deffn

@node Texinfo,Verilog,TeX/LaTeX,Supported languages
@anchor{manual/languages texinfo}@anchor{13a}
@section Texinfo


@geindex texinfo; Flycheck syntax checker
@anchor{manual/languages flyc texinfo}@anchor{13b}
@deffn {Flycheck Syntax Checker} Syntax Checker texinfo


@subsubheading See also


www.gnu.org/software/texinfo/

@end deffn

@node Verilog,XML,Texinfo,Supported languages
@anchor{manual/languages verilog}@anchor{13c}
@section Verilog


@geindex verilog-verilator; Flycheck syntax checker
@anchor{manual/languages flyc verilog-verilator}@anchor{13d}
@deffn {Flycheck Syntax Checker} Syntax Checker verilog@w{-}verilator


@subsubheading See also


@indicateurl{http://www.veripool.org/wiki/verilator}

@end deffn

@node XML,YAML,Verilog,Supported languages
@anchor{manual/languages xml}@anchor{13e}
@section XML


@geindex xml-xmlstarlet; Flycheck syntax checker
@anchor{manual/languages flyc xml-xmlstarlet}@anchor{13f}
@deffn {Flycheck Syntax Checker} Syntax Checker xml@w{-}xmlstarlet


@subsubheading See also


@indicateurl{http://xmlstar.sourceforge.net/}

@end deffn

@geindex xml-xmllint; Flycheck syntax checker
@anchor{manual/languages flyc xml-xmllint}@anchor{140}
@deffn {Flycheck Syntax Checker} Syntax Checker xml@w{-}xmllint


@subsubheading See also



@table @asis

@item Libxml2

@indicateurl{http://www.xmlsoft.org/}
@end table

@end deffn

@node YAML,Zsh,XML,Supported languages
@anchor{manual/languages yaml}@anchor{141}
@section YAML


@geindex yaml-jsyaml; Flycheck syntax checker
@anchor{manual/languages flyc yaml-jsyaml}@anchor{142}
@deffn {Flycheck Syntax Checker} Syntax Checker yaml@w{-}jsyaml


@subsubheading See also


@indicateurl{https://github.com/nodeca/js-yaml}

@end deffn

@geindex yaml-ruby; Flycheck syntax checker
@anchor{manual/languages flyc yaml-ruby}@anchor{143}
@deffn {Flycheck Syntax Checker} Syntax Checker yaml@w{-}ruby


@subsubheading See also


@indicateurl{https://www.ruby-lang.org}

@end deffn

@node Zsh,,YAML,Supported languages
@anchor{manual/languages zsh}@anchor{144}
@section Zsh



@subsubheading See also


@indicateurl{http://www.zsh.org/}


@geindex zsh; Flycheck syntax checker
@anchor{manual/languages flyc zsh}@anchor{145}
@deffn {Flycheck Syntax Checker} Syntax Checker zsh
@end deffn

@node Glossary,Index,Supported languages,Top
@anchor{manual/glossary glossary}@anchor{146}@anchor{manual/glossary doc}@anchor{147}
@chapter Glossary



@table @asis
@anchor{manual/glossary term-syntax-checker}@anchor{27}
@geindex syntax checker

@item syntax checker

A symbol which is defined as syntax checker with
@ref{8e,,flycheck-define-checker}
@anchor{manual/glossary term-registered-syntax-checker}@anchor{28}
@geindex registered syntax checker

@item registered syntax checker

A @ref{27,,syntax checker} available for automatic selection, i.e. that is
contained in @ref{25,,flycheck-checkers}.
@anchor{manual/glossary term-disabled-syntax-checker}@anchor{148}
@geindex disabled syntax checker

@item disabled syntax checker

A @ref{27,,syntax checker} explicitly excluded from available selection,
i.e. that is contained in @ref{26,,flycheck-disabled-checkers}.
@anchor{manual/glossary term-enabled-syntax-checker}@anchor{29}
@geindex enabled syntax checker

@item enabled syntax checker

A @ref{28,,registered syntax checker} which is not a @ref{148,,disabled syntax checker}.
@anchor{manual/glossary term-suitable-syntax-checker}@anchor{19}
@geindex suitable syntax checker

@item suitable syntax checker

A @ref{27,,syntax checker} which can be used to check the current buffer.
Precisely, a syntax checker which


@itemize -

@item 
which can be used for the current major mode,

@item 
and whose predicate succeeds,

@item 
and whose syntax checker tool exists.
@end itemize
@end table

@node Index,,Glossary,Top
@unnumbered Index


@printindex ge


@c %**end of body
@bye
