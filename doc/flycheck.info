This is flycheck.info, produced by makeinfo version 5.2 from
flycheck.texi.

     Flycheck 0.17-cvs, January 28, 2014

     Sebastian Wiesner

     Copyright © 2014, Sebastian Wiesner

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* flycheck: (flycheck.info). On the fly syntax checking (aka "flymake done right").
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.2.


File: flycheck.info,  Node: Top,  Next: Introduction,  Up: (dir)

Flycheck Documentation
**********************

     Flycheck 0.17-cvs, January 28, 2014

     Sebastian Wiesner

     Copyright © 2014, Sebastian Wiesner

This manual is for Flycheck, the on-the-fly syntax checker for GNU
Emacs.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section *note GNU Free Documentation License: 1.

     Alternatively, you may copy, distribute and/or modify this document
     under the terms of the Creative Commons Attribution-ShareAlike 4.0
     International Public License.  A copy of the license can be
     obtained at
     ‘https://creativecommons.org/licenses/by-sa/4.0/legalcode’.

* Menu:

* Introduction:: 
* Usage:: 
* Extending Flycheck:: 
* Flycheck API:: 
* Contributing:: 
* Credits:: 
* Changes:: 
* GNU Free Documentation License:: 
* Available syntax checkers:: 
* Glossary:: 
* Index:: 

 — The Detailed Node Listing —

Introduction

* Features:: 
* 3rd party extensions:: 
* Installation:: 

Usage

* Flycheck Mode:: 
* Syntax checking:: 
* Syntax checker selection:: 
* Syntax checker configuration:: 
* Error reporting:: 
* Error navigation:: 
* Mode line:: 

Syntax checker configuration

* Syntax checker executables:: 
* Syntax checker options:: 
* Syntax checker configuration files:: 

Extending Flycheck

* Defining new syntax checkers:: 
* Error levels:: 
* Error parsers:: 
* Option filters:: 
* Extending syntax checkers:: 
* Examples:: 

Examples

* Basic syntax checkers:: 
* Syntax checkers with predicates:: 
* Configuration files for syntax checkers:: 
* Chaining syntax checkers:: 

Flycheck API

* Error API:: 
* Error parser API:: 

Contributing

* Reporting issues:: 
* Contributing code:: 

Contributing code

* General:: 
* Code style:: 
* Commit messages:: 
* Contributing syntax checkers:: 
* Pull requests:: 

Changes

* master (unreleased): master unreleased. 
* 0.16 (Jan 11, 2014): 0 16 Jan 11 2014. 
* 0.15 (Nov 15, 2013): 0 15 Nov 15 2013. 
* 0.14.1 (Aug 16, 2013): 0 14 1 Aug 16 2013. 
* 0.14 (Aug 15, 2013): 0 14 Aug 15 2013. 
* 0.13 (Jun 28, 2013): 0 13 Jun 28 2013. 
* 0.12 (May 18, 2013): 0 12 May 18 2013. 
* 0.11 (May 01, 2013): 0 11 May 01 2013. 
* 0.10 (Apr 21, 2013): 0 10 Apr 21 2013. 
* 0.9 (Apr 13, 2013): 0 9 Apr 13 2013. 
* 0.8 (Apr 9, 2013): 0 8 Apr 9 2013. 
* 0.7.1 (Feb 23, 2013): 0 7 1 Feb 23 2013. 
* 0.7 (Feb 14, 2013): 0 7 Feb 14 2013. 
* 0.6.1 (Jan 30, 2013): 0 6 1 Jan 30 2013. 
* 0.6 (Jan 29, 2013): 0 6 Jan 29 2013. 
* 0.5 (Dec 28, 2012): 0 5 Dec 28 2012. 
* 0.4 (Nov 21, 2012): 0 4 Nov 21 2012. 
* 0.3 (Nov 21, 2012): 0 3 Nov 21 2012. 
* 0.2 (Oct 25, 2012): 0 2 Oct 25 2012. 
* 0.1 (Oct 11, 2012): 0 1 Oct 11 2012. 



File: flycheck.info,  Node: Introduction,  Next: Usage,  Prev: Top,  Up: Top

1 Introduction
**************

Flycheck (aka “Flymake done right”) is a modern on-the-fly syntax
checking extension for GNU Emacs 24 with

   - ready-to-use syntax checkers for a bunch of languages,

   - easy customization,

   - a comprehensive manual,

   - a dead simple, declarative API to create new syntax checkers,

   - major-mode based selection of syntax checkers,

   - multiple syntax checkers per buffer,

   - optional error list popup,

   - a “doesn’t get in your way” guarantee,

   - and a clean, concise and understandable implementation with decent
     test coverage.

* Menu:

* Features:: 
* 3rd party extensions:: 
* Installation:: 


File: flycheck.info,  Node: Features,  Next: 3rd party extensions,  Up: Introduction

1.1 Features
============

   - Automatic on-the-fly syntax checking while editing

   - Fully automatic selection of the syntax checker

   - Optional manual selection of a syntax checker with
     ‘flycheck-select-checker’ at ‘C-c ! s’

   - Built-in syntax checkers for:

        - AsciiDoc (using ‘asciidoc’)

        - C/C++ (using ‘clang’ and ‘cppcheck’)

        - CFEngine (using ‘cf-promises’)

        - Chef cookbooks (using ‘foodcritic’))

        - CoffeeScript (using ‘coffee’ and ‘coffeelint’)

        - CSS (using ‘csslint’))

        - D (using ‘dmd’)

        - Elixir (using ‘elixirc’)

        - Emacs Lisp (using the byte compiler and CheckDoc)

        - Erlang (using ‘erlc’)

        - ERuby (using ‘erubis’)

        - Go (using ‘gofmt’, ‘go build’ and ‘go test’)

        - Haml (using ‘haml’)

        - Handlebars (using ‘handlebars’)

        - Haskell (using ‘ghc’ and ‘hlint’)

        - HTML (using ‘tidy’)

        - Javascript (using ‘jshint’, ‘eslint’ and ‘gjslint’)

        - JSON (using ‘jsonlint’)

        - LESS (using ‘lessc’)

        - Lua (using ‘luac’)

        - Perl (using ‘perl’)

        - PHP (using ‘php’, ‘phpmd’ and ‘phpcs’)

        - Puppet (using ‘puppet parser’ and ‘puppet-lint’)

        - Python (using ‘flake8’ or ‘pylint’)

        - Racket

        - ReStructuredText (using ‘rst2pseudoxml.py’ from Docutils)

        - Ruby (using ‘rubocop’, ‘ruby’ , ‘jruby’ or ‘ruby-lint’)

        - Rust (using ‘rustc’)

        - Sass (using ‘sass’)

        - Scala (using ‘scalac’)

        - SCSS (using ‘scss’)

        - Shell scripts (using ‘bash’, ‘dash’, or ‘zsh’ depending on the
          type of shell script)

        - Slim (using ‘slimrb’)

        - TeX/LaTeX (using ‘chktex’ or ‘lacheck’)

        - Texinfo (using ‘makeinfo’)

        - Verilog (using ‘verilator’)

        - XML (using ‘xmlstarlet’ or ‘xmllint’)

        - YAML (using ‘js-yaml’ or ‘ruby’)

   - Nice error indication and highlighting

   - Easy customization

   - Syntax checker configuration with project-specific configuration
     files and options

   - Error navigation with ‘next-error’ and ‘previous-error’

   - Error list with ‘flycheck-list-errors’ at ‘C-c ! l’

   - Easy declarative API to define new syntax checkers

   - Error parsers for structured markup formats (e.g.  Checkdoc XML)


File: flycheck.info,  Node: 3rd party extensions,  Next: Installation,  Prev: Features,  Up: Introduction

1.2 3rd party extensions
========================

The following extensions provide additional cool features for Flycheck:

   - flycheck-cask(1) makes Flycheck use Cask packages in Cask(2)
     projects.

   - flycheck-color-mode-line(3) colors the mode line according to the
     Flycheck status.

   - flycheck-d-unittest(4) adds a Flycheck checker to run unit tests
     for D programs on the fly.

   - flycheck-hdevtools(5) adds a Flycheck syntax checker for Haskell
     based on hdevtools(6).

   - flycheck-haskell(7) improves Haskell support in Flycheck, by
     configuring Flycheck according to the current Cabal project, and
     using Cabal sandbox packages.

   - flycheck-mercury(8) adds a Flycheck syntax checker for the Mercury
     Language(9).

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck-cask

   (2) https://github.com/cask/cask

   (3) https://github.com/flycheck/flycheck-color-mode-line

   (4) https://github.com/flycheck/flycheck-d-unittest

   (5) https://github.com/flycheck/flycheck-hdevtools

   (6) https://github.com/bitc/hdevtools/

   (7) https://github.com/flycheck/flycheck-haskell

   (8) https://github.com/flycheck/flycheck-mercury

   (9) http://mercurylang.org/


File: flycheck.info,  Node: Installation,  Prev: 3rd party extensions,  Up: Introduction

1.3 Installation
================

Install the ELPA package from MELPA(1) or Marmalade(2) using ‘M-x
package-install RET flycheck’.  The former is the _recommended_
repository.

Neither of these repositories is included in GNU Emacs by default.  You
need to enable these repositories explicitly.  For instance, to add the
MELPA repository, add the following code to ‘init.el’:

     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.milkbox.net/packages/") t)
     (package-initialize)

If you use Cask(3), add the following to your ‘Cask’ file:

     (source gnu)
     (source melpa)

     (depends-on "flycheck")

Flycheck supports Emacs 24.  It is tested with Emacs 24.3, and Emacs
snapshot builds.  It should work with GNU Emacs 24.1 and 24.2 as well,
but it is not tested against these versions.  If it does not work with
these versions, please report an issue.

Flycheck does not support Windows, but tries to be compatible with it.
You may try to use Flycheck on Windows.  It should mostly work, but
expect problems and issues.  Pull requests which improve Windows
compatibility are welcome.

Flycheck also does not support GNU Emacs 23 and other flavors of Emacs
(e.g.  XEmacs, Aquamacs, etc.).  Don’t try, it will _not_ work.

Most checkers depend on external tools to perform the actual syntax
checking.  Use *note flycheck-describe-checker: 9. to get help about a
syntax checker and its dependencies.

   ---------- Footnotes ----------

   (1) http://melpa.milkbox.net

   (2) http://marmalade-repo.org/

   (3) https://github.com/cask/cask


File: flycheck.info,  Node: Usage,  Next: Extending Flycheck,  Prev: Introduction,  Up: Top

2 Usage
*******

* Menu:

* Flycheck Mode:: 
* Syntax checking:: 
* Syntax checker selection:: 
* Syntax checker configuration:: 
* Error reporting:: 
* Error navigation:: 
* Mode line:: 


File: flycheck.info,  Node: Flycheck Mode,  Next: Syntax checking,  Up: Usage

2.1 Flycheck Mode
=================

Syntax checking is done in the Flycheck minor mode:

 -- Command: M -x flycheck-mode

     Toggle Flycheck Mode for the current buffer.

 -- User Option: User Option flycheck-mode

     Whether Flycheck Mode is enabled in the current buffer.

 -- Command: M -x global-flycheck-mode

     Toggle Flycheck Mode for *all* live buffers, and for new buffers.

     With Global Flycheck Mode, Flycheck Mode is automatically enabled
     in all buffers, for which a *note suitable syntax checker: 12.
     exists and is enabled.

          Note: Flycheck Mode will *not* be enabled in buffers for
          remote or encrypted files.  The former is flaky and might be
          very slow, and the latter might leak confidential data to
          temporary directories.

          You can still explicitly enable Flycheck Mode in such buffers
          with *note flycheck-mode: f.  This is *not* recommended
          though.

 -- User Option: User Option global-flycheck-mode

     Whether Flycheck Mode is enabled globally.

If you like Flycheck Mode, you may want to enable it permanently, either
by customizing *note global-flycheck-mode: 13, or by adding the
following code to your ‘init.el’:

     (add-hook 'after-init-hook #'global-flycheck-mode)


File: flycheck.info,  Node: Syntax checking,  Next: Syntax checker selection,  Prev: Flycheck Mode,  Up: Usage

2.2 Syntax checking
===================

By default, *note Flycheck Mode: d. checks syntax automatically when

   - the mode is enabled,

   - the file is saved,

   - new lines are inserted,

   - or some short time after the last change to the buffer.

However, you can customize automatic syntax checking with *note
flycheck-check-syntax-automatically: 16.

 -- User Option: User Option flycheck-check-syntax-automatically

     When Flycheck should check syntax automatically.

     This variable is list of events that may trigger syntax checks.
     The following events are known:

     ‘mode-enabled’

          Check syntax immediately when ‘flycheck-mode’ is enabled.

     ‘save’

          Check syntax immediately after the buffer was saved.

     ‘new-line’

          Check syntax immediately after a new line was inserted into
          the buffer.

     ‘idle-change’

          Check syntax a short time after the last change to the buffer.

     An syntax check is only conducted for events that are contained in
     this list.  For instance, the following setting will cause Flycheck
     to _only_ check if the mode is enabled or the buffer was saved, but
     _never_ after changes to the buffer contents:

          (setq flycheck-check-syntax-automatically '(mode-enabled save))

     If the list is empty syntax is never checked automatically.  In
     this case, use *note flycheck-buffer: 17. to check syntax manually.

 -- User Option: User Option flycheck-idle-change-delay

     How many seconds to wait before starting a syntax check.

     After the buffer was changed, Flycheck waits as many seconds as the
     value of this variable before starting a syntax check.  If the
     buffer is changed during this time, Flycheck starts to wait again.

     This variable has no effect, if ‘idle-change’ is not contained in
     *note flycheck-check-syntax-automatically: 16.

Regardless of automatic syntax checking you can also check the buffer
manually:

 -- Command: C -c ! c
 -- Command: M -x flycheck-buffer

     Start a syntax check in the current buffer.

Each syntax check conducts the following steps:

  1. Run hooks in *note flycheck-before-syntax-check-hook: 19.

  2. Clear error information from previous syntax checks.

  3. Select a *note suitable syntax checker: 12.  See *note Syntax
     checker selection: 1a, for more information on how syntax checkers
     are selected.

  4. Copy the contents of the buffer to be checked to a temporary file.

  5. Run the syntax checker.

  6. Parse the output of the tool, and report all errors and warnings.
     See *note Error reporting: 1b, for more information.

  7. If the buffer can be checked with another syntax checker, continue
     from step 4, but with the next syntax checker.  This is called
     “chaining” of syntax checkers.

  8. Run hooks in *note flycheck-after-syntax-check-hook: 1c.

 -- Hook: Hook flycheck-after-syntax-check-hook

     Functions to run after each syntax check.

     This hook is run after a syntax check was finished.

     At this point, *all* chained checkers were run, and all errors were
     parsed, highlighted and reported.  See *note Error reporting: 1b,
     for more information about error reporting.  The variable *note
     flycheck-current-errors: 1d. contains all errors from all syntax
     checkers run during the syntax check, so you can use the various
     error analysis functions.

     Note that this hook does *not* run after each individual syntax
     checker in the syntax checker chain, but only after the *last
     checker*.

     This variable is a normal hook.  See *note (elisp)Hooks::.

 -- Hook: Hook flycheck-before-syntax-check-hook

     Functions to run before each syntax check.

     This hook is run right before a syntax check starts.

     Error information from the previous syntax check is *not* cleared
     before this hook runs.

     Note that this hook does *not* run before each individual syntax
     checker in the syntax checker chain, but only before the *first
     checker*.

     This variable is a normal hook.  See *note (elisp)Hooks::.

There is also a hook run whenever a syntax check fails:

 -- Hook: Hook flycheck-syntax-check-failed-hook

     Functions to run if a syntax check failed.

     This hook is run whenever an error occurs during Flycheck’s
     internal processing.  No information about the error is given to
     this hook.

     You should use this hook to conduct additional cleanup actions when
     Flycheck failed.

     This variable is a normal hook.  See *note (elisp)Hooks::.


File: flycheck.info,  Node: Syntax checker selection,  Next: Syntax checker configuration,  Prev: Syntax checking,  Up: Usage

2.3 Syntax checker selection
============================

By default Flycheck selects a *note suitable syntax checker: 12.
automatically from *note flycheck-checkers: 20, with respect to *note
flycheck-disabled-checkers: 21.:

 -- User Option: User Option flycheck-checkers

     A list of *note syntax checker: 22.s available for automatic syntax
     checker selection.  An item in this list is a *note registered
     syntax checker: 23.

     You may modify this list, but you should normally not need to.
     Instead, it is intended for 3rd party extensions to tell Flycheck
     about new syntax checkers.

 -- User Option: User Option flycheck-disabled-checkers

     A list of *note syntax checker: 22.s explicitly excluded from
     automatic selection.

     Change this list to disable syntax checkers which you do not want
     to use.  You may also use this option as a file or directory local
     variable to disable specific checkers in individual files and
     directories respectively.

A syntax checker in *note flycheck-checkers: 20. and *not* in *note
flycheck-disabled-checkers: 21. is an *note enabled syntax checker: 24.

Flycheck uses the first enabled and suitable syntax checker for the
current buffer.  See ‘Languages and syntax checkers’ for a list of all
available syntax checkers.

If no *note suitable syntax checker: 12. is found, the syntax check is
_silently_ omitted.  _No_ error is signalled.  Only a special indicator
in the mode line informs about the omitted syntax check.  See ‘Mode
line’ for details.

You can manually select a specific syntax checker for the current
buffer, too:

 -- Command: C -c ! s
 -- Command: M -x flycheck-select-checker

     Select the syntax checker for the current buffer by setting *note
     flycheck-checker: 26, and run a syntax check with the new syntax
     checker.

     Prompt for a syntax checker and set *note flycheck-checker: 26.

     Any *note syntax checker: 22. can be selected with this command,
     regardless of whether it is enabled.

 -- Command: C -u C-c ! s

 -- Command: C -u M-x flycheck-select-checker

     Deselect the current syntax checker, and run a syntax check with an
     automatically selected syntax checker.

     Set *note flycheck-checker: 26. to ‘nil’.

 -- Variable: Variable flycheck-checker

     The *note syntax checker: 22. to use for the current buffer.

     The variable is buffer local, and safe as file local variable for
     registered checkers.

     If set to ‘nil’, automatically select a suitable syntax checker.

     If set to a *note syntax checker: 22, only use this syntax checker.
     Automatic selection as described above is _disabled_.  If the
     syntax checker not suitable, signal an error.

     You may directly set this variable without *note
     flycheck-select-checker: 25, e.g.  via file local variables.  For
     instance, you can use the following file local variable within a
     Python file to always use ‘pylint’ for the file:

          # Local Variables:
          # flycheck-checker: python-pylint
          # End:

     See *note (emacs)Specifying File Variables:: for more information
     about file variables.

You can change the completion system used by *note
flycheck-select-checker: 25.:

 -- User Option: User Option flycheck-completion-system

     The completion system to use.

     ‘ido’

          Use IDO.

          IDO is a built-in alternative completion system, without good
          flex matching and a powerful UI. You may want to install
          flx-ido(1) to improve the flex matching in IDO.

     ‘grizzl’

          Use Grizzl(2).

          Grizzl is an alternative completion system with powerful flex
          matching, but a very limited UI.

     ‘nil’

          Use the standard unfancy ‘completing-read’.

          ‘completing-read’ has a very simple and primitive UI, and does
          not offer flex matching.  This is the default setting, though,
          to match Emacs’ defaults.  With this system, you may want
          enable ‘icomplete-mode’ to improve the display of completion
          candidates at least.

Each syntax checker provides documentation with information about the
executable the syntax checker uses, in which buffers it will be used for
syntax checks, and whether it can be configured.  See ‘Configuration’,
for more information about syntax checker configuration.

 -- Command: C -c ! ?
 -- Command: M -x flycheck-describe-checker

     Show the documentation of a syntax checker.

   ---------- Footnotes ----------

   (1) https://github.com/lewang/flx

   (2) https://github.com/d11wtq/grizzl


File: flycheck.info,  Node: Syntax checker configuration,  Next: Error reporting,  Prev: Syntax checker selection,  Up: Usage

2.4 Syntax checker configuration
================================

* Menu:

* Syntax checker executables:: 
* Syntax checker options:: 
* Syntax checker configuration files:: 


File: flycheck.info,  Node: Syntax checker executables,  Next: Syntax checker options,  Up: Syntax checker configuration

2.4.1 Syntax checker executables
--------------------------------

For each syntax checker, there is a buffer-local, customizable variable
‘flycheck-_checker_-executable’, where ‘_checker_’ is the name of the
syntax checker.

The value of this variable is either nil, or a string.  In the former
case, Flycheck uses the default executable from the syntax checker
definition when executing the syntax checker.  In the latter case, it
uses the value of the variable as executable.

Use these variables to override the executable from the definition per
buffer.  For instance, you could use a different Emacs version with the
‘emacs-lisp’ or ‘emacs-lisp-checkdoc’.

You can either set these variables directly in your ‘init.el’, or change
them interactively:

 -- Command: C -c ! e
 -- Command: M -x flycheck-set-checker-executable

     Set the executable of a syntax checker in the current buffer.

     Prompt for a syntax checker and an executable file, and set the
     executable variable of the syntax checker.

 -- Command: C -u C-c ! e

 -- Command: C -u M-x flycheck-set-checker-executable

     Reset the executable of a syntax checker in the current buffer.

     Prompt for a syntax checker and reset its executable to the
     default.


File: flycheck.info,  Node: Syntax checker options,  Next: Syntax checker configuration files,  Prev: Syntax checker executables,  Up: Syntax checker configuration

2.4.2 Syntax checker options
----------------------------

Some syntax checkers can be configured via options.  The following
options are provided by Flycheck (in Emacs, use ‘C-h v’ or ‘M-x
describe-variable’ on the variable name for detailed help):

 -- User Option: User Option flycheck-clang-definitions

     Additional preprocessor definitions for ‘c/c++-clang’.

 -- User Option: User Option flycheck-clang-include-path

     Include search path for ‘c/c++-clang’.

 -- User Option: User Option flycheck-clang-includes

     Additional include files for ‘c/c++-clang’.

 -- User Option: User Option flycheck-clang-language-standard

     The language standard for ‘c/c++-clang’.

 -- User Option: User Option flycheck-clang-ms-extensions

     Whether to enable Microsoft extensions in ‘c/c++-clang’.

 -- User Option: User Option flycheck-clang-no-rtti

     Whether to disable RTTI in ‘c/c++-clang’.

 -- User Option: User Option flycheck-clang-standard-library

     The standard library to use for ‘c/c++-clang’.

 -- User Option: User Option flycheck-clang-warnings

     Additional warnings to enable in ‘c/c++-clang’.

 -- User Option: User Option flycheck-cppcheck-checks

     Additional checks to use in ‘c/c++-cppcheck’.

 -- User Option: User Option flycheck-emacs-lisp-initialize-packages

     Whether to initialize packages (see ‘package-initialize’) before
     invoking the byte compiler in the ‘emacs-lisp’ syntax checker.

     When ‘nil’, never initialize packages.  When ‘auto’, initialize
     packages only when checking files from the user’s Emacs
     configuration in ‘user-emacs-directory’.  For any other non-nil
     value, always initialize packages.

 -- User Option: User Option flycheck-emacs-lisp-load-path

     The ‘load-path’ to use while checking with ‘emacs-lisp’.

     The directory of the file being checked is always added to
     ‘load-path’, regardless of the value of this variable.

     Note that changing this variable can lead to wrong results of the
     syntax check, e.g.  if an unexpected version of a required library
     is used.

 -- User Option: User Option flycheck-emacs-lisp-package-user-dir

     The package directory for the ‘emacs-lisp’ syntax checker.

 -- User Option: User Option flycheck-eslint-rulesdir

     A directory with custom rules for the ‘javascript-eslint’ syntax
     checker.

 -- User Option: User Option flycheck-flake8-maximum-complexity

     The maximum McCabe complexity the ‘python-flake8’ syntax checker
     allows without reporting a warning.

 -- User Option: User Option flycheck-flake8-maximum-line-length

     The maximum length of a line in characters the ‘python-flake8’
     syntax checker allows without reporting an error.

 -- User Option: User Option flycheck-ghc-no-user-package-database

     Whether to disable the user package database for ‘haskell-ghc’.

 -- User Option: User Option flycheck-ghc-package-databases

     A list of package database for ‘haskell-ghc’.

 -- User Option: User Option flycheck-ghc-search-path

     A list of module directories for the search path of ‘haskell-ghc’.

 -- User Option: User Option flycheck-phpcs-standard

     The coding standard ‘php-phpcs’ shall use.

 -- User Option: User Option flycheck-phpmd-rulesets

     The rule sets ‘php-phpmd’ shall use.

 -- User Option: User Option flycheck-rubocop-lint-only

     Whether to disable style checks for ‘ruby-rubocop’.

 -- User Option: User Option flycheck-sass-compass

     Whether to enable the Compass CSS framework for ‘sass’.

 -- User Option: User Option flycheck-scss-compass

     Whether to enable the Compass CSS framework for ‘scss’.

 -- User Option: User Option flycheck-sphinx-warn-on-missing-references

     Whether to warn about missing references in ‘rst-sphinx’


File: flycheck.info,  Node: Syntax checker configuration files,  Prev: Syntax checker options,  Up: Syntax checker configuration

2.4.3 Syntax checker configuration files
----------------------------------------

Some syntax checkers also read configuration files, denoted by
associated _configuration file variables_:

 -- User Option: User Option flycheck-chktexrc

     The configuration file for the ‘tex-chktex’ syntax checker.

 -- User Option: User Option flycheck-coffeelintrc

     The configuration file for the ‘coffee-coffeelint’ syntax checker.

 -- User Option: User Option flycheck-eslintrc

     The configuration file for the ‘javascript-eslint’ syntax checker.

 -- User Option: User Option flycheck-flake8rc

     The configuration file for the ‘python-flake8’ syntax checker.

 -- User Option: User Option flycheck-gjslintrc

     The configuration file for the ‘javascript-gjslint’ syntax checker.

 -- User Option: User Option flycheck-jshintrc

     The configuration file for the ‘javascript-jshint’ syntax checker.

 -- User Option: User Option flycheck-pylintrc

     The configuration file for the ‘python-pylint’ syntax checker.

 -- User Option: User Option flycheck-rubocoprc

     The configuration file for the ‘ruby-rubocop’ syntax checker.

 -- User Option: User Option flycheck-tidyrc

     The configuration file for the ‘html-tidy’ syntax checker.

The value of these variables is either a string or ‘nil’.  In the former
case, locate the configuration file using the functions in *note
flycheck-locate-config-file-functions: 52.:

 -- User Option: User Option flycheck-locate-config-file-functions

     Functions to locate syntax checker configuration files.

     Each function in this hook must accept two arguments: The value of
     the configuration file variable, and the syntax checker symbol.  It
     must return either a string with an absolute path to the
     configuration file, or nil, if it cannot locate the configuration
     file.

     The functions in this hook are called in order of appearance, until
     a function returns non-nil.  The configuration file returned by
     that function is then given to the syntax checker if it exists.

With the default value of this variable, configuration files are located
by the following algorithm:

  1. If the configuration file variable contains a path a directory
     separator, expand the path against the buffer’s default directory
     and use the resulting path as configuration file.

  2. If Projectile(1) is available and the current buffer is part of a
     project project, search the configuration file in the root
     directory of the project.

  3. If the buffer has a file name, search the buffer’s directory and
     any ancestors thereof for the configuration file.

  4. Eventually attempt to locate the configuration file in the user’s
     home directory.

If any of these steps succeeds, the subsequent steps are not executed.

If the configuration file is found, pass it to the syntax checker upon
invocation.

If the configuration file is not found, or if the value of the variable
is nil, invoke the syntax checker without a configuration file.

Customize these variables using ‘M-x customize-group RET
flycheck-config-files’.  Use ‘flycheck-describe-checker’ to find out
whether a syntax checker has a configuration file.

You may also use these variables as file-local variables.  For instance,
the following checks the Javascript file always with ‘.jshintrc’ from
the parent directory:

     // Local variables:
     // flycheck-jshintrc: "../.jshintrc"
     // End:

   ---------- Footnotes ----------

   (1) https://github.com/bbatsov/projectile


File: flycheck.info,  Node: Error reporting,  Next: Error navigation,  Prev: Syntax checker configuration,  Up: Usage

2.5 Error reporting
===================

Errors and warnings from a syntax checker are

   - reported in the mode line or in a popup buffer, depending on the
     length of the error messages,

   - indicated according to *note flycheck-indication-mode: 54,

   - and highlighted in the buffer with the corresponding faces,
     according to *note flycheck-highlighting-mode: 55.

 -- Face: Face flycheck-error
 -- Face: Face flycheck-warning
 -- Face: Face flycheck-info

     The faces to use to highlight errors, warnings and info messages
     respectively.

          Note: The default faces provided by GNU Emacs are ill-suited
          to highlight errors because these are relatively pale and do
          not specify a background color or underline.  Hence highlights
          are easily overlook and even *invisible* for white space.

     For best error highlighting customize these faces, or choose a
     color theme that has reasonable Flycheck faces.  For instance, the
     Solarized(1) and Zenburn(2) themes are known to have good Flycheck
     faces.

 -- User Option: User Option flycheck-highlighting-mode

     This variable determines how to highlight errors:

     ‘columns’

          Highlights the error column.  If the error does not have a
          column, highlight the whole line.

     ‘symbols’

          Highlights the symbol at the error column, if there is any,
          otherwise behave like @code{columns}.  This is the default.

     ‘sexps’

          Highlights the expression at the error column, if there is
          any, otherwise behave like ‘columns’.  Note that this mode can
          be *very* slow in some major modes.

     ‘lines’

          Highlights the whole line of the error.

     ‘nil’

          Do not highlight errors at all.  However, errors will still be
          reported in the mode line and in error message popups, and
          indicated according to *note flycheck-indication-mode: 54.

 -- Face: Face flycheck-fringe-error
 -- Face: Face flycheck-fringe-warning
 -- Face: Face flycheck-fringe-info

     The faces of fringe indicators for errors, warnings and info
     messages respectively.

 -- User Option: User Option flycheck-indication-mode

     This variable determines how to indicate errors:

     If set to ‘left-fringe’ or ‘right-fringe’, indicate errors and
     warnings in the left and right fringe respectively.

     If set to ‘nil’, do not indicate errors.  Errors will still be
     reported in the mode line and in error message popups, and
     highlighted according to *note flycheck-highlighting-mode: 55.

You can also completely customize error processing by hooking into
Flycheck:

 -- Hook: Hook flycheck-process-error-functions

     Functions to process errors.

     Each function in this hook must accept a single argument: The
     Flycheck error to process.  See *note Error API: 5d, for more
     information about Flycheck error objects.

     The functions in this hook are called in order of appearance, until
     a function returns non-nil.  Thus, a function in this hook may
     return nil, to allow for further processing of the error, or t, to
     indicate that the error was fully processed and inhibit any further
     processing.

You can also show a list with all errors in the current buffer:

 -- Command: C -c ! l
 -- Command: M -x flycheck-list-errors
 -- Command: M -x list-flycheck-errors

     List all errors in the current buffer in a separate buffer.

     The error list automatically refreshes after a syntax check, and
     follows the current buffer and window, that is, if you switch to
     another buffer or window, the error list is updated to show the
     errors of the new buffer or window.

If you hover a highlighted error with the mouse, a tooltip with the
top-most error message will be shown.

Flycheck also displays errors under point after a short delay:

 -- User Option: User Option flycheck-display-errors-delay

     Delay in seconds before displaying errors at point.

     Use floating point numbers to express fractions of seconds.

The error is displayed via *note flycheck-display-errors-function: 61.:

 -- User Option: User Option flycheck-display-errors-function

     A function to display errors under point.

     If set to a function, call the function with a list of all errors
     to show.  If set to nil, to not display errors at all.

     The default function is *note flycheck-display-error-messages: 62.

 -- Function: Function flycheck-display-error-messages errors

     Show the messages of the given ‘errors’ in the echo area, separated
     by empty lines.  If the error messages are too long for the echo
     area, show the error messages in a popup buffer instead.

     The Emacs Lisp function ‘display-message-or-buffer’ is used to show
     the messages.  Refer to the docstring of this function for details
     on when popup buffers are used, and how to customize its behaviour.

You can also work with the error messages at point, and copy them into
the kill ring or search them on Google:

 -- Command: C -c ! C-w
 -- Command: M -x flycheck-copy-messages-as-kill

     Copy all Flycheck error messages at the current point into kill
     ring.

 -- Command: C -c ! /
 -- Command: M -x flycheck-google-messages

     Google for all Flycheck error messages at the current point.

     If there are more than *note flycheck-google-max-messages: 65.
     errors at point, signal an error, to avoid spamming your browser
     with Google tabs.

     Requires the Google This(3) library, which is available on
     MELPA(4).

 -- User Option: User Option flycheck-google-max-messages

     The maximum number of error messages to Google at once.

     If set to an integer, *note flycheck-google-messages: 64. will
     refuse to search, when there are more error messages than the value
     of this variable at point.

     If set to ‘nil’, *note flycheck-google-messages: 64. will always
     search for *all* messages at point.  This setting is *not*
     recommended.

Ultimately, you can clear all reported errors at once:

 -- Command: C -c ! C
 -- Command: M -x flycheck-clear

     Clear all Flycheck errors and warnings in the current buffer.

     You should not normally need this command, because Flycheck checks
     the buffer periodically anyway.

   ---------- Footnotes ----------

   (1) https://github.com/bbatsov/solarized-emacs

   (2) https://github.com/bbatsov/zenburn-emacs

   (3) https://github.com/Bruce-Connor/emacs-google-this

   (4) http://melpa.milkbox.net/


File: flycheck.info,  Node: Error navigation,  Next: Mode line,  Prev: Error reporting,  Up: Usage

2.6 Error navigation
====================

Flycheck integrates into standard error navigation commands of Emacs.
If *no* compilation buffer (including those from ‘M-x compile’, ‘M-x
grep’, ‘M-x occur’, etc.)  is visible, ‘M-g n’ (‘next-error’) and ‘M-g
p’ (‘previous-error’) will navigate between Flycheck warnings and errors
in the current buffer.  See *note (emacs)Compilation Mode:: for more
information about these commands.

You can disable this integration by setting *note
flycheck-standard-error-navigation: 69. to nil:

 -- User Option: User Option flycheck-standard-error-navigation

     If non-nil, enable navigation of Flycheck errors with the standard
     ‘next-error’ and friends.

     Otherwise, do not integrate in standard error navigation, and let
     these functions only navigate compilation mode errors.

     Changes to this variable only take effect after re-enabling *note
     Flycheck Mode: d. with *note flycheck-mode: f. again.

Visible compilation buffers take precedence over Flycheck navigation.
If such a buffer is visible, ‘M-g n’ and ‘M-g p’ will ignore Flycheck
errors and warnings, and navigate errors (or generally results) reported
by the compilation buffer instead.

To address this issue, Flycheck provides independent error navigation
commands, which are not affected by *note
flycheck-standard-error-navigation: 69.:

 -- Command: C -c ! n
 -- Command: M -x flycheck-next-error

     Jump to the next Flycheck error.

     With prefix argument, jump forwards by as many errors as specified
     by the prefix argument, e.g.  ‘M-3 C-c ! n’ will move to the 3rd
     error from the current point.

 -- Command: C -c ! p
 -- Command: M -x flycheck-previous-error

     Jump to the previous Flycheck error.

     With prefix argument, jump backwards by as many errors as specified
     by the prefix argument, e.g.  ‘M-3 C-c ! p’ will move to the 3rd
     previous error from the current point.

 -- Command: M -x flycheck-first-error

     Jump to the first Flycheck error.

     With prefix argument, jump forwards to by as many errors as
     specified by the prefix argument, e.g.  ‘M-3 M-x
     flycheck-first-error’ moves to the 3rd error from the beginning of
     the buffer.


File: flycheck.info,  Node: Mode line,  Prev: Error navigation,  Up: Usage

2.7 Mode line
=============

Flycheck indicates its state in the mode line:

‘FlyC’

     There are no errors in the current buffer.

‘FlyC*’

     A syntax check is being performed currently.

‘FlyC:3/4’

     There are three errors and four warnings in the current buffer.

‘FlyC-’

     Automatic syntax checker selection did not find a suitable syntax
     checker.  See *note Syntax checker selection: 1a. for more
     information.

‘FlyC!’

     The syntax check failed.  Inspect the ‘*Messages*’ buffer for
     details.

‘FlyC?’

     The syntax check had a dubious result.  The definition of the
     syntax checker may be flawed.  Inspect the ‘*Messages*’ buffer for
     details.

     This indicator should *never* be displayed for built-in syntax
     checkers.  If it is, please report an issue to the Flycheck
     developers, as by *note Reporting issues: 6f.


File: flycheck.info,  Node: Extending Flycheck,  Next: Flycheck API,  Prev: Usage,  Up: Top

3 Extending Flycheck
********************

This chapter explains how to add new syntax checkers to Flycheck, and
provides examples for common use cases.

If you define a new syntax checker, _please_ contribute it to Flycheck
to make it available to other users, too.  See *note Contributing syntax
checkers: 72. for more information.

* Menu:

* Defining new syntax checkers:: 
* Error levels:: 
* Error parsers:: 
* Option filters:: 
* Extending syntax checkers:: 
* Examples:: 


File: flycheck.info,  Node: Defining new syntax checkers,  Next: Error levels,  Up: Extending Flycheck

3.1 Defining new syntax checkers
================================

You define new syntax checkers with *note flycheck-define-checker: 75.:

 -- Macro: Macro flycheck-define-checker symbol, docstring &rest,
          properties

     Define ‘symbol’ as new syntax checker with ‘docstring’ and
     ‘properties’.

     ‘docstring’ provides documentation for the syntax checker.  Use
     *note flycheck-describe-checker: 9. to view the documentation of a
     syntax checker.

     The following ‘properties’ constitute a syntax checker.  *note
     ;command: 76. is mandatory.  A syntax checker must also have either
     *note ;modes: 77. or *note ;predicate: 78, and either *note
     ;error-patterns: 79. or *note ;error-parser: 7a.  *note
     ;next-checkers: 7b. is entirely optional.

     If a mandatory property is missing, or if any property has an
     invalid value, a _compile-time_ error is signalled.

     Any syntax checker defined with this macro is eligible for manual
     syntax checker selection with *note flycheck-select-checker: 25.
     To make the new syntax checker available for automatic selection,
     you need to register it in *note flycheck-checkers: 20.  See *note
     Syntax checker selection: 1a. for more information.

      -- Syntax Checker Property: :command (_executable_ [_arg_ ...])

               An unquoted list describing the syntax checker command to
               execute.

               ‘_executable_’ must be a string with the executable of
               this syntax checker.

               A customizable, buffer-local variable
               ‘flycheck-_symbol_-executable’ is implicitly defined to
               allow overriding of the executable.  See *note Syntax
               checker executables: 2a. for details about these
               variables.  If this variable is non-nil, Flycheck uses
               the value of the variable as executable, otherwise it
               falls back to ‘_executable_’.  In either case, the
               executable is checked with ‘executable-find’ before use.

               Each ‘_arg_’ is an argument to the executable, either as
               string, or as one of the following special symbols and
               forms.

                    Note: These special forms and symbols do *not* apply
                    recursively.  Within the body of a cell or the
                    result of the ‘eval’ form, special forms and symbols
                    are *not* replaced!

          ‘source’

               The file to check.

               This file is a temporary file with the contents of the
               buffer to check, created in the system’s temporary
               directory.

               If the buffer to check has a file name, the non-directory
               component of the name of the temporary file will be the
               same as in the buffer’s file name, to support languages
               which enforce specific rules on the file name (e.g.  the
               file must be named after the containing feature, class,
               etc.).

               If the buffer to check has no file name, the name of the
               temporary file is random.

               This symbol is the *preferred* way to pass the input file
               to your syntax checker.

          ‘source-inplace’

               The file to check.

               This file is a temporary file with the contents of the
               buffer to check, created *in the same directory* as the
               buffer’s file.  The name of the file is random.

               If the buffer has no file name, this symbol is equivalent
               to ‘source’.

               This symbol should be used if and only if the syntax
               check *needs other files* from the source directory (e.g.
               include files in C, or Python modules).

          ‘source-original’

               The file name of the current buffer, as by
               ‘buffer-file-name’, or an empty string, if the buffer has
               no file name.

               This symbol is provided to *additionally* pass the real
               name of the file to check to a syntax checker.

               It should *never* be used as primary input to the syntax
               checker, unless both ‘source’ and ‘source-original’ are
               absolutely not applicable.  In this case, be sure to add
               a predicate to your syntax checker that inhibits the
               syntax check, if the buffer has no file name, or was
               modified, for otherwise the syntax check will fail or
               return out-dated errors:

                    :predicate (lambda () (and (buffer-file-name)
                                               (not (buffer-modified-p)))

          ‘temporary-directory’

               The path to an existing temporary directory, which is
               unique on each execution of the syntax checker.

               Use this symbol if you need to move files created by a
               syntax checker out of the way.

               See the declaration of the *note elixir: 7c. syntax
               checker for an application of this symbol.

          ‘temporary-file-name’

               The path to a temporary file, which is unique on each
               execution of the syntax checker.  The file is @emph{not}
               created automatically.

               Use this symbol if you need to move files created by a
               syntax checker out of the way.

               See the declaration of the @code{go-build} syntax checker
               for an application of this symbol.

          ‘(config-file _option_ _variable_)’

               A configuration file for this syntax checker.

               ‘_option_’ is a string containing the option that
               specifies a configuration file to the syntax checker
               tool.

               ‘_variable_’ is a symbol referring to a variable from
               which to obtain the name or path of the configuration
               file.  See *note Syntax checker configuration files: 48.
               for more information about syntax checker configuration.
               You need to define this variable _explicitly_ with *note
               flycheck-def-config-file-var: 7d.

               If the configuration file is found, pass the ‘_option_’
               and the absolute path to the configuration file to the
               syntax checker.  Otherwise the cell is simply dropped
               from the arguments of the syntax checker.

               If ‘_option_’ ends with a ‘=’ character, ‘_option_’ and
               the absolute path to the configuration file are
               concatenated and given as a single argument to the syntax
               checker.  Otherwise, ‘_option_’ and the configuration
               file path are given as two separate arguments.

          ‘(option _option_ _variable_ [_filter_])’

               The value of a variable.

               ‘_option_’ is a string containing the option for with to
               specify the value.  ‘_filter_’ is an optional function to
               be applied to the value of ‘_variable_’ before use.  See
               *note Option filters: 7e. for a list of built-in option
               filters.

               ‘_variable_’ is a symbol referring to a variable whose
               value to use.  :See ref:‘syntax-checker-configuration’
               for more information about :syntax checker configuration.
               You need to define this variable :_explicitly_ with *note
               flycheck-def-option-var: 7f.

               If ‘_variable_’ is not ‘nil’ after applying ‘_filter_’,
               pass ‘_option_’ and the value of ‘_variable_’ after
               applying ‘_filter_’.  Otherwise the cell is simply
               dropped from the arguments of the syntax checker.

               An ‘_option_’ ending with a ‘=’ character is treated like
               in a ‘config-file’ cell.

          ‘(option-list _option_ _variable_ [_prepend-fn_ [_filter_]])’

               Like ‘_option_’, but for lists of options.

               ‘_option_’ is a string containing the option to specify.

               ‘_variable_’ is a variable whose value must be a list.

               ‘prepend-fn’ is a function called with ‘_option_’ as
               first and the item of the list as second argument.  It
               should return the result of prepending ‘{option}’ to the
               item, either as list or as string.  If omitted, it
               defaults to ‘list’, so by default, ‘_option_’ will be
               prepended as a separate argument.

               ‘_filter_’ is an optional function to be applied to each
               item in the list before use.  See *note Option filters:
               7e. for a list of built-in option filters.

               For each item in the value of ‘_variable_’, which is not
               ‘nil’ after applying ‘_filter_’, pass ‘_option_’ the the
               item after applying ‘_filter_’, as returned by
               ‘_prepend-fn_’.

               Nil items are simply ignored.

          ‘(option-flag _option_ _variable_)’

               Like ‘option’, but for boolean flags.

               ‘_option_’ is a string containing the option to specify.
               ‘_variable_’ is a symbol referring to a variable.

               If ‘_variable_’ is non-nil, pass ‘_option_’ to the syntax
               checker.  Otherwise just ignore this argument.

          ‘(eval _form_)’

               The result of evaluating ‘form’.

               ‘form’ is an arbitrary Emacs Lisp form.  It is evaluated
               literally _each time_ the syntax checker is executed.
               Special forms and symbols in ‘form’ are _not_ replaced!

               ‘form’ must evaluate either to a string, a list of
               strings or nil.  For any other result, signal an error.

               If the result of ‘form’ is not nil, pass the result to
               the syntax checker _literally_.  Special symbols and
               forms in the result of ‘form’ are _not_ replaced.

      -- Syntax Checker Property: :error -patterns ((_level_ _sexp_)
               ...)

          An unquoted list of one or more error patterns to parse the
          output of the syntax checker *note ;command: 76.

          ‘_level_’ is a Flycheck error level, and denotes the severity
          of errors matched by the pattern.  This mainly affects the
          visual representation of matched errors in buffers.

          Flycheck provides the built-in error levels ‘error’, ‘warning’
          and ‘info’.  You can define your own error levels with *note
          flycheck-define-error-level: 80.

          The ‘_level_’ is followed by one or more ‘rx’ ‘_sexp_’
          elements.  See the docstring of the function ‘rx’ for more
          information.  In addition to the standard forms of ‘rx’,
          Flycheck supports the following additional forms to make
          specific parts of the error output available to Flycheck:

          ‘line’

               Matches the line number the error refers to, as a
               sequence of one or more digits.

          ‘column’

               Matches a column number the error refers to, as a
               sequence of one or more digits.

          ‘(file-name _sexp_ ...)’

               Matches the file name the error refers to.  ‘_sexp_’
               matches the name of the file.  If no ‘_sexp_’ is given,
               use a default body of ‘(minimal-match (one-or-more
               not-newline))’, which is equivalent to ‘".+?"’.

          ‘(message _sexp_ ...)’

               Matches the error message to be shown to the user.
               ‘_sexp_’ matches the text of the message.  If no ‘_sexp_’
               is given, use a default body of ‘(one-or-more
               not-newline)’, which is equivalent to ‘".+"’.

          Each of these items is optional, however error messages
          without a ‘line’ will be ignored and are not shown in the
          buffer.

          The patterns are applied in the order of declaration to the
          whole output of the syntax checker.  Output already matched by
          a pattern will not be matched by subsequent patterns.  In
          other words, the first pattern wins.

      -- Syntax Checker Property: :error -parser _function_

      -- Syntax Checker Property: :error -parser (lambda (output checker
               buffer) _body_ ...)

          A function to parse the output of the syntax checker, either
          as _unquoted_ function symbol or ‘lambda’ form.

          The function must accept three arguments ‘output’, ‘checker’
          and ‘buffer’, where ‘output’ is the output of the syntax
          checker as string, ‘checker’ the syntax checker that was used,
          and ‘buffer’ a buffer object representing the checker buffer.

          The function must return a list of *note flycheck-error: 81.
          objects parsed from ‘output’.  See *note Error API: 5d. for
          information about *note flycheck-error: 81.  See *note Error
          parsers: 82. for a list of built-in error parsers.

          If this property is given, it takes precedence over *note
          ;error-patterns: 79.  To use an error parser together with
          patterns, you must manually call *note
          flycheck-parse-with-patterns: 83. in your error parser to
          apply the error patterns.  You can then manipulate the *note
          flycheck-error: 81. objects returned by this function.

      -- Syntax Checker Property: :modes _mode_

      -- Syntax Checker Property: :modes (_mode_ ...)

          An unquoted major mode symbol or an unquoted list thereof.

          If given, this syntax checker is only used, if the major mode
          of the buffer to check is equal (as in ‘eq’) to any given
          ‘_mode_’.

          If *note ;predicate: 78. is given, it is additionally called
          in buffers of any given ‘_mode_’.

      -- Syntax Checker Property: :predicate _function_

      -- Syntax Checker Property: :predicate (lambda () _body_ ...)

          A function to determines whether to use this syntax checker in
          the current buffer, either as unquoted function symbol or as
          ‘lambda’ form.  The syntax checker is only used if this
          function returns non-nil when called in the buffer to check.

          If *note ;modes: 77. is given, the function is only called in
          matching major modes.  Thus, if *note ;modes: 77. and *note
          ;predicate: 78. are given, *both* must match for this syntax
          checker to be used.

      -- Syntax Checker Property: :next -checkers (_item_ ...)

          An unquoted list defining the syntax checker to run after this
          checker.

          Flycheck tries all items in the order of declaration.  Each
          ‘_item_’ is either a syntax checker symbol or a cons cell
          ‘(_predicate_ . _checker_)’.

          In the former case, the ‘_item_’ is used, if the syntax
          checker is enabled and suitable for the current buffer.  In
          the latter case, the ‘_predicate_’ must match additionally.

          ‘_predicate_’ is either ‘no-errors’ or ‘warnings-only’:

          ‘no-errors’

               The syntax ‘_checker_’ is only considered if the current
               syntax checker reported no errors at all.

          ‘warnings-only’

               The syntax ‘_checker_’ is only considered if the current
               syntax checker only reported warnings, but no errors.

 -- Macro: Macro flycheck-def-config-file-var symbol, checker &optional,
          filename

     Define ‘symbol’ as configuration file variable for a syntax
     ‘checker’, with a default value of ‘filename’.

     ‘symbol’ is declared as customizable, buffer-local variable using
     ‘defcustom’, to provide a configuration file for the given syntax
     ‘checker’.  The variable has the customization type ‘string’, and
     gets a comprehensive docstring, including a reference to ‘checker’.

     ‘filename’ is used as initial value for the variable.  If omitted,
     the initial value is nil.

     Use this macro together with the ‘config-file’ form in the *note
     ;command: 76. of a syntax checker.

 -- Macro: Macro flycheck-def-option-var symbol, initial-value, checker
          &optional, custom-args

     Define ‘symbol’ as option variable for a syntax ‘checker’, with the
     given ‘initial-value’.

     ‘symbol’ is declared as customizable variable, buffer-local
     variable using ‘defcustom’, to provide an option for the given
     syntax ‘checker’.  ‘symbol’ gets a comprehensive docstring,
     including a reference to ‘checker’.

     ‘custom-args’ are forwarded to ‘defcustom’.  Use them to declare
     the customization type, etc.

     Use this macro together with the ‘option’, ‘option-list’ and
     ‘option-flag’ forms in the *note ;command: 76. of a syntax checker.


File: flycheck.info,  Node: Error levels,  Next: Error parsers,  Prev: Defining new syntax checkers,  Up: Extending Flycheck

3.2 Error levels
================

Flycheck provides some built-in error levels:

‘error’

     Severe errors which cannot be ignored

‘warning’

     Potential errors which can be ignored

‘info’

     Informational annotations

You can define new error levels with *note flycheck-define-error-level:
80.:

 -- Function: Function flycheck-define-error-level level &rest,
          properties

     Define a new error ‘level’ with ‘properties’.

     The following ‘properties’ constitute an error level:

     ‘:overlay-category _category_’

          The overlay ‘_category_’ for ‘level’ as symbol.

          An overlay category is a symbol whose properties provide the
          default values for overlays of this category.  See *note
          (elisp)Overlay Properties:: for more information about overlay
          properties and categories.

          A category for an error level overlay should at least define
          the ‘face’ property, for error highlighting.  Other useful
          properties for error level categories are ‘priority’ to
          influence the stacking of multiple error level overlays, and
          ‘help-echo’ to define a default error messages for errors
          without messages.

     ‘:fringe-face _face_’

          A face to use for fringe indicators for ‘level’ as symbol.

     ‘:fringe-bitmap _bitmap_’

          A fringe bitmap to use for fringe indicators for ‘level’ as
          symbol.

          See *note (elisp)Fringe Bitmaps:: for a list of built-in
          fringe bitmaps, and instructions on how to define new bitmaps.


File: flycheck.info,  Node: Error parsers,  Next: Option filters,  Prev: Error levels,  Up: Extending Flycheck

3.3 Error parsers
=================

Syntax checkers may use more sophisticated error parsing by using the
*note ;error-parser: 7a. property.  See *note Defining new syntax
checkers: 73. for information about syntax checker definition.

Flycheck provides the following error parsers for use by syntax
checkers:

 -- Function: Function flycheck-parse-with-patterns output, checker,
          buffer

     Parse ‘output’ with the *note ;error-patterns: 79. of the syntax
     ‘checker’.

 -- Function: Function flycheck-parse-checkstyle output, checker, buffer

     Parse ‘output’ as Checkstyle(1) XML.

You may also define your own error parsers.  An error parser is any
function that takes the following three arguments and returns a list of
*note flycheck-error: 81. objects (see *note Error API: 5d. for more
information):

‘output’

     The complete output of the syntax checker as string.

‘checker’

     A symbol denoting the executed syntax checker.

‘buffer’

     A buffer object referring to the buffer that was syntax-checked.

Flycheck provides some utility functions to implement your own error
parsers.  See *note Error parser API: 88.

   ---------- Footnotes ----------

   (1) http://checkstyle.sourceforge.net/


File: flycheck.info,  Node: Option filters,  Next: Extending syntax checkers,  Prev: Error parsers,  Up: Extending Flycheck

3.4 Option filters
==================

Flycheck provides the following built-in option filters for use with the
‘option’, ‘option-list’ and ‘option-flag’ forms in the *note ;command:
76. of a syntax checker definition:

 -- Function: Function flycheck-option-int value

     Like the built-in ‘number-to-string’, but returns ‘nil’ when
     ‘value’ is ‘nil’.

 -- Function: Function flycheck-option-comma-separated-list value
          &optional, separator, filter

     Convert ‘value’ into a list separated by ‘separator’.  ‘filter’ is
     an optional function to apply to each item in ‘value’ first.


File: flycheck.info,  Node: Extending syntax checkers,  Next: Examples,  Prev: Option filters,  Up: Extending Flycheck

3.5 Extending syntax checkers
=============================

There are some means to extend defined syntax checkers:

 -- Function: Function flycheck-add-next-checker checker, next-checker
          &optional, append

     Add a ‘next-checker’ to run after ‘checker’.

     ‘checker’ is a syntax checker symbol.  ‘next-checker’ is either a
     syntax checker symbol or a cons cell in the format of a single
     entry to the *note ;next-checkers: 7b. property.

     ‘next-checker’ is prepended before other checkers to run after
     ‘checker’, unless ‘append’ is non-nil.


File: flycheck.info,  Node: Examples,  Prev: Extending syntax checkers,  Up: Extending Flycheck

3.6 Examples
============

* Menu:

* Basic syntax checkers:: 
* Syntax checkers with predicates:: 
* Configuration files for syntax checkers:: 
* Chaining syntax checkers:: 


File: flycheck.info,  Node: Basic syntax checkers,  Next: Syntax checkers with predicates,  Up: Examples

3.6.1 Basic syntax checkers
---------------------------

As explained in the previous chapter *note Defining new syntax checkers:
73, a syntax checker is declared with *note flycheck-define-checker: 75.

We will use this function to define a syntax checker using the PHP
CodeSniffer utility for the PHP programming language:

     (flycheck-define-checker php-phpcs
       "A PHP syntax checker using PHP_CodeSniffer.

     See URL `http://pear.php.net/package/PHP_CodeSniffer/'."
       :command ("phpcs" "--report=checkstyle" source)
       :error-parser flycheck-parse-checkstyle
       :modes php-mode)

First we specify the *note ;command: 76. to execute.  The first element
of the command list is the name of the executable, ‘phpcs’ in our case.
This command is checked for existence with ‘executable-find’ before
using this syntax checker.  If the command does not exist, the syntax
checker is _not_ used.

The executable is following by the arguments, in this case some options
and the symbol ‘source’.  This symbol is replaced with the file to
check.  This file is a temporary file created in the system temporary
directory and containing the contents of the buffer to check.

Next we specify how to parse the output of the syntax checker.  PHP
CodeSniffer provides an option to output errors in an XML format similar
to the Java tool Checkstyle, so we use the built-in _error parser_ *note
flycheck-parse-checkstyle: 87. to parse the output.

Eventually we enable the syntax checker in PHP editing modes.

If the syntax checker does not provide any sort of structured output
format, we have to parse the error messages from the textual output.  To
do so, we can use _error patterns_, like in the Pylint syntax checker
for the Python programming language:

     (flycheck-define-checker python-pylint
       "A Python syntax and style checker using Pylint.

     See URL `http://pypi.python.org/pypi/pylint'."
       :command ("epylint" source-inplace)
       :error-patterns
       ((warning line-start (file-name) ":" line
                 ": Warning (W" (zero-or-more not-newline) "): "
                 (message) line-end)
        (error line-start (file-name) ":" line
               ": Error (E" (zero-or-more not-newline) "): "
               (message) line-end)
        (error line-start (file-name) ":" line ": [F] " (message) line-end))
       :modes python-mode)

Again, there is a *note ;command: 76, however we use the
‘source-inplace’ symbol this time.  This symbol causes the temporary
file to be created in the same directory as the original file, making
information from the source code tree available to the syntax checker.
In case of Pylint, these are the Python packages from the source code
tree.

Next we give the list of *note ;error-patterns: 79. to parse errors.
These patterns extract the error location and the error message from the
output of ‘epylint’.  An error pattern is a list containing a regular
expression with match groups to extract the error information, and an
error level.

Eventually we enable the syntax checker in ‘python-mode’.


File: flycheck.info,  Node: Syntax checkers with predicates,  Next: Configuration files for syntax checkers,  Prev: Basic syntax checkers,  Up: Examples

3.6.2 Syntax checkers with predicates
-------------------------------------

In the previous examples the syntax checkers were specific to certain
major modes.  However, this is not always the case.  For instance, GNU
Emacs provides a single mode only for shell scripting in various Shell
languages.  A syntax checker for a specific shell must check whether the
edited shell script is written for the right shell:

     (flycheck-define-checker zsh
       "A Zsh syntax checker using the Zsh shell.

     See URL `http://www.zsh.org/'."
       :command ("zsh" "-n" "-d" "-f" source)
       :error-patterns
       ((error line-start (file-name) ":" line ": " (message) line-end))
       :modes sh-mode
       :predicate (lambda () (eq sh-shell 'zsh)))

This syntax checker for the Zsh shell is enabled in ‘sh-mode’ as
specified by *note ;modes: 77, however it specifies an additional *note
;predicate: 78. to determine whether the right shell is in use.  Hence
this syntax checker is only used if a Zsh shell scripting is being
edited in ‘sh-mode’, but not if a Bash or POSIX Shell script is being
edited.

A syntax checker may even go as far as not having *note ;modes: 77. at
all.  For instance, there is no special JSON mode, but syntax checking
JSON is still desirable.  Hence a JSON syntax checker may use the *note
;predicate: 78. to check the file extension:

     (flycheck-define-checker json-jsonlint
       "A JSON syntax and style checker using jsonlint.

     See URL `https://github.com/zaach/jsonlint'."
       :command ("jsonlint" "-c" "-q" source)
       :error-patterns
       ((error line-start
               (file-name)
               ": line " line
               ", col " column ", "
               (message) line-end))
       :predicate
       (lambda ()
         (or
          (eq major-mode 'json-mode)
          (and buffer-file-name
               (string= "json" (file-name-extension buffer-file-name))))))

This syntax checker is now used whenever a file ends with ‘.json’,
regardless of the major mode.


File: flycheck.info,  Node: Configuration files for syntax checkers,  Next: Chaining syntax checkers,  Prev: Syntax checkers with predicates,  Up: Examples

3.6.3 Configuration files for syntax checkers
---------------------------------------------

Some syntax checkers can be configured using configuration files given
by an option.  Flycheck provides built-in support to handle such
configuration files:

     (flycheck-def-config-file-var flycheck-jshintrc javascript-jshint ".jshintrc")

     (flycheck-define-checker javascript-jshint
       "A JavaScript syntax and style checker using jshint.

     See URL `http://www.jshint.com'."
       :command ("jshint" "--checkstyle-reporter"
                 (config-file "--config" flycheck-jshintrc) source)
       :error-parser flycheck-parse-checkstyle
       :modes (js-mode js2-mode js3-mode))

As you can see, we define a syntax checker for Javascript, using the
‘jshint’ utility.  This utility accepts a configuration file via the
‘--config’ option.

To use a configuration file with jshint, we first declare the variable
‘flycheck-jshintrc’ that provides the name of the file, as explained in
*note Syntax checker configuration files: 48.

In the *note ;command: 76. we use a ‘config-file’ form to pass the
configuration file to the syntax checker.  If the configuration file is
found, its path will be passed to the syntax checker, using the option
specified after the ‘config-file’ symbol.  Otherwise the whole element
is simply omitted from the command line.

Some Syntax checkers can also be configured using options passed on the
command line.  Flycheck supports this case, too.  We will use this
facility to extend the PHP CodeSniffer syntax checker from the *note
Basic syntax checkers: 91. section with support for coding standards:

     (flycheck-def-option-var flycheck-phpcs-standard nil phpcs
       "The coding standard for PHP CodeSniffer."
       :type '(choice (const :tag "Default standard" nil)
                      (string :tag "Standard name" nil)))
     (put 'flycheck-phpcs-standard 'safe-local-variable #'stringp)

     (flycheck-declare-checker php-phpcs
       "A PHP syntax checker using PHP_CodeSniffer."
       :command '("phpcs" "--report=checkstyle"
                  (option "--standard=" flycheck-phpcs-standard)
                  source)
       :error-parser 'flycheck-parse-checkstyle
       :modes 'php-mode)

The syntax checker is pretty much the same as before, except that a new
element was added to *note ;command: 76.  This element passes the value
of the new option variable *note flycheck-phpcs-standard: 41. to the
syntax checker.  This variable is declared with the special macro *note
flycheck-def-option-var: 7f. at the beginning.


File: flycheck.info,  Node: Chaining syntax checkers,  Prev: Configuration files for syntax checkers,  Up: Examples

3.6.4 Chaining syntax checkers
------------------------------

For many languages, more than a single syntax checker is applicable.
For instance, Emacs Lisp can be checked for syntactic corrections with
the byte code compiler, and for adherence to the Emacs Lisp
documentation style using Checkdoc.  PHP, too, can be syntax checked
with the PHP parser, and verified against coding styles using PHP
CodeSniffer.

To support such cases, syntax checkers can be _chained_ using the *note
;next-checkers: 7b.  The standard PHP syntax checker uses this to run
PHP CodeSniffer if there are no syntax errors:

     (flycheck-define-checker php
       "A PHP syntax checker using the PHP command line interpreter.

     See URL `http://php.net/manual/en/features.commandline.php'."
       :command ("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
                 "-d" "log_errors=0" source)
       :error-patterns
       ((error line-start (or "Parse" "Fatal" "syntax") " error" (any ":" ",") " "
               (message) " in " (file-name) " on line " line line-end))
       :modes (php-mode php+-mode)
       :next-checkers ((warnings-only . php-phpcs)))

Now PHP CodeSniffer will check the coding style, whenever a PHP syntax
check did not result in any errors, if PHP CodeSniffer syntax checker is
usable _and_ registered.


File: flycheck.info,  Node: Flycheck API,  Next: Contributing,  Prev: Extending Flycheck,  Up: Top

4 Flycheck API
**************

This chapter provides a brief overview over the Flycheck API.

You may use this API to extend Flycheck, e.g.  by implementing new error
parsers or more in-depth error analysis.  You will also find this API
helpful if you want to develop Flycheck itself.

The documentation provided in this chapter is intended as brief
overview.  For a definite reference on functions and variables, please
consult the excellent online help system of Emcas, via
‘describe-function’ and ‘describe-variable’ respectively.

* Menu:

* Error API:: 
* Error parser API:: 


File: flycheck.info,  Node: Error API,  Next: Error parser API,  Up: Flycheck API

4.1 Error API
=============

Flycheck errors are represented by the CL structure *note
flycheck-error: 81.  See *note (cl)Structures:: for more information
about CL structures.

 -- CL Struct: Cl Struct flycheck-error

     A Flycheck error with the following slots.  Each of these slots may
     be ‘nil’.

      -- Slot: Slot buffer

          The buffer object referring to the buffer this error belongs
          to.

               Note: You do not need to set this attribute when creating
               errors in an error parser.  Flycheck automatically keeps
               track of the buffer itself.

      -- Slot: Slot checker

          The syntax checker that reported this error.

      -- Slot: Slot filename

          A string containing the filename the error refers to.

      -- Slot: Slot line

          An integer providing the line the error refers to.

      -- Slot: Slot column

          An integer providing the column the error refers to.

          If this attribute is ‘nil’, Flycheck will assume that the
          error refers to the whole line.

      -- Slot: Slot message

          The human-readable error message as string.

      -- Slot: Slot level

          The error level of the message, as symbol denoting an error
          level defined with *note flycheck-define-error-level: 80.

     There are two constructors to create new *note flycheck-error: 81.
     objects:

      -- Function: Function flycheck-error-new-at line, column
               &optional, level, message &key, , , , , , , , , , , , , ,
               , checker, filename, buffer

          Create a new Flycheck error at the given ‘line’ and ‘column’.

          ‘line’ and ‘column’ refer to the *note line: 9b. and *note
          column: 9c. of the new error.  The optional ‘level’ and
          ‘message’ arguments fill the *note level: 9e. and *note
          message: 9d. slots respectively.

          ‘checker’, ‘filename’ and ‘buffer’ are keyword arguments, for
          *note checker: 99, *note filename: 9a. and *note buffer: 98.
          respectively.  ‘buffer’ defaults to the current buffer, the
          other two default to ‘nil’.

               Warning: Due to a limitation of Common Lisp functions in
               Emacs Lisp, you must specify *all* optional arguments,
               that is, *both* ‘level’ *and* ‘message’, to pass any
               keyword arguments.

      -- Function: Function flycheck-error-new &restattributes

          Create a new *note flycheck-error: 81. with the given
          ‘attributes’.

          ‘attributes’ is a property list, where each property specifies
          the value for the corresponding slot of *note flycheck-error:
          81, for instance:

               (flycheck-error-new :line 10 :column 5 :message "Foo" :level 'warning)

     The following functions and macros work on errors:

      -- Macro: Macro flycheck-error-with-buffer error &rest, forms

          Evaluate ‘forms’ with the *note buffer: 98. of the given
          ‘error’ as the current buffer.

          If the buffer is not live, ‘forms’ are *not* evaluated.

      -- Function: Function flycheck-error-line-region error

          Get the region marking the whole *note line: 9b. of the given
          ‘error’, as a cons cell ‘(_beg_ . _end_)’.

      -- Function: Function flycheck-error-column-region error

          Get the region marking the *note column: 9c. of the given
          ‘error’, as cons cell ‘(_beg_ . _end_)’.

          If the *note column: 9c. of ‘error’ is ‘nil’, return ‘nil’
          instead.

      -- Function: Function flycheck-error-sexp-region error

          Get the region marking the expression around the *note column:
          9c. of the ‘error’, as cons cell ‘(_beg_ . _end_)’.

          If the *note column: 9c. of ‘error’ is ‘nil’, or if there is
          no expression around this column, return ‘nil’ instead.

               Warning: Flycheck relies on the major mode to parse the
               expression around the column.  As such, the major mode
               must implement support for this feature.

               Some major modes, especially from 3rd party packages, do
               not support this feature at all, or only very poorly.
               Others (for instance ‘python-mode’) exhibit serious
               performance drops in some cases.

               Use this function with care, and at best only in major
               modes which are known to have good support for this
               feature.

      -- Function: Function flycheck-error-pos error

          Get the exact buffer position of ‘error’.

          Essentially this is the position of the *note column: 9c. of
          ‘error’, if it is not ‘nil’, or the position of the first
          non-whitespace character on the *note line: 9b. of ‘error’
          otherwise.  @end defun

      -- Function: Function flycheck-error-format error

          Format ‘error’ as a human-readable string.

The following functions and variables may be used to analyze the errors
of a syntax check.

 -- Variable: Variable flycheck-current-errors

     This buffer-local variable stores the errors of the last syntax
     check, sorted by line and column number.

 -- Function: Function flycheck-count-errors errors

     Count the number of errors and warnings in ‘errors’.

     Return a cons cell ‘(_no-errors_ . _no-warnings_)’.

 -- Function: Function flycheck-has-errors-p errors &optional, level

     Determine if there are any ‘errors’ with the given ‘level’.

     If ‘level’ is omitted, determine whether ‘errors’ is not nil.
     Otherwise determine whether there are any errors whose level is
     equal to the given ‘level’.


File: flycheck.info,  Node: Error parser API,  Prev: Error API,  Up: Flycheck API

4.2 Error parser API
====================

These functions can be used to implement custom error parsers:

 -- Function: Function flycheck-parse-xml-string s

     Parse a string ‘s’ containing XML and return the parsed document
     tree.


File: flycheck.info,  Node: Contributing,  Next: Credits,  Prev: Flycheck API,  Up: Top

5 Contributing
**************

If you discovered bugs and issues, have ideas for improvements or new
features, or want to contribute a new syntax checker, please report to
the issue tracker(1) the repository and send a pull request, but respect
the following guidelines.

* Menu:

* Reporting issues:: 
* Contributing code:: 

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues


File: flycheck.info,  Node: Reporting issues,  Next: Contributing code,  Up: Contributing

5.1 Reporting issues
====================

   - Check that the issue has not already been reported.

   - Check that the issue has not already been fixed in the latest code.

   - Be clear and precise (do not prose, but name functions and commands
     exactly).

   - Include the version of Flycheck as shown by ‘M-x flycheck-version’.

   - Open an issue with a clear title and description in grammatically
     correct, complete sentences.


File: flycheck.info,  Node: Contributing code,  Prev: Reporting issues,  Up: Contributing

5.2 Contributing code
=====================

Contributions of code, either as pull requests or as patches, are _very_
welcome, but please respect the following guidelines.

* Menu:

* General:: 
* Code style:: 
* Commit messages:: 
* Contributing syntax checkers:: 
* Pull requests:: 


File: flycheck.info,  Node: General,  Next: Code style,  Up: Contributing code

5.2.1 General
-------------

   - Write good and _complete_ code.

   - Provide use cases and rationale for new features.


File: flycheck.info,  Node: Code style,  Next: Commit messages,  Prev: General,  Up: Contributing code

5.2.2 Code style
----------------

   - Generally, use the same coding style and spacing.

   - Do not use tabs for indentation.

   - Add docstrings for every declaration.

   - Make sure your code compiles without warnings with ‘make compile’,
     and has no checkdoc issues with ‘M-x checkdoc-buffer’ or ‘C-c ? d’.
     If you are using Flycheck, just make sure that your code has no
     Flycheck warnings.


File: flycheck.info,  Node: Commit messages,  Next: Contributing syntax checkers,  Prev: Code style,  Up: Contributing code

5.2.3 Commit messages
---------------------

Write commit messages according to Tim Pope’s guidelines(1).  In short:

   - Start with a capitalized, short (50 characters or less) summary,
     followed by a blank line.

   - If necessary, add one or more paragraphs with details, wrapped at
     72 characters.

   - Use present tense and write in the imperative: “Fix bug”, not
     “fixed bug” or “fixes bug”.

   - Separate paragraphs by blank lines.

   - Do _not_ use special markup (e.g.  Markdown).  Commit messages are
     plain text.  You may use ‘*emphasis*’ or ‘_underline_’ though,
     following conventions established on mailing lists.

This is a model commit message:

     Capitalized, short (50 chars or less) summary

     More detailed explanatory text, if necessary.  Wrap it to about 72
     characters or so.  In some contexts, the first line is treated as the
     subject of an email and the rest of the text as the body.  The blank
     line separating the summary from the body is critical (unless you omit
     the body entirely); tools like rebase can get confused if you run the
     two together.

     Write your commit message in the imperative: "Fix bug" and not "Fixed bug"
     or "Fixes bug."  This convention matches up with commit messages generated
     by commands like git merge and git revert.

     Further paragraphs come after blank lines.

     - Bullet points are okay, too

     - Typically a hyphen or asterisk is used for the bullet, followed by a
       single space, with blank lines in between, but conventions vary here

     - Use a hanging indent

Git Commit Mode(2) and Magit(3) provide a major mode for Git commit
messages, which helps you to comply to these guidelines.

   ---------- Footnotes ----------

   (1) 
http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

   (2) https://github.com/magit/git-modes/

   (3) https://github.com/magit/magit/


File: flycheck.info,  Node: Contributing syntax checkers,  Next: Pull requests,  Prev: Commit messages,  Up: Contributing code

5.2.4 Contributing syntax checkers
----------------------------------

For syntax checkers, some special guidelines apply in addition to the
above:

   - Provide a link to the website of the syntax checker tool in the
     comments of your pull request.

   - Add a proper docstring to your syntax checker, including this URL.

Additionally, either

   - show example code that triggers errors for each of the error
     patterns of the syntax checker, or

   - add unit tests for your syntax checker.


File: flycheck.info,  Node: Pull requests,  Prev: Contributing syntax checkers,  Up: Contributing code

5.2.5 Pull requests
-------------------

   - Use a *topic branch* to easily amend a pull request later, if
     necessary.

   - Do *not* open new pull requests, when asked to improve your patch.
     Instead, amend your commits with ‘git rebase -i’, and then update
     the pull request with ‘git push --force’

   - Open a pull request(1) that relates to but one subject with a clear
     title and description in grammatically correct, complete sentences.

   ---------- Footnotes ----------

   (1) https://help.github.com/articles/using-pull-requests


File: flycheck.info,  Node: Credits,  Next: Changes,  Prev: Contributing,  Up: Top

6 Credits
*********

Flycheck is written and maintained by Sebastian Wiesner(1), with
contributions from the following people.  Their help and ideas, their
support and patches are greatly appreciated.

   - Bozhidar Batsov(2) provided valuable feedback and refinements,
     brought Flycheck to a larger user base by adding it to his
     Prelude(3) project, and added a Ruby syntax checker using
     ‘rubocop’.

   - Damon Haley(4) helped to shape and test the PHP CodeSniffer
     checker.

   - David Holm(5) added C/C++ syntax and style checkers using ‘clang’
     and ‘cppcheck’ respectively, and contributed a Verilog syntax
     checker using ‘verilator’.

   - Gereon Frey(6) fixed the ‘go-build’ syntax checker and improved its
     tests.

   - Jimmy Yuen Ho Wong(7) added the HTML syntax checker and the jshint
     Javascript checker, and did valuable testing and bug fixing.

   - Krzysztof Witkowski(8) implemented ‘eval’ support in Flycheck
     commands.

   - Magnar Sveen(9) developed the awesome ‘dash.el’ and s.el(10)
     libraries, that drive considerable parts of Flycheck’s internals.

   - Marian Schubert(11) added the Perl syntax checker.

   - Mark Hellewell(12) added the Puppet syntax and style checkers.

   - Martin Grenfell(13) created the awesome Vim library syntastic(14)
     which inspired this project and many of its checkers.

   - Matthias Dahl(15) improved the performance of Flycheck’s temp file
     handling.

   - Mitch Tishmack(16) added support for Microsoft extensions to the
     Clang syntax checker.

   - Peter Vasil(17) contributed syntax checkers for XML, Lua and Go
     (using ‘go build’ and ‘go test’), added unit tests and did valuable
     testing.

   - Robert Dallas Gray(18) made error display customizable with
     ‘flycheck-display-errors-function’.

   - Robert Zaremba(19) added Go syntax checker using ‘gofmt’.

   - Simon Carter(20) provided valuable feedback about automatic syntax
     checking, and took great effort to debug some very subtle issues in
     it.

   - steckerhalter(21) provided the PHP CodeSniffer checker.

   - Steve Purcell(22) implemented many checkers, contributed important
     ideas to the design of the checker API and engaged in worthwhile
     discussion to shape this project.

   - Sylvain Benner(23) added syntax checkers for Elixir and Erlang, and
     wrote the cool flycheck-color-mode-line(24) extension.

   - Sylvain Rousseau(25) added a syntax checker for POSIX shell script
     using ‘bash’, and improved error parsing in the Bash script syntax
     checker.

   - Ted Zlatanov(26) added a syntax checker for CFEngine.

   - tom tan(27) added a syntax checker for the D programming language
     using ‘dmd’, and wrote the cool flycheck-d-unittest(28) extension.

   - Yannick Roehlly(29) added support for PEP8 naming errors to the
     Flake8 syntax checker.

   - Yasuyuki Oka(30) contributed a lot of syntax checkers for various
     languages, including AsciiDoc, Chef recipes, ERuby, Handlebars,
     Javascript, PHP, Racket, Ruby, Slim and YAML.

   - Victor Deryagin(31) added the Rust syntax checker.

Of course we also need to thank GNU Flymake(32), the first, respectable,
though somewhat failed attempt at on-the-fly syntax checking.

   ---------- Footnotes ----------

   (1) https://github.com/lunaryorn

   (2) https://github.com/bbatsov

   (3) https://github.com/bbatsov/prelude

   (4) https://github.com/dhaley

   (5) https://github.com/dholm

   (6) https://github.com/gfrey

   (7) https://github.com/wyuenho

   (8) https://github.com/kwitek

   (9) https://github.com/magnars/dash.el

   (10) https://github.com/magnars/s.el

   (11) https://github.com/maio

   (12) https://github.com/markhellewell

   (13) https://github.com/scrooloose

   (14) https://github.com/scrooloose/syntastic

   (15) https://github.com/BinaryKhaos

   (16) https://github.com/mitchty

   (17) https://github.com/ptrv

   (18) https://github.com/rdallasgray

   (19) https://github.com/robert-zaremba

   (20) https://github.com/bbbscarter

   (21) https://github.com/steckerhalter

   (22) https://github.com/purcell

   (23) https://github.com/syl20bnr

   (24) https://github.com/flycheck/flycheck-color-mode-line

   (25) https://github.com/thisirs

   (26) https://github.com/tzz

   (27) https://github.com/tom-tan

   (28) https://github.com/flycheck/flycheck-d-unittest

   (29) https://github.com/yannick1974

   (30) https://github.com/yasuyk

   (31) https://github.com/vderyagin

   (32) http://www.gnu.org/software/emacs/manual/html_node/flymake/


File: flycheck.info,  Node: Changes,  Next: GNU Free Documentation License,  Prev: Credits,  Up: Top

7 Changes
*********

* Menu:

* master (unreleased): master unreleased. 
* 0.16 (Jan 11, 2014): 0 16 Jan 11 2014. 
* 0.15 (Nov 15, 2013): 0 15 Nov 15 2013. 
* 0.14.1 (Aug 16, 2013): 0 14 1 Aug 16 2013. 
* 0.14 (Aug 15, 2013): 0 14 Aug 15 2013. 
* 0.13 (Jun 28, 2013): 0 13 Jun 28 2013. 
* 0.12 (May 18, 2013): 0 12 May 18 2013. 
* 0.11 (May 01, 2013): 0 11 May 01 2013. 
* 0.10 (Apr 21, 2013): 0 10 Apr 21 2013. 
* 0.9 (Apr 13, 2013): 0 9 Apr 13 2013. 
* 0.8 (Apr 9, 2013): 0 8 Apr 9 2013. 
* 0.7.1 (Feb 23, 2013): 0 7 1 Feb 23 2013. 
* 0.7 (Feb 14, 2013): 0 7 Feb 14 2013. 
* 0.6.1 (Jan 30, 2013): 0 6 1 Jan 30 2013. 
* 0.6 (Jan 29, 2013): 0 6 Jan 29 2013. 
* 0.5 (Dec 28, 2012): 0 5 Dec 28 2012. 
* 0.4 (Nov 21, 2012): 0 4 Nov 21 2012. 
* 0.3 (Nov 21, 2012): 0 3 Nov 21 2012. 
* 0.2 (Oct 25, 2012): 0 2 Oct 25 2012. 
* 0.1 (Oct 11, 2012): 0 1 Oct 11 2012. 


File: flycheck.info,  Node: master unreleased,  Next: 0 16 Jan 11 2014,  Up: Changes

7.1 master (unreleased)
=======================

   - #274(1): The manual was ported to Sphinx(2) and is now located at
     ‘http://flycheck.readthedocs.org’

   - *Breaking changes*:

        - The default ‘flycheck-completion-system’ was changes to nil,
          qi.e.  the built-in ‘completing-read’, for compliance with
          Emacs’ defaults.  To restore the previous behaviour, add
          ‘(eval-after-load 'flycheck '(setq flycheck-completion-system
          'ido))’ to your ‘init.el’.

   - New syntax checkers:

        - RST (ReStructuredText) using Sphinx

   - New features:

        - #266(3): Extend syntax checkers with
          ‘flycheck-add-next-checkers’

   - Improvements:

        - #301(4): Immediately re-check the buffer when it was changed
          during a syntax check

        - #305(5): Do not defer syntax checker after idle change timeout

        - Do not use the generic ‘rst’ syntax checker in Sphinx projects
          anymore, to avoid false positives by Sphinx-only markup

   - Bug fixes

        - #298(6): Fix compatibility with tabbar-mode

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/274

   (2) http://sphinx-doc.org

   (3) https://github.com/flycheck/flycheck/issues/266

   (4) https://github.com/flycheck/flycheck/issues/301

   (5) https://github.com/flycheck/flycheck/issues/305

   (6) https://github.com/flycheck/flycheck/issues/298


File: flycheck.info,  Node: 0 16 Jan 11 2014,  Next: 0 15 Nov 15 2013,  Prev: master unreleased,  Up: Changes

7.2 0.16 (Jan 11, 2014)
=======================

   - *Breaking changes*:

        - Argument substitution is no longer performed on syntax checker
          executables.  The executable must be a string.

        - #275(1): Split out ‘haskell-hdevtools’ into a separate
          package.  See flycheck-hdevtools(2)

        - Drop support for coffeelint 0.x

        - #230(3): The error list is reimplemented on top of Tabulated
          List Mode.  This greatly changes the appearance and behaviour
          of the error list.

   - New syntax checkers:

        - #250(4): Ruby with ‘ruby-lint’

        - #270(5): Handlebars

        - #253(6): YAML with ‘yaml-jsyaml’

        - #255(7): Chef recipes with ‘foodcritic’

        - #276(8): AsciiDoc

        - #271(9): CFEngine

        - #277(10): Racket

        - Texinfo

        - #296(11): Verilog

        - #291(12): Javascript with ‘eslint’

        - #285(13): ERuby

   - New features:

        - #272(14): Define variables to override the executables of
          syntax checkers

        - #272(15): Interactively set the executable of a syntax checker
          with ‘flycheck-set-checker-executable’

        - #269(16): Disable syntax checkers easily with
          ‘flycheck-disabled-checkers’

        - #268(17): Add support for the Compass CSS framework in the
          ‘sass’ and ‘scss’ checkers, with ‘flycheck-sass-compass’ and
          ‘flycheck-scss-compass’ respectively

        - #287(18): Disable style checks in ‘ruby-rubocop’ with
          ‘flycheck-rubocop-lint-only’

        - #283(19): Add support for Microsoft extensions in
          ‘c/c++-clang’ via ‘flycheck-clang-ms-extensions’

        - #230(20): New faces ‘flycheck-error-list-info’,
          ‘flycheck-error-list-warning’, ‘flycheck-error-list-error’,
          ‘flycheck-error-list-line-number’ and
          ‘flycheck-error-list-column-number’

        - Add ‘flycheck-ghc-no-user-package-database’ to disable the
          user package database for ‘haskell-ghc’

        - Add ‘flycheck-ghc-package-databases’ to add additional package
          databases to ‘haskell-ghc’

        - Add ‘flycheck-ghc-search-path’ to add additional directories
          to the search path of ‘haskell-ghc’

   - Improvements:

        - Demote Rubocop convention messages to ‘info’ level

        - #282(21): Stop Flycheck before the buffer is reverted

        - Properly resolve local module imports in ‘haskell-ghc’

   - Bug fixes:

        - #280(22): Make relative imports work with ‘python-pylint’

        - Fix parsing of errors in ‘scss’ and ‘sass’

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/275

   (2) https://github.com/flycheck/flycheck-hdevtools

   (3) https://github.com/flycheck/flycheck/issues/230

   (4) https://github.com/flycheck/flycheck/issues/250

   (5) https://github.com/flycheck/flycheck/issues/270

   (6) https://github.com/flycheck/flycheck/issues/253

   (7) https://github.com/flycheck/flycheck/issues/255

   (8) https://github.com/flycheck/flycheck/issues/276

   (9) https://github.com/flycheck/flycheck/issues/271

   (10) https://github.com/flycheck/flycheck/issues/277

   (11) https://github.com/flycheck/flycheck/issues/296

   (12) https://github.com/flycheck/flycheck/issues/291

   (13) https://github.com/flycheck/flycheck/issues/285

   (14) https://github.com/flycheck/flycheck/issues/272

   (15) https://github.com/flycheck/flycheck/issues/272

   (16) https://github.com/flycheck/flycheck/issues/269

   (17) https://github.com/flycheck/flycheck/issues/268

   (18) https://github.com/flycheck/flycheck/issues/287

   (19) https://github.com/flycheck/flycheck/issues/283

   (20) https://github.com/flycheck/flycheck/issues/230

   (21) https://github.com/flycheck/flycheck/issues/282

   (22) https://github.com/flycheck/flycheck/issues/280


File: flycheck.info,  Node: 0 15 Nov 15 2013,  Next: 0 14 1 Aug 16 2013,  Prev: 0 16 Jan 11 2014,  Up: Changes

7.3 0.15 (Nov 15, 2013)
=======================

   - Flycheck has a new home at ‘https://github.com/flycheck/flycheck’,
     the online manual moved to ‘http://flycheck.github.io’.

   - *Breaking changes*:

        - Do not add the current directory to the ‘emacs-lisp’ syntax
          checker load path

        - #214(1): ‘flycheck-list-errors’ cannot list errors at point
          anymore.  It does not accept a prefix argument anymore, and
          takes zero arguments now

        - #214(2): ‘flycheck-display-errors-in-list’ is gone.  The error
          list automatically highlights the error at point now

        - Remove obsolete ‘flycheck-declare-checker’

   - New syntax checkers:

        - #236(3): YAML

        - #245(4): Javascript with ‘gjslint’

        - #246(5): Slim

        - #249(6): PHP using ‘phpmd’

   - New features:

        - Support IDO or Grizzl(7) as completion systems for
          ‘flycheck-select-checker’ at ‘C-c ! s’

        - #202(8): Disable standard error navigation with
          ‘flycheck-standard-error-navigation’

        - #207(9): Add ‘flycheck-clang-language-standard’ to choose the
          language standard for C/C++ syntax checking

        - #207(10): Add ‘flycheck-clang-definitions’ to set additional
          definitions for C/C++ syntax checking

        - #207(11): Add ‘flycheck-clang-no-rtti’ to disable RTTI for
          C/C++ syntax checking

        - Add new option cell ‘option-flag’ for boolean flags in syntax
          checker commands

        - #207(12): Add ‘flycheck-clang-includes’ to include additional
          files for C/C++ syntax checking

        - Add configuration file variable ‘flycheck-pylintrc’ for Pylint

        - #214(13): New faces ‘flycheck-error-list-highlight-at-point’
          and ‘flycheck-error-list-highlight’ to highlight the errors at
          point and at the current line respectively in the error list

        - #214(14): The error list now automatically updates to show the
          errors of the current buffer

        - #212(15): Define new error levels with
          ‘flycheck-define-error-level’

        - #234(16): Add ‘flycheck-clang-standard-library’ to choose the
          standard library for C/C++ syntax checking

        - #243(17): Customize the delay for displaying errors via
          ‘flycheck-display-errors-delay’

        - #215(18): Add ‘info’ level for informational annotations by
          syntax checkers

        - #259(19): Add a new symbol ‘temporary-file-name’ to pass
          temporary file names to syntax checkers

   - Improvements:

        - #214(20): The error list now refreshes automatically after
          each syntax check

        - #214(21): The errors at point are now automatically
          highlighted in the error list

        - ‘emacs-lisp-checkdoc’ does not longer check ‘.dir-locals.el’
          files

        - #222(22): Do not automatically check syntax in encrypted files

        - #215(23): Parse notes from ‘c/c++-clang’ into info level
          messages

        - #204(24): Parse convention warnings from ‘pylint’#215(25):
          info level

        - #215(26): Demote naming warnings from ‘python-flake8’ to info
          level

        - #256(27): Support ‘enh-ruby-mode’ in Ruby syntax checkers

        - Parse columns from ‘python-pylint’ errors

        - Do not compress temporary files for syntax checks if the
          original file was compressed

   - Bug fixes:

        - #225(28): Find local includes in the Clang syntax checker

        - Do not emit spurious flawed definition warning in the ‘rst’
          syntax checker

        - #251(29): Handle abbreviated file names in ‘luac’ output, by
          simply ignoring them

        - #259(30): Correctly redirect the output binary of the
          ‘go-build’ syntax checker

        - #263(31): Fix Cppcheck parsing with the built-in Emacs XML
          parser

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/214

   (2) https://github.com/flycheck/flycheck/issues/214

   (3) https://github.com/flycheck/flycheck/issues/236

   (4) https://github.com/flycheck/flycheck/issues/245

   (5) https://github.com/flycheck/flycheck/issues/246

   (6) https://github.com/flycheck/flycheck/issues/249

   (7) https://github.com/d11wtq/grizzl

   (8) https://github.com/flycheck/flycheck/issues/202

   (9) https://github.com/flycheck/flycheck/issues/207

   (10) https://github.com/flycheck/flycheck/issues/207

   (11) https://github.com/flycheck/flycheck/issues/207

   (12) https://github.com/flycheck/flycheck/issues/207

   (13) https://github.com/flycheck/flycheck/issues/214

   (14) https://github.com/flycheck/flycheck/issues/214

   (15) https://github.com/flycheck/flycheck/issues/212

   (16) https://github.com/flycheck/flycheck/issues/234

   (17) https://github.com/flycheck/flycheck/issues/243

   (18) https://github.com/flycheck/flycheck/issues/215

   (19) https://github.com/flycheck/flycheck/issues/259

   (20) https://github.com/flycheck/flycheck/issues/214

   (21) https://github.com/flycheck/flycheck/issues/214

   (22) https://github.com/flycheck/flycheck/issues/222

   (23) https://github.com/flycheck/flycheck/issues/215

   (24) https://github.com/flycheck/flycheck/issues/204

   (25) https://github.com/flycheck/flycheck/issues/215

   (26) https://github.com/flycheck/flycheck/issues/215

   (27) https://github.com/flycheck/flycheck/issues/256

   (28) https://github.com/flycheck/flycheck/issues/225

   (29) https://github.com/flycheck/flycheck/issues/251

   (30) https://github.com/flycheck/flycheck/issues/259

   (31) https://github.com/flycheck/flycheck/issues/263


File: flycheck.info,  Node: 0 14 1 Aug 16 2013,  Next: 0 14 Aug 15 2013,  Prev: 0 15 Nov 15 2013,  Up: Changes

7.4 0.14.1 (Aug 16, 2013)
=========================

   - Bug fixes:

        - #194(1): Add a missing dependency

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/194


File: flycheck.info,  Node: 0 14 Aug 15 2013,  Next: 0 13 Jun 28 2013,  Prev: 0 14 1 Aug 16 2013,  Up: Changes

7.5 0.14 (Aug 15, 2013)
=======================

   - *Breaking changes*:

        - #163(1): Introduce ‘flycheck-define-checker’ and obsolete
          ‘flycheck-declare-checker’

        - Remove the obsolete ‘flycheck-error-face’ and
          ‘flycheck-warning-face’

        - #176(2): Do not initialize packages by default in ‘emacs-lisp’
          syntax checker for non-configuration files

        - #179(3): Change the default ‘flycheck-highlighting-mode’ to
          ‘symbols’

        - #184(4): Drop support for Pylint 0.x in ‘python-pylint’

   - New features:

        - #166(5): List errors at point only with prefix arg to
          ‘flycheck-list-errors’

        - #166(6): Add new display function
          ‘flycheck-display-errors-in-list’ to display errors at point
          in the error list

        - New ‘option-list’ argument cell to pass option lists to a
          syntax checker

        - #174(7): New ‘flycheck-emacs-lisp-load-path’ option to
          customize the ‘load-path’ used by the ‘emacs-lisp’ syntax
          checker

        - #176(8): New ‘flycheck-emacs-lisp-initialize-packages’ option
          to initialize packages in the ‘emacs-lisp’ syntax checker

        - #176(9): New ‘flycheck-emacs-lisp-package-user-dir’ option to
          configure the package directory for the ‘emacs-lisp’ syntax
          checker

        - New option filter ‘flycheck-option-comma-separated-list’ for
          options with comma separated lists as values

        - #179(10): New highlighting mode ‘symbols’ to highlight the
          symbol pointed to by an error

   - New syntax checkers:

        - #160(11): LESS

        - #162(12): Haskell with ‘ghc’, ‘hdevtools’ and ‘hlint’

        - #170(13): C/C++ with ‘cppcheck’

        - #172(14): C/C++ with ‘clang’

        - CoffeeScript with ‘coffee’

        - #180(15): XML with ‘xmllint’

        - #167(16): D with ‘dmd’

   - Improvements:

        - #157(17): Support Web Mode in ‘html-tidy’ syntax checker

        - #159(18): Support Rubocop 0.9 and drop support for older
          Rubocop releases

        - Include the message ID in error messages from ‘python-pylint’

   - Bug fixes:

        - Fix warnings about flawed definitions in ‘emacs-lisp’ and
          ‘emacs-lisp-checkdoc’, caused by faulty formatting of sexps

        - #166(19): Refresh error lists when pressing ‘g’

        - #175(20): Do not obscure active minibuffer input when
          displaying errors in the echo area

        - Fix universal prefix argument for ‘flycheck-next-error’ at
          ‘C-c ! n’

        - #192(21): Correctly parse output of ‘coffeelint’ 0.5.7

        - #184(22): Correctly parse output of ‘pylint’ 1.0

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/163

   (2) https://github.com/flycheck/flycheck/issues/176

   (3) https://github.com/flycheck/flycheck/issues/179

   (4) https://github.com/flycheck/flycheck/issues/184

   (5) https://github.com/flycheck/flycheck/issues/166

   (6) https://github.com/flycheck/flycheck/issues/166

   (7) https://github.com/flycheck/flycheck/issues/174

   (8) https://github.com/flycheck/flycheck/issues/176

   (9) https://github.com/flycheck/flycheck/issues/176

   (10) https://github.com/flycheck/flycheck/issues/179

   (11) https://github.com/flycheck/flycheck/issues/160

   (12) https://github.com/flycheck/flycheck/issues/162

   (13) https://github.com/flycheck/flycheck/issues/170

   (14) https://github.com/flycheck/flycheck/issues/172

   (15) https://github.com/flycheck/flycheck/issues/180

   (16) https://github.com/flycheck/flycheck/issues/167

   (17) https://github.com/flycheck/flycheck/issues/157

   (18) https://github.com/flycheck/flycheck/issues/159

   (19) https://github.com/flycheck/flycheck/issues/166

   (20) https://github.com/flycheck/flycheck/issues/175

   (21) https://github.com/flycheck/flycheck/issues/192

   (22) https://github.com/flycheck/flycheck/issues/184


File: flycheck.info,  Node: 0 13 Jun 28 2013,  Next: 0 12 May 18 2013,  Prev: 0 14 Aug 15 2013,  Up: Changes

7.6 0.13 (Jun 28, 2013)
=======================

   - *Breaking changes*:

        - Obsolete ‘flycheck-warning-face’ and ‘flycheck-error-face’ in
          favor ‘flycheck-warning’ and ‘flycheck-error’ respectively

        - Obsolete ‘:predicate’ forms in favor of ‘:predicate’ functions

        - ‘flycheck-def-config-file-var’ does not automatically mark
          variables as safe anymore

   - New features:

        - Make fringe indicator faces customizable independently with
          ‘flycheck-fringe-error’ and ‘flycheck-fringe-warning’

        - Improve the default faces by using underlines instead of
          foreground colors, if possible

        - #141(1): Customizable error processing with
          ‘flycheck-process-error-functions’

        - #144(2): Make the delay before starting a syntax check
          customizable via ‘flycheck-idle-change-delay’

        - #156(3): Make display of errors under point customizable via
          ‘flycheck-display-errors-function’

   - Improvements

        - Always highlight errors on top of warnings now

        - #141(4): Do not trigger syntax checks in the middle of
          commands

        - Add the current directory to load path in the ‘emacs-lisp’
          syntax checker

        - Do not longer use the ‘emacs-lisp-checkdoc’ syntax checker in
          Scratch buffers

        - #149(5): Do not flush temporary files onto disk

        - Syntax checkers may have error patterns and error parser now

        - Predicate forms are now wrapped into functions and compiled
          into functions during byte compilation

        - Copy each message separately in
          ‘flycheck-copy-messages-as-kill’

        - Mark some customizable variables as safe for file variable
          usage, most notably ‘flycheck-indication-mode’,
          ‘flycheck-highlighting-mode’ and ‘flycheck-idle-change-delay’.

   - Bug fixes:

        - Fix error when searching for a configuration file outside a
          Projectile project

        - Do not start a syntax check before the ‘flycheck-mode-hook’
          was run

        - Do not start automatic syntax checks if Flycheck Mode is
          disabled

        - #143(6): Defer the initial syntax check until after the
          current interactive command

        - Correctly clean up information about running processes

        - #150(7): Fix compatibility with Emacs 24.2 and earlier

        - Fix version information on Emacs trunk builds

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/141

   (2) https://github.com/flycheck/flycheck/issues/144

   (3) https://github.com/flycheck/flycheck/issues/156

   (4) https://github.com/flycheck/flycheck/issues/141

   (5) https://github.com/flycheck/flycheck/issues/149

   (6) https://github.com/flycheck/flycheck/issues/143

   (7) https://github.com/flycheck/flycheck/issues/150


File: flycheck.info,  Node: 0 12 May 18 2013,  Next: 0 11 May 01 2013,  Prev: 0 13 Jun 28 2013,  Up: Changes

7.7 0.12 (May 18, 2013)
=======================

   - New syntax checkers:

        - #136(1): Ruby using ‘jruby’

        - #138(2): Puppet

   - New features:

        - Highlight error expressions by default, with the new ‘sexps’
          highlighting mode

        - #140(3): Automatically check syntax some time after the last
          change in the buffer

        - Add ‘flycheck-version’ to determine the installed Flycheck
          version

        - Add ‘flycheck-list-errors’, mapped to ‘C-c ! l’, to list all
          errors in a separate buffer

   - Improvements:

        - Defer syntax checks while a buffer is reverted, to avoid race
          conditions

   - Bug fixes:

        - #136(4): Correctly parse syntax errors from JRuby

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/136

   (2) https://github.com/flycheck/flycheck/issues/138

   (3) https://github.com/flycheck/flycheck/issues/140

   (4) https://github.com/flycheck/flycheck/issues/136


File: flycheck.info,  Node: 0 11 May 01 2013,  Next: 0 10 Apr 21 2013,  Prev: 0 12 May 18 2013,  Up: Changes

7.8 0.11 (May 01, 2013)
=======================

   - New syntax checkers:

        - #124(1): Scala

   - New features:

        - Customizable error indication with control of the fringe side,
          via ‘flycheck-indication-mode’

        - #128(2): Customizable automatic syntax checking, via
          ‘flycheck-check-syntax-automatically’

        - #133(3): Customizable configuration file search, via
          ‘flycheck-locate-config-file-functions’

        - Find configuration files in Projectile(4) projects

        - Add ‘flycheck-before-syntax-check-hook’ and
          ‘flycheck-syntax-check-failed-hook’

   - Improvements:

        - #123(5): The ‘ruby’ syntax checker now differentiates warnings
          from errors

        - Faces are now in a separate customization group

   - Bug fixes:

        - Add missing customization group for syntax checker options

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/124

   (2) https://github.com/flycheck/flycheck/issues/128

   (3) https://github.com/flycheck/flycheck/issues/133

   (4) https://github.com/bbatsov/projectile

   (5) https://github.com/flycheck/flycheck/issues/123


File: flycheck.info,  Node: 0 10 Apr 21 2013,  Next: 0 9 Apr 13 2013,  Prev: 0 11 May 01 2013,  Up: Changes

7.9 0.10 (Apr 21, 2013)
=======================

   - Flycheck uses ‘cl-lib’ now.  This library is built-in as of GNU
     Emacs 24.3.  For earlier releases of GNU Emacs 24 an additional
     compatibility library will be installed from GNU ELPA.

   - New syntax checkers:

        - #112(1): POSIX Shell script using ‘bash’

        - #113(2): Ruby using ‘rubocop’

        - #108(3): Elixir

        - #122(4): Erlang

   - Removed syntax checkers:

        - #115(5): Python using Pyflakes.  Use the superior Flake8
          syntax checker

   - New features:

        - Add ‘flycheck-copy-messages-as-kill’, mapped to ‘C-c ! C-w’,
          to copy all error messages under point into kill ring

        - Add ‘flycheck-google-messages’, mapped to ‘C-c ! /’, to google
          for error messages under point.  Needs the Google This(6)
          library

        - Syntax checkers can redirect output to a temporary directory
          now using the ‘temporary-directory’ argument symbol

   - Improvements:

        - Call option filters for ‘nil’ values, too

        - #112(7): Improve error parsing in Bash syntax checker

        - Error navigation does not cross restrictions in narrowed
          buffers anymore

        - #99(8): Try to preserve the non-directory part of the buffer’s
          file name when substituting the ‘source’ symbol

   - Bug fixes:

        - Fix error highlighting and navigation in narrowed buffers

        - #118(9): Use a hopefully more reliable way to parse output of
          PHP CodeSniffer

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/112

   (2) https://github.com/flycheck/flycheck/issues/113

   (3) https://github.com/flycheck/flycheck/issues/108

   (4) https://github.com/flycheck/flycheck/issues/122

   (5) https://github.com/flycheck/flycheck/issues/115

   (6) https://github.com/Bruce-Connor/emacs-google-this

   (7) https://github.com/flycheck/flycheck/issues/112

   (8) https://github.com/flycheck/flycheck/issues/99

   (9) https://github.com/flycheck/flycheck/issues/118


File: flycheck.info,  Node: 0 9 Apr 13 2013,  Next: 0 8 Apr 9 2013,  Prev: 0 10 Apr 21 2013,  Up: Changes

7.10 0.9 (Apr 13, 2013)
=======================

   - New syntax checkers:

        - #103(1): SCSS using ‘scss’

        - RST (ReStructuredText) using Docutils

        - #107(2): Go using ‘go build’ and ‘go test’

   - Improvements:

        - Quit the error message window when navigating away from error
          locations

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/103

   (2) https://github.com/flycheck/flycheck/issues/107


File: flycheck.info,  Node: 0 8 Apr 9 2013,  Next: 0 7 1 Feb 23 2013,  Prev: 0 9 Apr 13 2013,  Up: Changes

7.11 0.8 (Apr 9, 2013)
======================

   - New syntax checkers:

        - #91(1): Go using ‘gofmt’

        - #101(2): Rust using ‘rustc’

   - New features:

        - #29(3): Add a global Flycheck mode.  ‘(global-flycheck-mode)’
          is now the recommended way to enable Flycheck

        - #72(4): Add support for syntax checker options

        - Add option for the coding standard used by the ‘php-phpcs’
          syntax checker

        - Add options for the maximum McCabe complexity and the maximum
          line length to ‘python-flake8’

   - Improvements:

        - Support McCabe warnings in ‘python-flake8’

        - Support warnings from ‘flake8’ 2

        - #94(5): Show long error messages in a popup buffer

        - #96(6): Show all error messages at point

        - #98(7): Add support for naming warings from ‘flake8’ 2

        - Flycheck mode is not longer enabled for buffers whose names
          start with a space

        - #100(8): Improve highlighting to reduce screen flickering

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/91

   (2) https://github.com/flycheck/flycheck/issues/101

   (3) https://github.com/flycheck/flycheck/issues/29

   (4) https://github.com/flycheck/flycheck/issues/72

   (5) https://github.com/flycheck/flycheck/issues/94

   (6) https://github.com/flycheck/flycheck/issues/96

   (7) https://github.com/flycheck/flycheck/issues/98

   (8) https://github.com/flycheck/flycheck/issues/100


File: flycheck.info,  Node: 0 7 1 Feb 23 2013,  Next: 0 7 Feb 14 2013,  Prev: 0 8 Apr 9 2013,  Up: Changes

7.12 0.7.1 (Feb 23, 2013)
=========================

   - Bug fixes:

        - #87(1): Do not signal errors from ‘flycheck-mode’

        - Correctly fall back to ‘$HOME’ when searching configuration
          files

        - Correctly ascend to parent directory when searching
          configuration files

   - API changes:

        - Rename ‘config’ cell to ‘config-file’

        - Allow to pass the result of ‘config-file’ cells as single
          argument

        - #86(2): Add support for evaluating Lisp forms in syntax
          checker commands

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/87

   (2) https://github.com/flycheck/flycheck/issues/86


File: flycheck.info,  Node: 0 7 Feb 14 2013,  Next: 0 6 1 Jan 30 2013,  Prev: 0 7 1 Feb 23 2013,  Up: Changes

7.13 0.7 (Feb 14, 2013)
=======================

   - New features:

        - Navigate to source of syntax checker declarations from syntax
          checker help

        - #60(1): Add online Info manual

   - Improvements:

        - Use pipes instead of TTYs to read output from syntax checkers

        - #80(2): Defer syntax checks for invisible buffers

        - #62(3): Immediately display error messages after error
          navigation

   - Bug fixes:

        - Never select deleted buffers

        - Do not let the debugger interfere with necessary cleanup
          actions

        - #78(4): Do not attempt to parse empty XML trees

        - #81(5): Fix infinite recursion on Windows

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/60

   (2) https://github.com/flycheck/flycheck/issues/80

   (3) https://github.com/flycheck/flycheck/issues/62

   (4) https://github.com/flycheck/flycheck/issues/78

   (5) https://github.com/flycheck/flycheck/issues/81


File: flycheck.info,  Node: 0 6 1 Jan 30 2013,  Next: 0 6 Jan 29 2013,  Prev: 0 7 Feb 14 2013,  Up: Changes

7.14 0.6.1 (Jan 30, 2013)
=========================

   - Fix package dependencies


File: flycheck.info,  Node: 0 6 Jan 29 2013,  Next: 0 5 Dec 28 2012,  Prev: 0 6 1 Jan 30 2013,  Up: Changes

7.15 0.6 (Jan 29, 2013)
=======================

   - New syntax checkers:

        - #53(1): Emacs Lisp with ‘checkdoc-current-buffer’

        - #72(2): PHP with PHP CodeSniffer

   - Removed syntax checkers:

        - Javascript with ‘jsl’

   - New features:

        - #26(3): Error navigation with ‘next-error’ and
          ‘previous-error’

        - #33(4): Fringe icons instead of error indicators

        - #59(5): Menu entry for Flycheck

        - #35(6): Customizable error highlighting, taking the column
          number into account

        - Configuration files for syntax checkers

        - Add configuration file support to the syntax checkers
          ‘coffee-coffeelint’, ‘html-tidy’, ‘javascript-jshint’,
          ‘pyton-flake8’ and ‘tex-chktex’

        - #58(7): Allow to compile a buffer with a syntax checker for
          testing purposes

        - #31(8): Use multiple syntax checkers during a syntax check

        - #52(9): Add dedicated help for syntax checkers

   - Improvements:

        - #55(10): Match error patterns in order of declaration

   - Bug fixes:

        - #24(11): Inherit highlighting faces from built-in faces

        - #36(12): Correct error patterns of the HTML syntax checker

        - #42(13): Detect syntax errors in the ‘python-flake8’ syntax
          checker

        - Fix various regressions after introducing unit tests

        - #45(14): Inhibit syntax checking during package installation

        - #54(15): Disable syntax checking in Tramp buffers

        - #65(16): Preserve whitespace in error messages

   - API changes:

        - #41(17): Replace syntax checker variables with syntax checker
          declarations

        - #38(18): Support parsing errors with arbitrary functions
          instead of error patterns

        - #38(19): Add an error parser for Checkstyle-like XML output

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/53

   (2) https://github.com/flycheck/flycheck/issues/72

   (3) https://github.com/flycheck/flycheck/issues/26

   (4) https://github.com/flycheck/flycheck/issues/33

   (5) https://github.com/flycheck/flycheck/issues/59

   (6) https://github.com/flycheck/flycheck/issues/35

   (7) https://github.com/flycheck/flycheck/issues/58

   (8) https://github.com/flycheck/flycheck/issues/31

   (9) https://github.com/flycheck/flycheck/issues/52

   (10) https://github.com/flycheck/flycheck/issues/55

   (11) https://github.com/flycheck/flycheck/issues/24

   (12) https://github.com/flycheck/flycheck/issues/36

   (13) https://github.com/flycheck/flycheck/issues/42

   (14) https://github.com/flycheck/flycheck/issues/45

   (15) https://github.com/flycheck/flycheck/issues/54

   (16) https://github.com/flycheck/flycheck/issues/65

   (17) https://github.com/flycheck/flycheck/issues/41

   (18) https://github.com/flycheck/flycheck/issues/38

   (19) https://github.com/flycheck/flycheck/issues/38


File: flycheck.info,  Node: 0 5 Dec 28 2012,  Next: 0 4 Nov 21 2012,  Prev: 0 6 Jan 29 2013,  Up: Changes

7.16 0.5 (Dec 28, 2012)
=======================

   - New syntax checkers:

        - #15(1): SASS

        - #21(2): Perl

        - XML

        - #30(3): Lua

   - New features:

        - #25(4): Support manual buffer-local selection of syntax
          checker

        - #28(5): Add customizable error indicators

        - #27(6): Echo error messages at point without 3rd-party
          libraries like flymake-cursor

   - Improvements:

        - #24(7): Remember the last automatically selected syntax
          checker

   - Bug fixes:

        - #19(8): Fix syntax checking of buffers without backing files

   - API changes:

        - #15(9): Replace underlying Flymake API with a custom syntax
          checking implementation

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/15

   (2) https://github.com/flycheck/flycheck/issues/21

   (3) https://github.com/flycheck/flycheck/issues/30

   (4) https://github.com/flycheck/flycheck/issues/25

   (5) https://github.com/flycheck/flycheck/issues/28

   (6) https://github.com/flycheck/flycheck/issues/27

   (7) https://github.com/flycheck/flycheck/issues/24

   (8) https://github.com/flycheck/flycheck/issues/19

   (9) https://github.com/flycheck/flycheck/issues/15


File: flycheck.info,  Node: 0 4 Nov 21 2012,  Next: 0 3 Nov 21 2012,  Prev: 0 5 Dec 28 2012,  Up: Changes

7.17 0.4 (Nov 21, 2012)
=======================

   - #5(1): Rename the project to Flycheck

   - New syntax checkers

        - #9(2): HAML

        - #9(3): CSS

        - #9(4): Javascript with ‘jsl’

        - #16(5): Javascript with ‘jshint’

        - #12(6): JSON

        - LaTeX with ‘lacheck’

   - Bug fixes:

        - #10(7): Fix type error when checking compressed Emacs Lisp

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/5

   (2) https://github.com/flycheck/flycheck/issues/9

   (3) https://github.com/flycheck/flycheck/issues/9

   (4) https://github.com/flycheck/flycheck/issues/9

   (5) https://github.com/flycheck/flycheck/issues/16

   (6) https://github.com/flycheck/flycheck/issues/12

   (7) https://github.com/flycheck/flycheck/issues/10


File: flycheck.info,  Node: 0 3 Nov 21 2012,  Next: 0 2 Oct 25 2012,  Prev: 0 4 Nov 21 2012,  Up: Changes

7.18 0.3 (Nov 21, 2012)
=======================

   - #4(1): Replace ‘flymake-mode’ with a custom syntax checking minor
     mode

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/4


File: flycheck.info,  Node: 0 2 Oct 25 2012,  Next: 0 1 Oct 11 2012,  Prev: 0 3 Nov 21 2012,  Up: Changes

7.19 0.2 (Oct 25, 2012)
=======================

   - New syntax checkers:

        - PHP

   - API changes:

        - #2(1): Simplify syntax checker declarations

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/2


File: flycheck.info,  Node: 0 1 Oct 11 2012,  Prev: 0 2 Oct 25 2012,  Up: Changes

7.20 0.1 (Oct 11, 2012)
=======================

Initial release as flymake-checkers

   - New syntax checkers:

        - TeX/LaTeX

        - Shell scripts

        - Python

        - Ruby

        - Coffeescript

        - Emacs Lisp


File: flycheck.info,  Node: GNU Free Documentation License,  Next: Available syntax checkers,  Prev: Changes,  Up: Top

8 GNU Free Documentation License
********************************


                     GNU Free Documentation License
                      Version 1.3, 3 November 2008


      Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
          <http://fsf.org/>
      Everyone is permitted to copy and distribute verbatim copies
      of this license document, but changing it is not allowed.

     0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or noncommercially.
     Secondarily, this License preserves for the author and publisher a way
     to get credit for their work, while not being considered responsible
     for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.  It
     complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for free
     software, because free software needs free documentation: a free
     program should come with manuals providing the same freedoms that the
     software does.  But this License is not limited to software manuals;
     it can be used for any textual work, regardless of subject matter or
     whether it is published as a printed book.  We recommend this License
     principally for works whose purpose is instruction or reference.


     1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium, that
     contains a notice placed by the copyright holder saying it can be
     distributed under the terms of this License.  Such a notice grants a
     world-wide, royalty-free license, unlimited in duration, to use that
     work under the conditions stated herein.  The "Document", below,
     refers to any such manual or work.  Any member of the public is a
     licensee, and is addressed as "you".  You accept the license if you
     copy, modify or distribute the work in a way requiring permission
     under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section of
     the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could fall
     directly within that overall subject.  (Thus, if the Document is in
     part a textbook of mathematics, a Secondary Section may not explain
     any mathematics.)  The relationship could be a matter of historical
     connection with the subject or with related matters, or of legal,
     commercial, philosophical, ethical or political position regarding
     them.

     The "Invariant Sections" are certain Secondary Sections whose titles
     are designated, as being those of Invariant Sections, in the notice
     that says that the Document is released under this License.  If a
     section does not fit the above definition of Secondary then it is not
     allowed to be designated as Invariant.  The Document may contain zero
     Invariant Sections.  If the Document does not identify any Invariant
     Sections then there are none.

     The "Cover Texts" are certain short passages of text that are listed,
     as Front-Cover Texts or Back-Cover Texts, in the notice that says that
     the Document is released under this License.  A Front-Cover Text may
     be at most 5 words, and a Back-Cover Text may be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed of
     pixels) generic paint programs or (for drawings) some widely available
     drawing editor, and that is suitable for input to text formatters or
     for automatic translation to a variety of formats suitable for input
     to text formatters.  A copy made in an otherwise Transparent file
     format whose markup, or absence of markup, has been arranged to thwart
     or discourage subsequent modification by readers is not Transparent.
     An image format is not Transparent if used for any substantial amount
     of text.  A copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format, SGML
     or XML using a publicly available DTD, and standard-conforming simple
     HTML, PostScript or PDF designed for human modification.  Examples of
     transparent image formats include PNG, XCF and JPG.  Opaque formats
     include proprietary formats that can be read and edited only by
     proprietary word processors, SGML or XML for which the DTD and/or
     processing tools are not generally available, and the
     machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the material
     this License requires to appear in the title page.  For works in
     formats which do not have any title page as such, "Title Page" means
     the text near the most prominent appearance of the work's title,
     preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies of
     the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document whose
     title either is precisely XYZ or contains XYZ in parentheses following
     text that translates XYZ in another language.  (Here XYZ stands for a
     specific section name mentioned below, such as "Acknowledgements",
     "Dedications", "Endorsements", or "History".)  To "Preserve the Title"
     of such a section when you modify the Document means that it remains a
     section "Entitled XYZ" according to this definition.

     The Document may include Warranty Disclaimers next to the notice which
     states that this License applies to the Document.  These Warranty
     Disclaimers are considered to be included by reference in this
     License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and has
     no effect on the meaning of this License.

     2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License applies
     to the Document are reproduced in all copies, and that you add no
     other conditions whatsoever to those of this License.  You may not use
     technical measures to obstruct or control the reading or further
     copying of the copies you make or distribute.  However, you may accept
     compensation in exchange for copies.  If you distribute a large enough
     number of copies you must also follow the conditions in section 3.

     You may also lend copies, under the same conditions stated above, and
     you may publicly display copies.


     3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly have
     printed covers) of the Document, numbering more than 100, and the
     Document's license notice requires Cover Texts, you must enclose the
     copies in covers that carry, clearly and legibly, all these Cover
     Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
     the back cover.  Both covers must also clearly and legibly identify
     you as the publisher of these copies.  The front cover must present
     the full title with all words of the title equally prominent and
     visible.  You may add other material on the covers in addition.
     Copying with changes limited to the covers, as long as they preserve
     the title of the Document and satisfy these conditions, can be treated
     as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto adjacent
     pages.

     If you publish or distribute Opaque copies of the Document numbering
     more than 100, you must either include a machine-readable Transparent
     copy along with each Opaque copy, or state in or with each Opaque copy
     a computer-network location from which the general network-using
     public has access to download using public-standard network protocols
     a complete Transparent copy of the Document, free of added material.
     If you use the latter option, you must take reasonably prudent steps,
     when you begin distribution of Opaque copies in quantity, to ensure
     that this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you distribute an
     Opaque copy (directly or through your agents or retailers) of that
     edition to the public.

     It is requested, but not required, that you contact the authors of the
     Document well before redistributing any large number of copies, to
     give them a chance to provide you with an updated version of the
     Document.


     4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document under
     the conditions of sections 2 and 3 above, provided that you release
     the Modified Version under precisely this License, with the Modified
     Version filling the role of the Document, thus licensing distribution
     and modification of the Modified Version to whoever possesses a copy
     of it.  In addition, you must do these things in the Modified Version:

     A. Use in the Title Page (and on the covers, if any) a title distinct
        from that of the Document, and from those of previous versions
        (which should, if there were any, be listed in the History section
        of the Document).  You may use the same title as a previous version
        if the original publisher of that version gives permission.
     B. List on the Title Page, as authors, one or more persons or entities
        responsible for authorship of the modifications in the Modified
        Version, together with at least five of the principal authors of the
        Document (all of its principal authors, if it has fewer than five),
        unless they release you from this requirement.
     C. State on the Title page the name of the publisher of the
        Modified Version, as the publisher.
     D. Preserve all the copyright notices of the Document.
     E. Add an appropriate copyright notice for your modifications
        adjacent to the other copyright notices.
     F. Include, immediately after the copyright notices, a license notice
        giving the public permission to use the Modified Version under the
        terms of this License, in the form shown in the Addendum below.
     G. Preserve in that license notice the full lists of Invariant Sections
        and required Cover Texts given in the Document's license notice.
     H. Include an unaltered copy of this License.
     I. Preserve the section Entitled "History", Preserve its Title, and add
        to it an item stating at least the title, year, new authors, and
        publisher of the Modified Version as given on the Title Page.  If
        there is no section Entitled "History" in the Document, create one
        stating the title, year, authors, and publisher of the Document as
        given on its Title Page, then add an item describing the Modified
        Version as stated in the previous sentence.
     J. Preserve the network location, if any, given in the Document for
        public access to a Transparent copy of the Document, and likewise
        the network locations given in the Document for previous versions
        it was based on.  These may be placed in the "History" section.
        You may omit a network location for a work that was published at
        least four years before the Document itself, or if the original
        publisher of the version it refers to gives permission.
     K. For any section Entitled "Acknowledgements" or "Dedications",
        Preserve the Title of the section, and preserve in the section all
        the substance and tone of each of the contributor acknowledgements
        and/or dedications given therein.
     L. Preserve all the Invariant Sections of the Document,
        unaltered in their text and in their titles.  Section numbers
        or the equivalent are not considered part of the section titles.
     M. Delete any section Entitled "Endorsements".  Such a section
        may not be included in the Modified Version.
     N. Do not retitle any existing section to be Entitled "Endorsements"
        or to conflict in title with any Invariant Section.
     O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no material
     copied from the Document, you may at your option designate some or all
     of these sections as invariant.  To do this, add their titles to the
     list of Invariant Sections in the Modified Version's license notice.
     These titles must be distinct from any other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of a
     standard.

     You may add a passage of up to five words as a Front-Cover Text, and a
     passage of up to 25 words as a Back-Cover Text, to the end of the list
     of Cover Texts in the Modified Version.  Only one passage of
     Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document already
     includes a cover text for the same cover, previously added by you or
     by arrangement made by the same entity you are acting on behalf of,
     you may not add another; but you may replace the old one, on explicit
     permission from the previous publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this License
     give permission to use their names for publicity for or to assert or
     imply endorsement of any Modified Version.


     5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under this
     License, under the terms defined in section 4 above for modified
     versions, provided that you include in the combination all of the
     Invariant Sections of all of the original documents, unmodified, and
     list them all as Invariant Sections of your combined work in its
     license notice, and that you preserve all their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name but
     different contents, make the title of each such section unique by
     adding at the end of it, in parentheses, the name of the original
     author or publisher of that section if known, or else a unique number.
     Make the same adjustment to the section titles in the list of
     Invariant Sections in the license notice of the combined work.

     In the combination, you must combine any sections Entitled "History"
     in the various original documents, forming one section Entitled
     "History"; likewise combine any sections Entitled "Acknowledgements",
     and any sections Entitled "Dedications".  You must delete all sections
     Entitled "Endorsements".


     6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the rules
     of this License for verbatim copying of each of the documents in all
     other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert a
     copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.


     7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other separate
     and independent documents or works, in or on a volume of a storage or
     distribution medium, is called an "aggregate" if the copyright
     resulting from the compilation is not used to limit the legal rights
     of the compilation's users beyond what the individual works permit.
     When the Document is included in an aggregate, this License does not
     apply to the other works in the aggregate which are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half of
     the entire aggregate, the Document's Cover Texts may be placed on
     covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic form.
     Otherwise they must appear on printed covers that bracket the whole
     aggregate.


     8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section 4.
     Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also include
     the original English version of this License and the original versions
     of those notices and disclaimers.  In case of a disagreement between
     the translation and the original version of this License or a notice
     or disclaimer, the original version will prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to Preserve
     its Title (section 1) will typically require changing the actual
     title.


     9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void, and
     will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your license
     from a particular copyright holder is reinstated (a) provisionally,
     unless and until the copyright holder explicitly and finally
     terminates your license, and (b) permanently, if the copyright holder
     fails to notify you of the violation by some reasonable means prior to
     60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from that
     copyright holder, and you cure the violation prior to 30 days after
     your receipt of the notice.

     Termination of your rights under this section does not terminate the
     licenses of parties who have received copies or rights from you under
     this License.  If your rights have been terminated and not permanently
     reinstated, receipt of a copy of some or all of the same material does
     not give you any rights to use it.


     10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of the
     GNU Free Documentation License from time to time.  Such new versions
     will be similar in spirit to the present version, but may differ in
     detail to address new problems or concerns.  See
     http://www.gnu.org/copyleft/.

     Each version of the License is given a distinguishing version number.
     If the Document specifies that a particular numbered version of this
     License "or any later version" applies to it, you have the option of
     following the terms and conditions either of that specified version or
     of any later version that has been published (not as a draft) by the
     Free Software Foundation.  If the Document does not specify a version
     number of this License, you may choose any version ever published (not
     as a draft) by the Free Software Foundation.  If the Document
     specifies that a proxy can decide which future versions of this
     License can be used, that proxy's public statement of acceptance of a
     version permanently authorizes you to choose that version for the
     Document.

     11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.  A
     "Massive Multiauthor Collaboration" (or "MMC") contained in the site
     means any set of copyrightable works thus published on the MMC site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or in
     part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this License
     somewhere other than this MMC, and subsequently incorporated in whole or
     in part into the MMC, (1) had no cover texts or invariant sections, and
     (2) were thus incorporated prior to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the site
     under CC-BY-SA on the same site at any time before August 1, 2009,
     provided the MMC is eligible for relicensing.


     ADDENDUM: How to use this License for your documents

     To use this License in a document you have written, include a copy of
     the License in the document and put the following copyright and
     license notices just after the title page:

         Copyright (c)  YEAR  YOUR NAME.
         Permission is granted to copy, distribute and/or modify this document
         under the terms of the GNU Free Documentation License, Version 1.3
         or any later version published by the Free Software Foundation;
         with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
         A copy of the license is included in the section entitled "GNU
         Free Documentation License".

     If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
     replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with the
         Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

     If you have Invariant Sections without Cover Texts, or some other
     combination of the three, merge those two alternatives to suit the
     situation.

     If your document contains nontrivial examples of program code, we
     recommend releasing these examples in parallel under your choice of
     free software license, such as the GNU General Public License,
     to permit their use in free software.


File: flycheck.info,  Node: Available syntax checkers,  Next: Glossary,  Prev: GNU Free Documentation License,  Up: Top

9 Available syntax checkers
***************************

The following syntax checkers are available in Flycheck.  Each syntax
checker follows a ‘_language_-_tool_’ convention, where ‘_language_’ is
the programming language supported by this syntax checker, and ‘_tool_’
the specific syntax checker tool.

In Emacs, use *note flycheck-describe-checker: 9. to see comprehensive
documenation about a syntax checker.

 -- Syntax Checker: Syntax checker asciidoc

 -- Syntax Checker: Syntax checker bash

 -- Syntax Checker: Syntax checker c/c++-clang

 -- Syntax Checker: Syntax checker c/c++-cppcheck

 -- Syntax Checker: Syntax checker cfengine

 -- Syntax Checker: Syntax checker chef-foodcritic

 -- Syntax Checker: Syntax checker coffee

 -- Syntax Checker: Syntax checker coffee-coffeelint

 -- Syntax Checker: Syntax checker css-csslint

 -- Syntax Checker: Syntax checker d-dmd

 -- Syntax Checker: Syntax checker elixir

 -- Syntax Checker: Syntax checker emacs-lisp

 -- Syntax Checker: Syntax checker emacs-lisp-checkdoc

 -- Syntax Checker: Syntax checker erlang

 -- Syntax Checker: Syntax checker eruby-erubis

 -- Syntax Checker: Syntax checker go-gofmt

 -- Syntax Checker: Syntax checker go-build

 -- Syntax Checker: Syntax checker go-test

 -- Syntax Checker: Syntax checker haml

 -- Syntax Checker: Syntax checker handlebars

 -- Syntax Checker: Syntax checker haskell-ghc

 -- Syntax Checker: Syntax checker haskell-hlint

 -- Syntax Checker: Syntax checker html-tidy

 -- Syntax Checker: Syntax checker javascript-jshint

 -- Syntax Checker: Syntax checker javascript-eslint

 -- Syntax Checker: Syntax checker javascript-gjslint

 -- Syntax Checker: Syntax checker json-jsonlint

 -- Syntax Checker: Syntax checker less

 -- Syntax Checker: Syntax checker lua

 -- Syntax Checker: Syntax checker perl

 -- Syntax Checker: Syntax checker php

 -- Syntax Checker: Syntax checker php-phpmd

 -- Syntax Checker: Syntax checker php-phpcs

 -- Syntax Checker: Syntax checker puppet-parser

 -- Syntax Checker: Syntax checker puppet-lint

 -- Syntax Checker: Syntax checker python-flake8

 -- Syntax Checker: Syntax checker python-pylint

 -- Syntax Checker: Syntax checker racket

 -- Syntax Checker: Syntax checker rst

 -- Syntax Checker: Syntax checker rst-sphinx

 -- Syntax Checker: Syntax checker ruby-rubocop

 -- Syntax Checker: Syntax checker ruby-rubylint

 -- Syntax Checker: Syntax checker ruby

 -- Syntax Checker: Syntax checker ruby-jruby

 -- Syntax Checker: Syntax checker rust

 -- Syntax Checker: Syntax checker sass

 -- Syntax Checker: Syntax checker scala

 -- Syntax Checker: Syntax checker scss

 -- Syntax Checker: Syntax checker sh-dash

 -- Syntax Checker: Syntax checker sh-bash

 -- Syntax Checker: Syntax checker slim

 -- Syntax Checker: Syntax checker tex-chktex

 -- Syntax Checker: Syntax checker tex-lacheck

 -- Syntax Checker: Syntax checker texinfo

 -- Syntax Checker: Syntax checker verilog-verilator

 -- Syntax Checker: Syntax checker xml-xmlstarlet

 -- Syntax Checker: Syntax checker xml-xmllint

 -- Syntax Checker: Syntax checker yaml-jsyaml

 -- Syntax Checker: Syntax checker yaml-ruby

 -- Syntax Checker: Syntax checker zsh


File: flycheck.info,  Node: Glossary,  Next: Index,  Prev: Available syntax checkers,  Up: Top

10 Glossary
***********

syntax checker

     A symbol which is defined as syntax checker with *note
     flycheck-define-checker: 75.

registered syntax checker

     A *note syntax checker: 22. available for automatic selection, i.e.
     that is contained in *note flycheck-checkers: 20.

disabled syntax checker

     A *note syntax checker: 22. explicitly excluded from available
     selection, i.e.  that is contained in *note
     flycheck-disabled-checkers: 21.

enabled syntax checker

     A *note registered syntax checker: 23. which is not a *note
     disabled syntax checker: 115.

suitable syntax checker

     A *note syntax checker: 22. which can be used to check the current
     buffer.  Precisely, a syntax checker which

        - which can be used for the current major mode,

        - and whose predicate succeeds,

        - and whose syntax checker tool exists.


File: flycheck.info,  Node: Index,  Prev: Glossary,  Up: Top

Index
*****

 [index ]
* Menu:

* ;command; Syntax checker property:     Defining new syntax checkers.
                                                              (line  33)
* ;error-parser; Syntax checker property: Defining new syntax checkers.
                                                              (line 292)
* ;error-patterns; Syntax checker property: Defining new syntax checkers.
                                                              (line 239)
* ;modes; Syntax checker property:       Defining new syntax checkers.
                                                              (line 317)
* ;next-checkers; Syntax checker property: Defining new syntax checkers.
                                                              (line 344)
* ;predicate; Syntax checker property:   Defining new syntax checkers.
                                                              (line 330)
* asciidoc; Syntax checker:              Available syntax checkers.
                                                              (line  14)
* bash; Syntax checker:                  Available syntax checkers.
                                                              (line  16)
* c/c++-clang; Syntax checker:           Available syntax checkers.
                                                              (line  18)
* c/c++-cppcheck; Syntax checker:        Available syntax checkers.
                                                              (line  20)
* cfengine; Syntax checker:              Available syntax checkers.
                                                              (line  22)
* chef-foodcritic; Syntax checker:       Available syntax checkers.
                                                              (line  24)
* coffee-coffeelint; Syntax checker:     Available syntax checkers.
                                                              (line  28)
* coffee; Syntax checker:                Available syntax checkers.
                                                              (line  26)
* css-csslint; Syntax checker:           Available syntax checkers.
                                                              (line  30)
* d-dmd; Syntax checker:                 Available syntax checkers.
                                                              (line  32)
* disabled syntax checker:               Glossary.            (line  14)
* elixir; Syntax checker:                Available syntax checkers.
                                                              (line  34)
* emacs-lisp-checkdoc; Syntax checker:   Available syntax checkers.
                                                              (line  38)
* emacs-lisp; Syntax checker:            Available syntax checkers.
                                                              (line  36)
* enabled syntax checker:                Glossary.            (line  20)
* erlang; Syntax checker:                Available syntax checkers.
                                                              (line  40)
* eruby-erubis; Syntax checker:          Available syntax checkers.
                                                              (line  42)
* flycheck-add-next-checker; Emacs Lisp function: Extending syntax checkers.
                                                              (line   8)
* flycheck-after-syntax-check-hook; Emacs Lisp hook: Syntax checking.
                                                              (line  95)
* flycheck-before-syntax-check-hook; Emacs Lisp hook: Syntax checking.
                                                              (line 114)
* flycheck-buffer; Emacs Lisp command:   Syntax checking.     (line  67)
* flycheck-check-syntax-automatically; Emacs Lisp user option: Syntax checking.
                                                              (line  19)
* flycheck-checker; Emacs Lisp variable: Syntax checker selection.
                                                              (line  66)
* flycheck-checkers; Emacs Lisp user option: Syntax checker selection.
                                                              (line  10)
* flycheck-chktexrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line   9)
* flycheck-clang-definitions; Emacs Lisp user option: Syntax checker options.
                                                              (line  10)
* flycheck-clang-include-path; Emacs Lisp user option: Syntax checker options.
                                                              (line  14)
* flycheck-clang-includes; Emacs Lisp user option: Syntax checker options.
                                                              (line  18)
* flycheck-clang-language-standard; Emacs Lisp user option: Syntax checker options.
                                                              (line  22)
* flycheck-clang-ms-extensions; Emacs Lisp user option: Syntax checker options.
                                                              (line  26)
* flycheck-clang-no-rtti; Emacs Lisp user option: Syntax checker options.
                                                              (line  30)
* flycheck-clang-standard-library; Emacs Lisp user option: Syntax checker options.
                                                              (line  34)
* flycheck-clang-warnings; Emacs Lisp user option: Syntax checker options.
                                                              (line  38)
* flycheck-clear; Emacs Lisp command:    Error reporting.     (line 178)
* flycheck-coffeelintrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  13)
* flycheck-completion-system; Emacs Lisp user option: Syntax checker selection.
                                                              (line  94)
* flycheck-copy-messages-as-kill; Emacs Lisp command: Error reporting.
                                                              (line 146)
* flycheck-count-errors; Emacs Lisp function: Error API.      (line 151)
* flycheck-cppcheck-checks; Emacs Lisp user option: Syntax checker options.
                                                              (line  42)
* flycheck-current-errors; Emacs Lisp variable: Error API.    (line 146)
* flycheck-def-config-file-var; Emacs Lisp macro: Defining new syntax checkers.
                                                              (line 369)
* flycheck-def-option-var; Emacs Lisp macro: Defining new syntax checkers.
                                                              (line 386)
* flycheck-define-checker; Emacs Lisp macro: Defining new syntax checkers.
                                                              (line   8)
* flycheck-define-error-level; Emacs Lisp function: Error levels.
                                                              (line  23)
* flycheck-describe-checker; Emacs Lisp command: Syntax checker selection.
                                                              (line 128)
* flycheck-disabled-checkers; Emacs Lisp user option: Syntax checker selection.
                                                              (line  20)
* flycheck-display-error-messages; Emacs Lisp function: Error reporting.
                                                              (line 133)
* flycheck-display-errors-delay; Emacs Lisp user option: Error reporting.
                                                              (line 116)
* flycheck-display-errors-function; Emacs Lisp user option: Error reporting.
                                                              (line 124)
* flycheck-emacs-lisp-initialize-packages; Emacs Lisp user option: Syntax checker options.
                                                              (line  46)
* flycheck-emacs-lisp-load-path; Emacs Lisp user option: Syntax checker options.
                                                              (line  56)
* flycheck-emacs-lisp-package-user-dir; Emacs Lisp user option: Syntax checker options.
                                                              (line  67)
* flycheck-error-buffer; Emacs Lisp slot: Error API.          (line  15)
* flycheck-error-checker; Emacs Lisp slot: Error API.         (line  24)
* flycheck-error-column-region; Emacs Lisp function: Error API.
                                                              (line 101)
* flycheck-error-column; Emacs Lisp slot: Error API.          (line  36)
* flycheck-error-filename; Emacs Lisp slot: Error API.        (line  28)
* flycheck-error-format; Emacs Lisp function: Error API.      (line 139)
* flycheck-error-level; Emacs Lisp slot: Error API.           (line  47)
* flycheck-error-line-region; Emacs Lisp function: Error API. (line  96)
* flycheck-error-line; Emacs Lisp slot:  Error API.           (line  32)
* flycheck-error-message; Emacs Lisp slot: Error API.         (line  43)
* flycheck-error-new-at; Emacs Lisp function: Error API.      (line  55)
* flycheck-error-new; Emacs Lisp function: Error API.         (line  76)
* flycheck-error-pos; Emacs Lisp function: Error API.         (line 130)
* flycheck-error-sexp-region; Emacs Lisp function: Error API. (line 109)
* flycheck-error-with-buffer; Emacs Lisp macro: Error API.    (line  89)
* flycheck-error; Emacs Lisp CL struct:  Error API.           (line  10)
* flycheck-error; Emacs Lisp face:       Error reporting.     (line  16)
* flycheck-eslint-rulesdir; Emacs Lisp user option: Syntax checker options.
                                                              (line  71)
* flycheck-eslintrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  17)
* flycheck-first-error; Emacs Lisp command: Error navigation. (line  54)
* flycheck-flake8-maximum-complexity; Emacs Lisp user option: Syntax checker options.
                                                              (line  76)
* flycheck-flake8-maximum-line-length; Emacs Lisp user option: Syntax checker options.
                                                              (line  81)
* flycheck-flake8rc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  21)
* flycheck-fringe-error; Emacs Lisp face: Error reporting.    (line  63)
* flycheck-fringe-info; Emacs Lisp face: Error reporting.     (line  63)
* flycheck-fringe-warning; Emacs Lisp face: Error reporting.  (line  63)
* flycheck-ghc-no-user-package-database; Emacs Lisp user option: Syntax checker options.
                                                              (line  86)
* flycheck-ghc-package-databases; Emacs Lisp user option: Syntax checker options.
                                                              (line  90)
* flycheck-ghc-search-path; Emacs Lisp user option: Syntax checker options.
                                                              (line  94)
* flycheck-gjslintrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  25)
* flycheck-google-max-messages; Emacs Lisp user option: Error reporting.
                                                              (line 164)
* flycheck-google-messages; Emacs Lisp command: Error reporting.
                                                              (line 152)
* flycheck-has-errors-p; Emacs Lisp function: Error API.      (line 157)
* flycheck-highlighting-mode; Emacs Lisp user option: Error reporting.
                                                              (line  33)
* flycheck-idle-change-delay; Emacs Lisp user option: Syntax checking.
                                                              (line  53)
* flycheck-indication-mode; Emacs Lisp user option: Error reporting.
                                                              (line  70)
* flycheck-info; Emacs Lisp face:        Error reporting.     (line  16)
* flycheck-jshintrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  29)
* flycheck-list-errors; Emacs Lisp command: Error reporting.  (line 100)
* flycheck-locate-config-file-functions; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  49)
* flycheck-mode; Emacs Lisp command:     Flycheck Mode.       (line   8)
* flycheck-mode; Emacs Lisp user option: Flycheck Mode.       (line  12)
* flycheck-next-error; Emacs Lisp command: Error navigation.  (line  36)
* flycheck-option-comma-separated-list; Emacs Lisp function: Option filters.
                                                              (line  15)
* flycheck-option-int; Emacs Lisp function: Option filters.   (line  10)
* flycheck-parse-checkstyle; Emacs Lisp function: Error parsers.
                                                              (line  19)
* flycheck-parse-with-patterns; Emacs Lisp function: Error parsers.
                                                              (line  13)
* flycheck-parse-xml-string; Emacs Lisp function: Error parser API.
                                                              (line   8)
* flycheck-phpcs-standard; Emacs Lisp user option: Syntax checker options.
                                                              (line  98)
* flycheck-phpmd-rulesets; Emacs Lisp user option: Syntax checker options.
                                                              (line 102)
* flycheck-previous-error; Emacs Lisp command: Error navigation.
                                                              (line  45)
* flycheck-process-error-functions; Emacs Lisp hook: Error reporting.
                                                              (line  84)
* flycheck-pylintrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  33)
* flycheck-rubocop-lint-only; Emacs Lisp user option: Syntax checker options.
                                                              (line 106)
* flycheck-rubocoprc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  37)
* flycheck-sass-compass; Emacs Lisp user option: Syntax checker options.
                                                              (line 110)
* flycheck-scss-compass; Emacs Lisp user option: Syntax checker options.
                                                              (line 114)
* flycheck-select-checker; Emacs Lisp command: Syntax checker selection.
                                                              (line  45)
* flycheck-set-checker-executable; Emacs Lisp command: Syntax checker executables.
                                                              (line  22)
* flycheck-sphinx-warn-on-missing-references; Emacs Lisp user option: Syntax checker options.
                                                              (line 118)
* flycheck-standard-error-navigation; Emacs Lisp user option: Error navigation.
                                                              (line  16)
* flycheck-syntax-check-failed-hook; Emacs Lisp hook: Syntax checking.
                                                              (line 131)
* flycheck-tidyrc; Emacs Lisp user option: Syntax checker configuration files.
                                                              (line  41)
* flycheck-warning; Emacs Lisp face:     Error reporting.     (line  16)
* global-flycheck-mode; Emacs Lisp command: Flycheck Mode.    (line  16)
* global-flycheck-mode; Emacs Lisp user option: Flycheck Mode.
                                                              (line  33)
* go-build; Syntax checker:              Available syntax checkers.
                                                              (line  46)
* go-gofmt; Syntax checker:              Available syntax checkers.
                                                              (line  44)
* go-test; Syntax checker:               Available syntax checkers.
                                                              (line  48)
* haml; Syntax checker:                  Available syntax checkers.
                                                              (line  50)
* handlebars; Syntax checker:            Available syntax checkers.
                                                              (line  52)
* haskell-ghc; Syntax checker:           Available syntax checkers.
                                                              (line  54)
* haskell-hlint; Syntax checker:         Available syntax checkers.
                                                              (line  56)
* html-tidy; Syntax checker:             Available syntax checkers.
                                                              (line  58)
* javascript-eslint; Syntax checker:     Available syntax checkers.
                                                              (line  62)
* javascript-gjslint; Syntax checker:    Available syntax checkers.
                                                              (line  64)
* javascript-jshint; Syntax checker:     Available syntax checkers.
                                                              (line  60)
* json-jsonlint; Syntax checker:         Available syntax checkers.
                                                              (line  66)
* less; Syntax checker:                  Available syntax checkers.
                                                              (line  68)
* list-flycheck-errors; Emacs Lisp command: Error reporting.  (line 100)
* lua; Syntax checker:                   Available syntax checkers.
                                                              (line  70)
* perl; Syntax checker:                  Available syntax checkers.
                                                              (line  72)
* php-phpcs; Syntax checker:             Available syntax checkers.
                                                              (line  78)
* php-phpmd; Syntax checker:             Available syntax checkers.
                                                              (line  76)
* php; Syntax checker:                   Available syntax checkers.
                                                              (line  74)
* puppet-lint; Syntax checker:           Available syntax checkers.
                                                              (line  82)
* puppet-parser; Syntax checker:         Available syntax checkers.
                                                              (line  80)
* python-flake8; Syntax checker:         Available syntax checkers.
                                                              (line  84)
* python-pylint; Syntax checker:         Available syntax checkers.
                                                              (line  86)
* racket; Syntax checker:                Available syntax checkers.
                                                              (line  88)
* registered syntax checker:             Glossary.            (line   9)
* rst-sphinx; Syntax checker:            Available syntax checkers.
                                                              (line  92)
* rst; Syntax checker:                   Available syntax checkers.
                                                              (line  90)
* ruby-jruby; Syntax checker:            Available syntax checkers.
                                                              (line 100)
* ruby-rubocop; Syntax checker:          Available syntax checkers.
                                                              (line  94)
* ruby-rubylint; Syntax checker:         Available syntax checkers.
                                                              (line  96)
* ruby; Syntax checker:                  Available syntax checkers.
                                                              (line  98)
* rust; Syntax checker:                  Available syntax checkers.
                                                              (line 102)
* sass; Syntax checker:                  Available syntax checkers.
                                                              (line 104)
* scala; Syntax checker:                 Available syntax checkers.
                                                              (line 106)
* scss; Syntax checker:                  Available syntax checkers.
                                                              (line 108)
* sh-bash; Syntax checker:               Available syntax checkers.
                                                              (line 112)
* sh-dash; Syntax checker:               Available syntax checkers.
                                                              (line 110)
* slim; Syntax checker:                  Available syntax checkers.
                                                              (line 114)
* suitable syntax checker:               Glossary.            (line  25)
* syntax checker:                        Glossary.            (line   6)
* tex-chktex; Syntax checker:            Available syntax checkers.
                                                              (line 116)
* tex-lacheck; Syntax checker:           Available syntax checkers.
                                                              (line 118)
* texinfo; Syntax checker:               Available syntax checkers.
                                                              (line 120)
* verilog-verilator; Syntax checker:     Available syntax checkers.
                                                              (line 122)
* xml-xmllint; Syntax checker:           Available syntax checkers.
                                                              (line 126)
* xml-xmlstarlet; Syntax checker:        Available syntax checkers.
                                                              (line 124)
* yaml-jsyaml; Syntax checker:           Available syntax checkers.
                                                              (line 128)
* yaml-ruby; Syntax checker:             Available syntax checkers.
                                                              (line 130)
* zsh; Syntax checker:                   Available syntax checkers.
                                                              (line 132)



Tag Table:
Node: Top364
Ref: manual/index doc588
Ref: 0588
Node: Introduction3367
Ref: manual/introduction introduction3447
Ref: 23447
Ref: manual/introduction the-flycheck-manual3447
Ref: 33447
Ref: manual/introduction doc3447
Ref: 43447
Node: Features4116
Ref: manual/introduction features4204
Ref: 54204
Node: 3rd party extensions6791
Ref: manual/introduction rd-party-extensions6900
Ref: 66900
Ref: 3rd party extensions-Footnote-17701
Ref: 3rd party extensions-Footnote-27751
Ref: 3rd party extensions-Footnote-37788
Ref: 3rd party extensions-Footnote-47849
Ref: 3rd party extensions-Footnote-57905
Ref: 3rd party extensions-Footnote-67960
Ref: 3rd party extensions-Footnote-78003
Ref: 3rd party extensions-Footnote-88056
Ref: 3rd party extensions-Footnote-98109
Node: Installation8141
Ref: manual/introduction installation8233
Ref: 78233
Ref: manual/introduction mercury-language8233
Ref: 88233
Ref: Installation-Footnote-19745
Ref: Installation-Footnote-29778
Ref: Installation-Footnote-39813
Node: Usage9850
Ref: manual/usage usage9945
Ref: a9945
Ref: manual/usage marmalade9945
Ref: b9945
Ref: manual/usage doc9945
Ref: c9945
Node: Flycheck Mode10134
Ref: manual/usage flycheck-mode10215
Ref: d10215
Ref: manual/usage id110215
Ref: e10215
Ref: manual/usage el functions flycheck-mode10305
Ref: f10305
Ref: manual/usage el variables flycheck-mode10389
Ref: 1010389
Ref: manual/usage el functions global-flycheck-mode10495
Ref: 1110495
Ref: manual/usage el variables global-flycheck-mode11172
Ref: 1311172
Node: Syntax checking11505
Ref: manual/usage id211619
Ref: 1411619
Ref: manual/usage syntax-checking11619
Ref: 1511619
Ref: manual/usage el variables flycheck-check-syntax-automatically11980
Ref: 1611980
Ref: manual/usage el variables flycheck-idle-change-delay13087
Ref: 1813087
Ref: manual/usage el functions flycheck-buffer13652
Ref: 1713652
Ref: manual/usage el variables flycheck-after-syntax-check-hook14545
Ref: 1c14545
Ref: manual/usage el variables flycheck-before-syntax-check-hook15302
Ref: 1915302
Ref: manual/usage el variables flycheck-syntax-check-failed-hook15837
Ref: 1e15837
Node: Syntax checker selection16251
Ref: manual/usage syntax-checker-selection16380
Ref: 1a16380
Ref: manual/usage id316380
Ref: 1f16380
Ref: manual/usage el variables flycheck-checkers16608
Ref: 2016608
Ref: manual/usage el variables flycheck-disabled-checkers16995
Ref: 2116995
Ref: manual/usage el functions flycheck-select-checker18037
Ref: 2518037
Ref: manual/usage el variables flycheck-checker18663
Ref: 2618663
Ref: manual/usage el variables flycheck-completion-system19662
Ref: 2719662
Ref: manual/usage el functions flycheck-describe-checker20850
Ref: 920850
Ref: Syntax checker selection-Footnote-120981
Ref: Syntax checker selection-Footnote-221019
Node: Syntax checker configuration21060
Ref: manual/usage syntax-checker-configuration21189
Ref: 2821189
Ref: manual/usage id421189
Ref: 2921189
Node: Syntax checker executables21366
Ref: manual/usage syntax-checker-executables21490
Ref: 2a21490
Ref: manual/usage id521490
Ref: 2b21490
Ref: manual/usage el functions flycheck-set-checker-executable22289
Ref: 2c22289
Node: Syntax checker options22758
Ref: manual/usage id622925
Ref: 2d22925
Ref: manual/usage syntax-checker-options22925
Ref: 2e22925
Ref: manual/usage el variables flycheck-clang-definitions23184
Ref: 2f23184
Ref: manual/usage el variables flycheck-clang-include-path23306
Ref: 3023306
Ref: manual/usage el variables flycheck-clang-includes23413
Ref: 3123413
Ref: manual/usage el variables flycheck-clang-language-standard23521
Ref: 3223521
Ref: manual/usage el variables flycheck-clang-ms-extensions23635
Ref: 3323635
Ref: manual/usage el variables flycheck-clang-no-rtti23761
Ref: 3423761
Ref: manual/usage el variables flycheck-clang-standard-library23866
Ref: 3523866
Ref: manual/usage el variables flycheck-clang-warnings23985
Ref: 3623985
Ref: manual/usage el variables flycheck-cppcheck-checks24097
Ref: 3724097
Ref: manual/usage el variables flycheck-emacs-lisp-initialize-packages24208
Ref: 3824208
Ref: manual/usage el variables flycheck-emacs-lisp-load-path24679
Ref: 3924679
Ref: manual/usage el variables flycheck-emacs-lisp-package-user-dir25097
Ref: 3a25097
Ref: manual/usage el variables flycheck-eslint-rulesdir25233
Ref: 3b25233
Ref: manual/usage el variables flycheck-flake8-maximum-complexity25377
Ref: 3c25377
Ref: manual/usage el variables flycheck-flake8-maximum-line-length25558
Ref: 3d25558
Ref: manual/usage el variables flycheck-ghc-no-user-package-database25752
Ref: 3e25752
Ref: manual/usage el variables flycheck-ghc-package-databases25894
Ref: 3f25894
Ref: manual/usage el variables flycheck-ghc-search-path26011
Ref: 4026011
Ref: manual/usage el variables flycheck-phpcs-standard26143
Ref: 4126143
Ref: manual/usage el variables flycheck-phpmd-rulesets26250
Ref: 4226250
Ref: manual/usage el variables flycheck-rubocop-lint-only26351
Ref: 4326351
Ref: manual/usage el variables flycheck-sass-compass26470
Ref: 4426470
Ref: manual/usage el variables flycheck-scss-compass26588
Ref: 4526588
Ref: manual/usage el variables flycheck-sphinx-warn-on-missing-references26706
Ref: 4626706
Node: Syntax checker configuration files26846
Ref: manual/usage id726978
Ref: 4726978
Ref: manual/usage syntax-checker-configuration-files26978
Ref: 4826978
Ref: manual/usage el variables flycheck-chktexrc27168
Ref: 4927168
Ref: manual/usage el variables flycheck-coffeelintrc27286
Ref: 4a27286
Ref: manual/usage el variables flycheck-eslintrc27415
Ref: 4b27415
Ref: manual/usage el variables flycheck-flake8rc27540
Ref: 4c27540
Ref: manual/usage el variables flycheck-gjslintrc27661
Ref: 4d27661
Ref: manual/usage el variables flycheck-jshintrc27788
Ref: 4e27788
Ref: manual/usage el variables flycheck-pylintrc27913
Ref: 4f27913
Ref: manual/usage el variables flycheck-rubocoprc28034
Ref: 5028034
Ref: manual/usage el variables flycheck-tidyrc28155
Ref: 5128155
Ref: manual/usage el variables flycheck-locate-config-file-functions28457
Ref: 5228457
Ref: Syntax checker configuration files-Footnote-130544
Node: Error reporting30590
Ref: manual/usage error-reporting30711
Ref: 1b30711
Ref: manual/usage id830711
Ref: 5330711
Ref: manual/usage el faces flycheck-error31092
Ref: 5631092
Ref: manual/usage el faces flycheck-warning31122
Ref: 5731122
Ref: manual/usage el faces flycheck-info31154
Ref: 5831154
Ref: manual/usage el variables flycheck-highlighting-mode31783
Ref: 5531783
Ref: manual/usage el faces flycheck-fringe-error32699
Ref: 5932699
Ref: manual/usage el faces flycheck-fringe-warning32736
Ref: 5a32736
Ref: manual/usage el faces flycheck-fringe-info32775
Ref: 5b32775
Ref: manual/usage el variables flycheck-indication-mode32907
Ref: 5432907
Ref: manual/usage el variables flycheck-process-error-functions33434
Ref: 5c33434
Ref: manual/usage el functions flycheck-list-errors34091
Ref: 5e34091
Ref: manual/usage el functions list-flycheck-errors34130
Ref: 5f34130
Ref: manual/usage el variables flycheck-display-errors-delay34658
Ref: 6034658
Ref: manual/usage el variables flycheck-display-errors-function34915
Ref: 6134915
Ref: manual/usage el functions flycheck-display-error-messages35231
Ref: 6235231
Ref: manual/usage el functions flycheck-copy-messages-as-kill35863
Ref: 6335863
Ref: manual/usage el functions flycheck-google-messages36016
Ref: 6436016
Ref: manual/usage el variables flycheck-google-max-messages36369
Ref: 6536369
Ref: manual/usage el functions flycheck-clear36899
Ref: 6636899
Ref: Error reporting-Footnote-137147
Ref: Error reporting-Footnote-237198
Ref: Error reporting-Footnote-337247
Ref: Error reporting-Footnote-437305
Node: Error navigation37339
Ref: manual/usage error-navigation37441
Ref: 6737441
Ref: manual/usage id937441
Ref: 6837441
Ref: manual/usage el variables flycheck-standard-error-navigation37998
Ref: 6937998
Ref: manual/usage el functions flycheck-next-error38867
Ref: 6a38867
Ref: manual/usage el functions flycheck-previous-error39149
Ref: 6b39149
Ref: manual/usage el functions flycheck-first-error39427
Ref: 6c39427
Node: Mode line39720
Ref: manual/usage id1039798
Ref: 6d39798
Ref: manual/usage mode-line39798
Ref: 6e39798
Node: Extending Flycheck40708
Ref: manual/extending doc40803
Ref: 7040803
Ref: manual/extending extending-flycheck40803
Ref: 7140803
Node: Defining new syntax checkers41284
Ref: manual/extending defining-new-syntax-checkers41390
Ref: 7341390
Ref: manual/extending id141390
Ref: 7441390
Ref: manual/extending el functions flycheck-define-checker41530
Ref: 7541530
Ref: manual/extending checker-property- command42667
Ref: 7642667
Ref: manual/extending checker-property- error-patterns51913
Ref: 7951913
Ref: manual/extending checker-property- error-parser54227
Ref: 7a54227
Ref: manual/extending checker-property- modes55508
Ref: 7755508
Ref: manual/extending checker-property- predicate55971
Ref: 7855971
Ref: manual/extending checker-property- next-checkers56627
Ref: 7b56627
Ref: manual/extending el functions flycheck-def-config-file-var57602
Ref: 7d57602
Ref: manual/extending el functions flycheck-def-option-var58355
Ref: 7f58355
Node: Error levels59100
Ref: manual/extending id259228
Ref: 8459228
Ref: manual/extending error-levels59228
Ref: 8559228
Ref: manual/extending el functions flycheck-define-error-level59548
Ref: 8059548
Node: Error parsers60877
Ref: manual/extending error-parsers60991
Ref: 8260991
Ref: manual/extending id360991
Ref: 8660991
Ref: manual/extending el functions flycheck-parse-with-patterns61303
Ref: 8361303
Ref: manual/extending el functions flycheck-parse-checkstyle61485
Ref: 8761485
Ref: Error parsers-Footnote-162204
Node: Option filters62247
Ref: manual/extending id462374
Ref: 8962374
Ref: manual/extending option-filters62374
Ref: 7e62374
Ref: manual/extending el functions flycheck-option-int62606
Ref: 8a62606
Ref: manual/extending el functions flycheck-option-comma-separated-list62762
Ref: 8b62762
Node: Extending syntax checkers63023
Ref: manual/extending id563145
Ref: 8c63145
Ref: manual/extending extending-syntax-checkers63145
Ref: 8d63145
Ref: manual/extending el functions flycheck-add-next-checker63263
Ref: 8e63263
Node: Examples63749
Ref: manual/extending examples63848
Ref: 8f63848
Node: Basic syntax checkers64024
Ref: manual/extending id664132
Ref: 9064132
Ref: manual/extending basic-syntax-checkers64132
Ref: 9164132
Node: Syntax checkers with predicates67239
Ref: manual/extending syntax-checkers-with-predicates67395
Ref: 9267395
Node: Configuration files for syntax checkers69441
Ref: manual/extending configuration-files-for-syntax-checkers69600
Ref: 9369600
Node: Chaining syntax checkers72201
Ref: manual/extending chaining-syntax-checkers72320
Ref: 9472320
Node: Flycheck API73656
Ref: manual/api doc73758
Ref: 9573758
Ref: manual/api flycheck-api73758
Ref: 9673758
Node: Error API74348
Ref: manual/api error-api74433
Ref: 5d74433
Ref: manual/api id174433
Ref: 9774433
Ref: manual/api el structs flycheck-error74611
Ref: 8174611
Ref: manual/api el functions flycheck-error-buffer74745
Ref: 9874745
Ref: manual/api el functions flycheck-error-checker75048
Ref: 9975048
Ref: manual/api el functions flycheck-error-filename75133
Ref: 9a75133
Ref: manual/api el functions flycheck-error-line75228
Ref: 9b75228
Ref: manual/api el functions flycheck-error-column75316
Ref: 9c75316
Ref: manual/api el functions flycheck-error-message75523
Ref: 9d75523
Ref: manual/api el functions flycheck-error-level75607
Ref: 9e75607
Ref: manual/api el functions flycheck-error-new-at75860
Ref: 9f75860
Ref: manual/api el functions flycheck-error-new76907
Ref: a076907
Ref: manual/api el functions flycheck-error-with-buffer77386
Ref: a177386
Ref: manual/api el functions flycheck-error-line-region77643
Ref: a277643
Ref: manual/api el functions flycheck-error-column-region77839
Ref: a377839
Ref: manual/api el functions flycheck-error-sexp-region78132
Ref: a478132
Ref: manual/api el functions flycheck-error-pos79109
Ref: a579109
Ref: manual/api el functions flycheck-error-format79474
Ref: a679474
Ref: manual/api el variables flycheck-current-errors79681
Ref: 1d79681
Ref: manual/api el functions flycheck-count-errors79845
Ref: a779845
Ref: manual/api el functions flycheck-has-errors-p80023
Ref: a880023
Node: Error parser API80349
Ref: manual/api error-parser-api80434
Ref: 8880434
Ref: manual/api id280434
Ref: a980434
Ref: manual/api el functions flycheck-parse-xml-string80541
Ref: aa80541
Node: Contributing80679
Ref: manual/contributing contributing80770
Ref: ab80770
Ref: manual/contributing doc80770
Ref: ac80770
Ref: Contributing-Footnote-181133
Node: Reporting issues81185
Ref: manual/contributing id181278
Ref: ad81278
Ref: manual/contributing reporting-issues81278
Ref: 6f81278
Node: Contributing code81726
Ref: manual/contributing id281819
Ref: ae81819
Ref: manual/contributing contributing-code81819
Ref: af81819
Node: General82105
Ref: manual/contributing general82187
Ref: b082187
Node: Code style82310
Ref: manual/contributing code-style82416
Ref: b182416
Node: Commit messages82841
Ref: manual/contributing commit-messages82968
Ref: b282968
Ref: Commit messages-Footnote-184758
Ref: Commit messages-Footnote-284836
Ref: Commit messages-Footnote-384880
Node: Contributing syntax checkers84920
Ref: manual/contributing contributing-syntax-checkers85050
Ref: 7285050
Ref: manual/contributing id385050
Ref: b385050
Node: Pull requests85553
Ref: manual/contributing id485659
Ref: b485659
Ref: manual/contributing pull-requests85659
Ref: b585659
Ref: Pull requests-Footnote-186165
Node: Credits86226
Ref: manual/credits credits86312
Ref: b686312
Ref: manual/credits doc86312
Ref: b786312
Ref: manual/credits pull-request86312
Ref: b886312
Ref: Credits-Footnote-189665
Ref: Credits-Footnote-289702
Ref: Credits-Footnote-389737
Ref: Credits-Footnote-489780
Ref: Credits-Footnote-589814
Ref: Credits-Footnote-689847
Ref: Credits-Footnote-789880
Ref: Credits-Footnote-889915
Ref: Credits-Footnote-989949
Ref: Credits-Footnote-1089992
Ref: Credits-Footnote-1190033
Ref: Credits-Footnote-1290066
Ref: Credits-Footnote-1390108
Ref: Credits-Footnote-1490147
Ref: Credits-Footnote-1590196
Ref: Credits-Footnote-1690236
Ref: Credits-Footnote-1790272
Ref: Credits-Footnote-1890305
Ref: Credits-Footnote-1990345
Ref: Credits-Footnote-2090388
Ref: Credits-Footnote-2190427
Ref: Credits-Footnote-2290469
Ref: Credits-Footnote-2390505
Ref: Credits-Footnote-2490542
Ref: Credits-Footnote-2590604
Ref: Credits-Footnote-2690640
Ref: Credits-Footnote-2790672
Ref: Credits-Footnote-2890708
Ref: Credits-Footnote-2990765
Ref: Credits-Footnote-3090805
Ref: Credits-Footnote-3190840
Ref: Credits-Footnote-3290878
Node: Changes90947
Ref: manual/changes changes91051
Ref: b991051
Ref: manual/changes doc91051
Ref: ba91051
Node: master unreleased91911
Ref: manual/changes master-unreleased91999
Ref: bb91999
Ref: master unreleased-Footnote-193158
Ref: master unreleased-Footnote-293214
Ref: master unreleased-Footnote-393244
Ref: master unreleased-Footnote-493300
Ref: master unreleased-Footnote-593356
Ref: master unreleased-Footnote-693412
Node: 0 16 Jan 11 201493468
Ref: manual/changes sphinx93581
Ref: bc93581
Ref: manual/changes jan-11-201493581
Ref: bd93581
Ref: 0 16 Jan 11 2014-Footnote-196348
Ref: 0 16 Jan 11 2014-Footnote-296404
Ref: 0 16 Jan 11 2014-Footnote-396459
Ref: 0 16 Jan 11 2014-Footnote-496515
Ref: 0 16 Jan 11 2014-Footnote-596571
Ref: 0 16 Jan 11 2014-Footnote-696627
Ref: 0 16 Jan 11 2014-Footnote-796683
Ref: 0 16 Jan 11 2014-Footnote-896739
Ref: 0 16 Jan 11 2014-Footnote-996795
Ref: 0 16 Jan 11 2014-Footnote-1096851
Ref: 0 16 Jan 11 2014-Footnote-1196908
Ref: 0 16 Jan 11 2014-Footnote-1296965
Ref: 0 16 Jan 11 2014-Footnote-1397022
Ref: 0 16 Jan 11 2014-Footnote-1497079
Ref: 0 16 Jan 11 2014-Footnote-1597136
Ref: 0 16 Jan 11 2014-Footnote-1697193
Ref: 0 16 Jan 11 2014-Footnote-1797250
Ref: 0 16 Jan 11 2014-Footnote-1897307
Ref: 0 16 Jan 11 2014-Footnote-1997364
Ref: 0 16 Jan 11 2014-Footnote-2097421
Ref: 0 16 Jan 11 2014-Footnote-2197478
Ref: 0 16 Jan 11 2014-Footnote-2297535
Node: 0 15 Nov 15 201397592
Ref: manual/changes nov-15-201397706
Ref: be97706
Ref: manual/changes flycheck-hdevtools97706
Ref: bf97706
Ref: 0 15 Nov 15 2013-Footnote-1101810
Ref: 0 15 Nov 15 2013-Footnote-2101866
Ref: 0 15 Nov 15 2013-Footnote-3101922
Ref: 0 15 Nov 15 2013-Footnote-4101978
Ref: 0 15 Nov 15 2013-Footnote-5102034
Ref: 0 15 Nov 15 2013-Footnote-6102090
Ref: 0 15 Nov 15 2013-Footnote-7102146
Ref: 0 15 Nov 15 2013-Footnote-8102187
Ref: 0 15 Nov 15 2013-Footnote-9102243
Ref: 0 15 Nov 15 2013-Footnote-10102299
Ref: 0 15 Nov 15 2013-Footnote-11102356
Ref: 0 15 Nov 15 2013-Footnote-12102413
Ref: 0 15 Nov 15 2013-Footnote-13102470
Ref: 0 15 Nov 15 2013-Footnote-14102527
Ref: 0 15 Nov 15 2013-Footnote-15102584
Ref: 0 15 Nov 15 2013-Footnote-16102641
Ref: 0 15 Nov 15 2013-Footnote-17102698
Ref: 0 15 Nov 15 2013-Footnote-18102755
Ref: 0 15 Nov 15 2013-Footnote-19102812
Ref: 0 15 Nov 15 2013-Footnote-20102869
Ref: 0 15 Nov 15 2013-Footnote-21102926
Ref: 0 15 Nov 15 2013-Footnote-22102983
Ref: 0 15 Nov 15 2013-Footnote-23103040
Ref: 0 15 Nov 15 2013-Footnote-24103097
Ref: 0 15 Nov 15 2013-Footnote-25103154
Ref: 0 15 Nov 15 2013-Footnote-26103211
Ref: 0 15 Nov 15 2013-Footnote-27103268
Ref: 0 15 Nov 15 2013-Footnote-28103325
Ref: 0 15 Nov 15 2013-Footnote-29103382
Ref: 0 15 Nov 15 2013-Footnote-30103439
Ref: 0 15 Nov 15 2013-Footnote-31103496
Node: 0 14 1 Aug 16 2013103553
Ref: manual/changes grizzl103667
Ref: c0103667
Ref: manual/changes aug-16-2013103667
Ref: c1103667
Ref: 0 14 1 Aug 16 2013-Footnote-1103818
Node: 0 14 Aug 15 2013103874
Ref: manual/changes aug-15-2013103988
Ref: c2103988
Ref: 0 14 Aug 15 2013-Footnote-1106886
Ref: 0 14 Aug 15 2013-Footnote-2106942
Ref: 0 14 Aug 15 2013-Footnote-3106998
Ref: 0 14 Aug 15 2013-Footnote-4107054
Ref: 0 14 Aug 15 2013-Footnote-5107110
Ref: 0 14 Aug 15 2013-Footnote-6107166
Ref: 0 14 Aug 15 2013-Footnote-7107222
Ref: 0 14 Aug 15 2013-Footnote-8107278
Ref: 0 14 Aug 15 2013-Footnote-9107334
Ref: 0 14 Aug 15 2013-Footnote-10107390
Ref: 0 14 Aug 15 2013-Footnote-11107447
Ref: 0 14 Aug 15 2013-Footnote-12107504
Ref: 0 14 Aug 15 2013-Footnote-13107561
Ref: 0 14 Aug 15 2013-Footnote-14107618
Ref: 0 14 Aug 15 2013-Footnote-15107675
Ref: 0 14 Aug 15 2013-Footnote-16107732
Ref: 0 14 Aug 15 2013-Footnote-17107789
Ref: 0 14 Aug 15 2013-Footnote-18107846
Ref: 0 14 Aug 15 2013-Footnote-19107903
Ref: 0 14 Aug 15 2013-Footnote-20107960
Ref: 0 14 Aug 15 2013-Footnote-21108017
Ref: 0 14 Aug 15 2013-Footnote-22108074
Node: 0 13 Jun 28 2013108131
Ref: manual/changes jun-28-2013108243
Ref: c3108243
Ref: 0 13 Jun 28 2013-Footnote-1110836
Ref: 0 13 Jun 28 2013-Footnote-2110892
Ref: 0 13 Jun 28 2013-Footnote-3110948
Ref: 0 13 Jun 28 2013-Footnote-4111004
Ref: 0 13 Jun 28 2013-Footnote-5111060
Ref: 0 13 Jun 28 2013-Footnote-6111116
Ref: 0 13 Jun 28 2013-Footnote-7111172
Node: 0 12 May 18 2013111228
Ref: manual/changes may-18-2013111340
Ref: c4111340
Ref: 0 12 May 18 2013-Footnote-1112151
Ref: 0 12 May 18 2013-Footnote-2112207
Ref: 0 12 May 18 2013-Footnote-3112263
Ref: 0 12 May 18 2013-Footnote-4112319
Node: 0 11 May 01 2013112375
Ref: manual/changes may-01-2013112487
Ref: c5112487
Ref: 0 11 May 01 2013-Footnote-1113435
Ref: 0 11 May 01 2013-Footnote-2113491
Ref: 0 11 May 01 2013-Footnote-3113547
Ref: 0 11 May 01 2013-Footnote-4113603
Ref: 0 11 May 01 2013-Footnote-5113649
Node: 0 10 Apr 21 2013113705
Ref: manual/changes apr-21-2013113816
Ref: c6113816
Ref: manual/changes projectile113816
Ref: c7113816
Ref: 0 10 Apr 21 2013-Footnote-1115439
Ref: 0 10 Apr 21 2013-Footnote-2115495
Ref: 0 10 Apr 21 2013-Footnote-3115551
Ref: 0 10 Apr 21 2013-Footnote-4115607
Ref: 0 10 Apr 21 2013-Footnote-5115663
Ref: 0 10 Apr 21 2013-Footnote-6115719
Ref: 0 10 Apr 21 2013-Footnote-7115777
Ref: 0 10 Apr 21 2013-Footnote-8115833
Ref: 0 10 Apr 21 2013-Footnote-9115888
Node: 0 9 Apr 13 2013115944
Ref: manual/changes apr-13-2013116053
Ref: c8116053
Ref: manual/changes google-this116053
Ref: c9116053
Ref: 0 9 Apr 13 2013-Footnote-1116431
Ref: 0 9 Apr 13 2013-Footnote-2116487
Node: 0 8 Apr 9 2013116543
Ref: manual/changes apr-9-2013116653
Ref: ca116653
Ref: 0 8 Apr 9 2013-Footnote-1117753
Ref: 0 8 Apr 9 2013-Footnote-2117808
Ref: 0 8 Apr 9 2013-Footnote-3117864
Ref: 0 8 Apr 9 2013-Footnote-4117919
Ref: 0 8 Apr 9 2013-Footnote-5117974
Ref: 0 8 Apr 9 2013-Footnote-6118029
Ref: 0 8 Apr 9 2013-Footnote-7118084
Ref: 0 8 Apr 9 2013-Footnote-8118139
Node: 0 7 1 Feb 23 2013118195
Ref: manual/changes feb-23-2013118305
Ref: cb118305
Ref: 0 7 1 Feb 23 2013-Footnote-1118922
Ref: 0 7 1 Feb 23 2013-Footnote-2118977
Node: 0 7 Feb 14 2013119032
Ref: manual/changes feb-14-2013119145
Ref: cc119145
Ref: 0 7 Feb 14 2013-Footnote-1119884
Ref: 0 7 Feb 14 2013-Footnote-2119939
Ref: 0 7 Feb 14 2013-Footnote-3119994
Ref: 0 7 Feb 14 2013-Footnote-4120049
Ref: 0 7 Feb 14 2013-Footnote-5120104
Node: 0 6 1 Jan 30 2013120159
Ref: manual/changes jan-30-2013120270
Ref: cd120270
Node: 0 6 Jan 29 2013120354
Ref: manual/changes jan-29-2013120465
Ref: ce120465
Ref: 0 6 Jan 29 2013-Footnote-1122416
Ref: 0 6 Jan 29 2013-Footnote-2122471
Ref: 0 6 Jan 29 2013-Footnote-3122526
Ref: 0 6 Jan 29 2013-Footnote-4122581
Ref: 0 6 Jan 29 2013-Footnote-5122636
Ref: 0 6 Jan 29 2013-Footnote-6122691
Ref: 0 6 Jan 29 2013-Footnote-7122746
Ref: 0 6 Jan 29 2013-Footnote-8122801
Ref: 0 6 Jan 29 2013-Footnote-9122856
Ref: 0 6 Jan 29 2013-Footnote-10122911
Ref: 0 6 Jan 29 2013-Footnote-11122967
Ref: 0 6 Jan 29 2013-Footnote-12123023
Ref: 0 6 Jan 29 2013-Footnote-13123079
Ref: 0 6 Jan 29 2013-Footnote-14123135
Ref: 0 6 Jan 29 2013-Footnote-15123191
Ref: 0 6 Jan 29 2013-Footnote-16123247
Ref: 0 6 Jan 29 2013-Footnote-17123303
Ref: 0 6 Jan 29 2013-Footnote-18123359
Ref: 0 6 Jan 29 2013-Footnote-19123415
Node: 0 5 Dec 28 2012123471
Ref: manual/changes dec-28-2012123580
Ref: cf123580
Ref: 0 5 Dec 28 2012-Footnote-1124360
Ref: 0 5 Dec 28 2012-Footnote-2124415
Ref: 0 5 Dec 28 2012-Footnote-3124470
Ref: 0 5 Dec 28 2012-Footnote-4124525
Ref: 0 5 Dec 28 2012-Footnote-5124580
Ref: 0 5 Dec 28 2012-Footnote-6124635
Ref: 0 5 Dec 28 2012-Footnote-7124690
Ref: 0 5 Dec 28 2012-Footnote-8124745
Ref: 0 5 Dec 28 2012-Footnote-9124800
Node: 0 4 Nov 21 2012124855
Ref: manual/changes nov-21-2012124964
Ref: d0124964
Ref: manual/changes flymake-cursor124964
Ref: d1124964
Ref: 0 4 Nov 21 2012-Footnote-1125403
Ref: 0 4 Nov 21 2012-Footnote-2125457
Ref: 0 4 Nov 21 2012-Footnote-3125511
Ref: 0 4 Nov 21 2012-Footnote-4125565
Ref: 0 4 Nov 21 2012-Footnote-5125619
Ref: 0 4 Nov 21 2012-Footnote-6125674
Ref: 0 4 Nov 21 2012-Footnote-7125729
Node: 0 3 Nov 21 2012125784
Ref: manual/changes id1125893
Ref: d2125893
Ref: 0 3 Nov 21 2012-Footnote-1126064
Node: 0 2 Oct 25 2012126118
Ref: manual/changes oct-25-2012126227
Ref: d3126227
Ref: 0 2 Oct 25 2012-Footnote-1126428
Node: 0 1 Oct 11 2012126482
Ref: manual/changes oct-11-2012126567
Ref: d4126567
Node: GNU Free Documentation License126806
Ref: manual/fdl doc126928
Ref: 1126928
Ref: manual/fdl gnu-free-documentation-license126928
Ref: d5126928
Node: Available syntax checkers151814
Ref: manual/checkers doc151937
Ref: d6151937
Ref: manual/checkers available-syntax-checkers151937
Ref: d7151937
Ref: manual/checkers syntax-checker-asciidoc152364
Ref: d8152364
Ref: manual/checkers syntax-checker-bash152409
Ref: d9152409
Ref: manual/checkers syntax-checker-c/c++-clang152450
Ref: da152450
Ref: manual/checkers syntax-checker-c/c++-cppcheck152498
Ref: db152498
Ref: manual/checkers syntax-checker-cfengine152549
Ref: dc152549
Ref: manual/checkers syntax-checker-chef-foodcritic152594
Ref: dd152594
Ref: manual/checkers syntax-checker-coffee152646
Ref: de152646
Ref: manual/checkers syntax-checker-coffee-coffeelint152689
Ref: df152689
Ref: manual/checkers syntax-checker-css-csslint152743
Ref: e0152743
Ref: manual/checkers syntax-checker-d-dmd152791
Ref: e1152791
Ref: manual/checkers syntax-checker-elixir152833
Ref: 7c152833
Ref: manual/checkers syntax-checker-emacs-lisp152876
Ref: e2152876
Ref: manual/checkers syntax-checker-emacs-lisp-checkdoc152923
Ref: e3152923
Ref: manual/checkers syntax-checker-erlang152979
Ref: e4152979
Ref: manual/checkers syntax-checker-eruby-erubis153022
Ref: e5153022
Ref: manual/checkers syntax-checker-go-gofmt153071
Ref: e6153071
Ref: manual/checkers syntax-checker-go-build153116
Ref: e7153116
Ref: manual/checkers syntax-checker-go-test153161
Ref: e8153161
Ref: manual/checkers syntax-checker-haml153205
Ref: e9153205
Ref: manual/checkers syntax-checker-handlebars153246
Ref: ea153246
Ref: manual/checkers syntax-checker-haskell-ghc153293
Ref: eb153293
Ref: manual/checkers syntax-checker-haskell-hlint153341
Ref: ec153341
Ref: manual/checkers syntax-checker-html-tidy153391
Ref: ed153391
Ref: manual/checkers syntax-checker-javascript-jshint153437
Ref: ee153437
Ref: manual/checkers syntax-checker-javascript-eslint153491
Ref: ef153491
Ref: manual/checkers syntax-checker-javascript-gjslint153545
Ref: f0153545
Ref: manual/checkers syntax-checker-json-jsonlint153600
Ref: f1153600
Ref: manual/checkers syntax-checker-less153650
Ref: f2153650
Ref: manual/checkers syntax-checker-lua153691
Ref: f3153691
Ref: manual/checkers syntax-checker-perl153731
Ref: f4153731
Ref: manual/checkers syntax-checker-php153772
Ref: f5153772
Ref: manual/checkers syntax-checker-php-phpmd153812
Ref: f6153812
Ref: manual/checkers syntax-checker-php-phpcs153858
Ref: f7153858
Ref: manual/checkers syntax-checker-puppet-parser153904
Ref: f8153904
Ref: manual/checkers syntax-checker-puppet-lint153954
Ref: f9153954
Ref: manual/checkers syntax-checker-python-flake8154002
Ref: fa154002
Ref: manual/checkers syntax-checker-python-pylint154052
Ref: fb154052
Ref: manual/checkers syntax-checker-racket154102
Ref: fc154102
Ref: manual/checkers syntax-checker-rst154145
Ref: fd154145
Ref: manual/checkers syntax-checker-rst-sphinx154185
Ref: fe154185
Ref: manual/checkers syntax-checker-ruby-rubocop154232
Ref: ff154232
Ref: manual/checkers syntax-checker-ruby-rubylint154281
Ref: 100154281
Ref: manual/checkers syntax-checker-ruby154331
Ref: 101154331
Ref: manual/checkers syntax-checker-ruby-jruby154372
Ref: 102154372
Ref: manual/checkers syntax-checker-rust154419
Ref: 103154419
Ref: manual/checkers syntax-checker-sass154460
Ref: 104154460
Ref: manual/checkers syntax-checker-scala154501
Ref: 105154501
Ref: manual/checkers syntax-checker-scss154543
Ref: 106154543
Ref: manual/checkers syntax-checker-sh-dash154584
Ref: 107154584
Ref: manual/checkers syntax-checker-sh-bash154628
Ref: 108154628
Ref: manual/checkers syntax-checker-slim154672
Ref: 109154672
Ref: manual/checkers syntax-checker-tex-chktex154713
Ref: 10a154713
Ref: manual/checkers syntax-checker-tex-lacheck154760
Ref: 10b154760
Ref: manual/checkers syntax-checker-texinfo154808
Ref: 10c154808
Ref: manual/checkers syntax-checker-verilog-verilator154852
Ref: 10d154852
Ref: manual/checkers syntax-checker-xml-xmlstarlet154906
Ref: 10e154906
Ref: manual/checkers syntax-checker-xml-xmllint154957
Ref: 10f154957
Ref: manual/checkers syntax-checker-yaml-jsyaml155005
Ref: 110155005
Ref: manual/checkers syntax-checker-yaml-ruby155053
Ref: 111155053
Ref: manual/checkers syntax-checker-zsh155099
Ref: 112155099
Node: Glossary155139
Ref: manual/glossary glossary155237
Ref: 113155237
Ref: manual/glossary doc155237
Ref: 114155237
Ref: manual/glossary term-syntax-checker155262
Ref: 22155262
Ref: manual/glossary term-registered-syntax-checker155371
Ref: 23155371
Ref: manual/glossary term-disabled-syntax-checker155527
Ref: 115155527
Ref: manual/glossary term-enabled-syntax-checker155707
Ref: 24155707
Ref: manual/glossary term-suitable-syntax-checker155832
Ref: 12155832
Node: Index156127

End Tag Table


Local Variables:
coding: utf-8
End:
