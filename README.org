* =flymake-checkers=

Flymake reloaded with useful checkers and a much improved configuration.

On the surface this library extends =flymake=, the on-the-fly syntax checker of
GNU Emacs, with syntax checkers for various programming and markup languages,
replacing the broken and out-dated built-in checkers for flymake.

Effectively, this library really provides a wholly new way of configuring and
extending flymake with new checkers.


** Features

- Provide syntax checkers for:
  - Emacs Lisp
  - Python
  - Ruby
  - CoffeeScript
  - Shell scripts (Bash, Dash and Zsh)
  - TeX/LaTeX
- Simplify configuration of flymake
- Simplify writing new checkers for flymake


** Installation

Install the ELPA packages from or [[http://marmalade-repo.org/][Marmalade]] with ~M-x package-install
flymake-checkers~.

Or [[https://github.com/lunaryorn/flymake-checkers/tags][download]] the latest release and install ~flymake-checkers.el~ with ~M-x
package-install-file~.

The library is written and tested against GNU Emacs 24 and may or may not work
in earlier versions of GNU Emacs.

Most checkers have dependencies against external tools that perform the
checking.  See [[Checkers]] for details.


** Usage

Enable =flymake-checkers-mode= in your ~init.el~ file.

#+BEGIN_SRC emacs-lisp
  ;; Enable flymake for all files
  (add-hook 'find-file-hook 'flymake-checkers-mode)
  ;; Enable flymake for Python only
  (add-hook 'python-mode-hook 'flymake-checkers-mode)
#+END_SRC

Or do ~M-x flymake-checkers-mode~ manually after visiting a file.

On-the-fly syntax checking with flymake-checkers will then start immediately.

*Important*: =flymake-checkers-mode= *overwrites* the standard flymake checker
lookup via =flymake-allowed-file-name-masks=.  Hence, if =flymake-checkers-mode=
is on =flymake-allowed-file-name-masks= is *ignored* and checkers declared in
this variable have no effect.


** Checkers

You need to install external utilities for the following checkers:

- Python :: Install [[http://pypi.python.org/pypi/flake8][flake8]], [[http://pypi.python.org/pypi/pyflakes][pyflakes]] or [[http://pypi.python.org/pypi/pylint][pylint]].
- Ruby :: Install Ruby.
- CoffeeScript :: Install [[http://www.coffeelint.org/][coffeelint]].
- TeX/LaTeX :: Install [[http://baruch.ev-en.org/proj/chktex/][chktex]].  Most TeX distributions, including TeXLive and
               MacTeX, already do this for you.
- Shell scripts :: Install Bash or Zsh depending on the type of shell file you
                   want to check.


** Customization

- ~M-x customize-group flymake-checkers~


** Extending

In flymake-checkers a syntax checker is described by a single function that is
called each time a syntax check is to be performed.  The body of this checker
function /declares/ the components of the syntax checker via
=flymake-checkers-simple= which does all the internal plumbing for flymake.
Each checker component is given as keyword argument to
=flymake-checkers-simple=.

A checker is comprised of the following components:

- =:command= (/mandatory/) :: A list containing the command to execute for
     syntax checking and its argument.  The special symbol =source= is replaced
     with a temporary copy of the source file[fn:1], created in the system
     temporary directory.  Use =source-inplace= instead to force the copy being
     created in the same directory as the original source file.
- =:error-patterns= (/optional/) :: A single error pattern or a list of error
     patterns to parse the output of =:command=.  Each pattern has the form
     =(REGEXP FILE-IDX LINE-IDX COL-IDX ERR-TEXT-IDX)=.  The patterns are tried
     in order of declaration.  If omitted, all patterns defined in
     =flymake-err-line-patterns= are tried.

Eventually, the checker function has only to be registered in
=flymake-checkers-major-mode-checkers-alist=.  This association list maps major
mode symbols to checkers to use in buffers of the corresponding mode.


*** Example

Let's see this in action by explaining the definition of the [[http://coffeescript.org/][CoffeeScript]]
checker included in flymake-checkers.  This checker uses the [[www.coffeelint.org][CoffeeLint]] utility
to perform the actual syntax check.

First we implement the checker function:

#+BEGIN_SRC emacs-lisp
  (defun flymake-checkers-coffee ()
    (flymake-checkers-simple
     :command '("coffeelint" "--csv" source)
     :error-patterns '("\\(.+\\),\\([0-9]+\\),\\(?:warn\\|error\\),\\(.+\\)"
                       1 2 nil 3)))
#+END_SRC

As you can see, we specify the command to use for checking via the =:command=
argument.  It is a straight-forward list with the executable name as first
element and some subsequent arguments.  The symbol =source= is automatically
replaced with the name of the file to check.

Since ~coffeelint~ outputs errors in a CSV format, which is rather unusual, we
also need custom =:error-patterns= to extract the error location and message
from the ~coffeelint~ output.  An error pattern is a list containing a regular
expression that matches the error, and indexes of groups that match the file
name, the line number, the column number and the error message respectively.
=:error-patterns= allows for a single error pattern as seen in the example, or a
list of such error patterns, in case the checker outputs messages in various
formats.

If =:error-patterns= is omitted, all patterns defined in
=flymake-err-line-patterns= are tried.  This variable contains patterns for a
wide range of error format, including all those from ~compile.el~.  Thus, if
your checker works with ~M-x compile~, there is a good chance that predefined
patterns already understand this output.

Now we only need to register this error checker for use with [[https://github.com/defunkt/coffee-mode][coffee-mode]].

#+BEGIN_SRC emacs-lisp
  (add-to-list 'flymake-checkers-major-mode-checkers-alist
               '(coffee-mode . flymake-checkers-coffee))
#+END_SRC

Assuming that =flymake-checkers-mode= is enabled [[(see Usage]]), CoffeeScript will
now be checked on the fly in =coffee-mode=.

As said, the checker function is called /each time/ a syntax check is
performed.  Hence, you can employ a more complicated logic in your checker to
construct the command for the syntax check.  This is used for instance by the
syntax checker for shell scripts to determine which shell to run:

#+BEGIN_SRC emacs-lisp
  (defun flymake-checkers-sh ()
    "Provide a flymake checker for shell scripts."
    (let ((options (cdr (assq sh-shell flymake-checkers-sh-options))))
      (when  options
        (flymake-checkers-simple
         :command `(,(symbol-name sh-shell) ,@options source)))))
#+END_SRC

As you can see, this function gets the currently used shell from =sh-shell=,
checks via =flymake-checkers-sh-options= if the shell is supported and which
additional options to provide, and eventually constructs the command to execute
dynamically based on these values.


** Further help

- ~C-h f flymake-checkers-mode~
- ~C-h f flymake-checkers-simple~


** Credits

The Vim library [[https://github.com/scrooloose/syntastic][syntastic]] by [[https://github.com/scrooloose][Martin Grenfell]] inspired this library and many of
its checkers.


** License

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA 02110-1301, USA.

See [[file:COPYING][COPYING]] for details.


** Footnotes

[fn:1] These temporary copies are necessary to allow for syntax checks of
   modified, but not yet saved buffers.
