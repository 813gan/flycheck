#!/usr/bin/env python
# -*- coding: utf-8; -*-
# Copyright (c) 2014 Sebastian Wiesner <lunaryorn@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


from __future__ import print_function

import sys
import os
import subprocess
from tempfile import NamedTemporaryFile


class Failed(Exception):
    def __init__(self, reason):
        self.reason = reason


def log(message):
    print(message, file=sys.stderr, end='')


class Check(object):

    def __init__(self, logfile):
        self.logfile = logfile

    def check_call(self, *args, **kwargs):
        try:
            subprocess.check_call(*args, **kwargs)
        except subprocess.CalledProcessError as error:
            raise Failed('Command {0} failed with code {1}.'.format(
                error.cmd, error.returncode))

    def check_output(self, *args, **kwargs):
        try:
            return subprocess.check_output(*args, **kwargs)
        except subprocess.CalledProcessError as error:
            raise Failed('Command {0} failed with code {1}.'.format(
                error.cmd, error.returncode))

    def __call__(self):
        raise NotImplementedError()


class TestsSucceed(Check):

    message = 'Running tests'

    def __call__(self):
        self.check_call(['make', 'vagrant-test'], stdout=self.logfile,
                        stderr=subprocess.STDOUT, bufsize=0)


class DocsBuild(Check):

    message = 'Building docs'

    def __call__(self):
        self.check_call(['vagrant', 'ssh', '-c', 'make -C /flycheck doc'],
                          stdout=self.logfile, stderr=subprocess.STDOUT,
                        bufsize=0)


class TexinfoManualCurrent(Check):
    message = 'Texinfo manual current'

    def __call__(self):
        output = self.check_output(['git', 'status', '--porcelain',
                                    'doc/flycheck.texi'])
        if 'doc/flycheck.texi' in output:
            raise Failed('Texinfo manual not up to date.  Please commit doc/flycheck.texi!')


class WorkingCopyClean(Check):

    message = 'Checking working copy'

    def __call__(self):
        output = self.check_output(['git', 'status', '--porcelain'])
        if output.strip():
            self.logfile.write(output)
            raise Failed('You have uncommmitted changes.')


def run_checks(checks, logfile):
    try:
        for check in checks:
            pending_check = check(logfile)
            log(pending_check.message)
            log('...')
            pending_check()
            log(' ok\n')
    except Failed:
        log(' FAILED\n')
        raise


def main():
    for line in sys.stdin:
        _, _, remote_ref, _ = line.split()

        # Don't force tests on feature branches
        checks = [WorkingCopyClean]
        if remote_ref == 'refs/heads/master':
            checks.extend([DocsBuild,
                           TexinfoManualCurrent,
                           TestsSucceed])

        with NamedTemporaryFile(
                'wb', 1, # No buffering for tail -f
                prefix='flycheck-testlog-', delete=False) as logfile:

            try:
                run_checks(checks, logfile)
            except Failed as failure:
                log(failure.reason + '\n')
                log('See {0} for details\n'.format(logfile.name))
                return 1

            # Remove the logfile if no errors occurred
            os.unlink(logfile.name)

    return 0


if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        log('Interrupted, not finishing push\n')
